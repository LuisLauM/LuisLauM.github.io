---
title: "Main commands in `marbec-gpu` Terminal"
description: |
  A quick list of the main commands to use within the `marbec-gpu` Terminal. | Un listado rápido de los principales comandos para usar dentro de la Terminal de `marbec-gpu`.
date: 2024-10-23
image: banner.jpg
about: 
  template: marquee
  image-shape: rectangle
draft: false
engine: knitr
---

Image credits: Kajetan Sumila at [Unplash](https://unsplash.com/photos/black-metal-tools-on-brown-wooden-shelf-sXPR9JV270c?utm_content=creditShareLink&utm_medium=referral&utm_source=unsplash)

# [EN] Main commands in `marbec-gpu` Terminal

The first thing to keep in mind is that `marbec-gpu` has Ubuntu installed, so the commands listed below will be the same as the ones used in that OS. This article will show a description of the main usage modes for each command, but if you have any additional requirements, you can always search in forums like [Stackoverflow](https://stackoverflow.com/) or check the help for each command, which consists of placing the command name followed by `--help`. For example, if I want to know the help for the `ls` command, just run `ls --help` in the Terminal.

::: {.callout-note title="Upper and lower case"}
As in R or Python, the use of upper or lower case when indicating an option does matter. For example, `ls -D` is not equivalent to `ls -d`, so be carefull.
:::

### Browsing within folders

* Command: `cd`
* Usage: `cd path/folder`

To indicate a previous position (folder), you will use the *statement* `..` as follows: `../path/folder1` (this indicates that there is a folder called `path` from the folder where you are, and that that has a folder called `folder1` as well).

### Create a folder

* Command: `mkdir`
* Usage: `mkdir path/folder`

### Get the content of a folder as a list

* Command: `ls`
* Usage: `ls path/folder/`

Main options:

* `--all` (o `-a`): Displays all files and subfolders, including those protected (hidden) by the system.

### Generate a list of files/folders and display the size of each item

* Command: `du`
* Usage: `du path/to/file.csv` o `du path/to/folder`

Main options:

* `--human-readable` (o `-h`): changes the units dynamically to avoid displaying all Kb. This is especially useful when you have large objects (subfolders or files).

* `--summary` (o `-s`): displays a summary table, i.e. it only includes the subfolders and files present at the first search level. This is useful when we just want to take a quick look and avoid displaying a complete listing of ALL internal subfolders. 

If I want to get a list of all the files and folders inside a folder with their respective sizes (the three options are equivalent):

```{bash, eval=FALSE}
du ruta/de/folder/* --human-readable --summarize
du ruta/de/folder/* -h -s
du ruta/de/folder/* -hs
```

### Copy-paste

For this, the simplest way is through the `cp` command and making use of the navigation commands cited in this post (e.g. `..` to indicate a previous folder). The basic syntax is the following: `cp path/origin /path/destination`, but there are different possible cases:

* Copy a file into the same folder, but with a different name (create duplicate): `cp file1.csv file1-dup.csv`.

* Copy a file to another folder: `cp path/file1.csv path/destination`.

* Copy more than one file to another folder: `cp path/file1.csv path/file2.csv folder/destination` 

* Copy a folder to another folder: `cp path/folder1 path/folder2 --recursive` or `cp path/folder1 path/folder2 -r`.

:::{.callout-note}
By default, `cp` will overwrite any file with the same name. To avoid this, it is possible to add the `-n` option as follows: `cp path/from/file1.csv path/destination -n`.
:::

### Cut-paste (and also rename)

It will be very similar to the above, but through the `mv` command:

* Rename a file (within the same folder): `mv file1.csv file2.csv`

* Move a file to another folder: `mv path/file1.csv path/to/destination`

* Move one file to another folder: `mv path/file1.csv path/file2.csv path/destination`

* Move one folder to another folder: `mv path/old/folder path/new/folder`


### Delete

For this, we will use the `rm` command as follows:

* Delete a file: `rm path/to/file.csv` 

* Delete a folder (and all its contents): `rm path/to/folder -r`

:::{.callout-caution title="No turning back"}
While inside Terminal it is always possible to cancel a command using the shortcut `Ctrl+C` (or `Cmd+C` on MacOS), once the `rm` command completes its work, **there is no way to revert the deletion** or recover it from a recycle garbage can, so be very careful when using it.
:::

### Display current processes

* Command: `top`

When you run it, it will show in interactive mode in Terminal the processes that are running, as well as the resources used by each of them (basically like a Task Manager). To exit this interactive mode, just press the `q` key.

### Stop a process

If we want to force the closing or the cancellation of a process already started, we can use the shortcut `Ctrl+C` (or `Cmd+C` in MacOS). It is important to keep in mind that forcing the closing of a process that had in progress the handling of files or folders (creation, copy, etc.) can leave the generated files unusable.

### Viewing a plain text file

By default, there are two tools available from Terminal: `vi` and `nano`. The syntax for their execution is as simple as `vi path/file1.txt` or `nano path/file1.txt`, where `file1.txt` can be any plain text file (e.g. an R or Python script). The navigation shortcuts within each of these environments are different, but documentation is abundant on the Internet. Choose the one you like best.

# [ES] Principales comandos en Terminal de `marbec-gpu`

Lo primero que debemos tener en cuenta es que `marbec-gpu` lleva instalado Ubuntu, por lo que los comandos listados a continuación serán los mismos que se usan en dicho SO. En este artículo se mostrará una descripción de los principales modos de uso para cada comando, pero si usted tiene algún requerimiento adicional, siempre puede buscar en foros como Stackoverflow o revisar la ayuda de cada comando, que consiste en colocar el nombre del comando seguido de `--help`. Por ejemplo, si deseo conocer la ayuda del comando `ls`, bastará con ejecutar `ls --help` en la Terminal.

::: {.callout-note title="Mayúsculas y minúsculas"}
Al igual que en R o Python, el uso de mayúsculas o minúsculas al momento de indicar una opción sí importa. Por ejemplo, `ls -D` no equivale a `ls -d`, por lo que se debe tener cuidado.
:::

### Navegar entre carpetas

* Comando: `cd`
* Modo de uso: `cd ruta/carpeta`

Para indicar que se desea ir a una posición (carpeta) anterior, se utilizará el *statement* `..` de la siguiente manera: `../ruta/carpeta1` (esto indica que a partir de la carpeta en donde nos encontramos, en la carpeta anterior hay una carpeta llamada `ruta` que a su vez tiene una llamada `carpeta1`).

### Crear una carpeta

* Comando: `mkdir`
* Modo de uso: `mkdir ruta/carpeta`

### Generar un listado de archivos

* Comando: `ls`
* Modo de uso: `ls ruta/folder`

Principales opciones:

* `--all` (o `-a`): Muestra todos los archivos y subcarpetas, incluyendo aquellos protegidos (ocultos) por el sistema.

### Generar un listado de archivos/carpetas mostrando el tamaño de cada elemento

* Comando: `du`
* Modo de uso: `du ruta/archivo-folder.csv`

Principales opciones:

* `--human-readable` (o `-h`): cambia las unidades dinámicamente para evitar mostrar todo Kb. Esto es especialmente útil cuando se tiene objetos (subcarpetas o archivos) de gran tamaño.

* `--summary` (o `-s`): muestra una tabla resumida, i.e. solo incluye las subcarpetas y archivos presentes en el primer nivel de búsqueda. Esto es útil cuando solo queremos echar un vistazo rápido y evitar que muestre un listado completo de TODAS las subcarpetas internas. 

Si deseo obtener un listado de todos los archivos y carpetas dentro de un folder con sus respectivos tamaños (las tres opciones son equivalentes):

```{bash, eval=FALSE}
du ruta/de/folder/* --human-readable --summarize
du ruta/de/folder/* -h -s
du ruta/de/folder/* -hs
```

### Copiar-pegar

Para esto, la manera más sencilla es a través del comando `cp` y haciendo uso de los comandos de navegación citados en este post (e.g. `..` para indicar una carpeta anterior). La sintaxis básica es la siguiente: `cp ruta/de/origen ruta/de/destino`, pero existen diferentes casos posibles:

* Copiar un archivo dentro de la misma carpeta, pero con un nombre distinto (crear duplicado): `cp archivo1.csv archivo1-dup.csv`

* Copiar un archivo hacia otra carpeta: `cp ruta/de/archivo1.csv carpeta/de/destino`

* Copiar más de un archivo hacia otra carpeta: `cp ruta/de/archivo1.csv ruta/de/archivo2.csv carpeta/de/destino`

* Copiar una carpeta en otra carpeta: `cp ruta/de/carpeta1 ruta/de/carpeta2 --recursive` o `cp ruta/de/carpeta1 ruta/de/carpeta2 -r`

:::{.callout-note}
Por defecto, `cp` sobreescribirá cualquier archivo con el mismo nombre. Para evitarlo, es posible añadir la opción `-n` del siguiente modo: `cp ruta/de/archivo1.csv ruta/de/destino -n`
:::

### Cortar-pegar (y también renombrar)

Será muy similar a lo anterior, pero a través del comando `mv`:

* Renombrar un archivo (dentro de la misma carpeta): `mv archivo1.csv archivo2.csv`

* Mover un archivo hacia otra carpeta: `mv ruta/de/archivo1.csv carpeta/de/destino`

* Mover más de un archivo hacia otra carpeta: `mv ruta/de/archivo1.csv ruta/de/archivo2.csv carpeta/de/destino`

* Mover una carpeta hacia otra carpeta: `mv ruta/antigua/carpeta ruta/nueva/carpeta` 


### Borrar

Para esto, utilizaremos el comando `rm` de la siguiente manera:

* Borrar un archivo: `rm ruta/de/archivo.csv`

* Borrar una carpeta (y todo su contenido): `rm ruta/de/carpeta -r`

:::{.callout-caution title="No hay vuelta atrás"}
Si bien dentro de Terminal siempre es posible cancelar una orden usando el atajo `Ctrl+C` (o `Cmd+C` en MacOS), una vez que se ejecuta el comando `rm` y éste culmina su trabajo, **no hay manera de revertir lo borrado** ni recuperarlo desde alguna papelera de reciclaje, así que ten mucho cuidado al usarlo.
:::

### Visualizar procesos en curso

* Comando: `top`

Al ejecutarlo, se mostrará en modo interactivo en Terminal los procesos que se están ejecutando, así como los recursos utilizados por cada uno de ellos (básicamente como un Administrador de tareas). Para salir de este modo interactivo, basta con pulsar la tecla `q`.

### Detener la ejecución de un proceso

Si queremos forzar el cierre o la cancelación de un proceso ya iniciado, podemos utilizar el atajo `Ctrl+C` (o `Cmd+C` en MacOS). Es importante tener en cuenta que forzar el cierre de un proceso que tenía en marcha el manejo de archivos o carpetas (creación, copia, etc.) puede dejar inutilizables los archivos generados.

### Visualizar un archivo de texto plano

Por defecto, desde Terminal existen dos herramientas disponibles: `vi` y `nano`. La sintaxis para su ejecución es tan sencilla como `vi ruta/archivo1.txt` o `nano ruta/archivo1.txt`, en donde `archivo1.txt` puede ser cualquier archivo de texto plano (e.g. un script en R o Python). Los atajos de navegación dentro de cada uno de esos entornos sí son distintos, pero la documentación es muy abundante en Internet. Elige el que te agrade más.
