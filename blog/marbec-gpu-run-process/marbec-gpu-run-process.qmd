---
title: "Let's working with `marbec-gpu`"
description: |
  How to manage files and folders to and from `marbec-data`? | Comment gérer les fichiers et les dossiers de et vers `marbec-data` ? | ¿Cómo gestionar archivos y carpetas dese y hacia `marbec-data`?
date: 2024-10-21
image: banner.jpg
about: 
  template: marquee
  image-shape: rectangle
draft: true
---

Image credits: Андрей Сизов at [Unplash](https://unsplash.com/photos/a-book-with-a-diagram-on-it-nuz3rK5iiKg?utm_content=creditShareLink&utm_medium=referral&utm_source=unsplash)

# \[EN\] Let's working with `marbec-gpu`

# \[ES\] Empezando a trabajar con `marbec-gpu`

## Un poco de orden

### Creando un directorio de trabajo

Al igual que cuando se trabaja con RStudio de manera local (i.e. en nuestra PC), se recomienda definiendo claramente nuestro directorio de trabajo. Esto es sumamente importante porque cualquier proceso que ejecutemos (ya sea desde RStudio o Terminal) utilizará ese directorio como referencia para hallar los archivos de entrada, salida o incluso otros scripts.

Para nuestro caso, hemos creado una carpeta llamada **mgpu-examples/** en donde a su vez existen las subcarpetas **code/**, **inputs/**, **outputs/** y **figures/**. La creación de carpetas en `marbec-data` puede hacerse directamente desde la interfaz web (dando click a *File station* y luego usando el botón *Create folder*), pero también podemos copiar-pegar los elementos ya existentes en nuestra PC hacia la carpeta de trabajo.

### Creando un proyecto de RStudio

Lo siguiente NO es obligatorio, pero sí muy útil, sobre todo cuando se trabaja con RStudio y es crear un proyecto de RStudio. Para ello, iremos a *File* y luego a *New Project*.

![](images/clipboard-334464964.png)

Luego, en la ventana que nos aparece, daremos click a *Existing directory*, luego a *Browse* y daremos click a la carpeta que hemos definido como nuestro directorio de trabajo (en nuestro caso, *mgpu-examples/*). Luego, *Acpetar* y finalmente en el botón *Create Project*. Rstudio parpadeará un poco y luego nos mostrará la misma ventana, pero dentro del proyecto establecido. La manera más sencilla de comprobar que el proyecto se ha creado en la carpeta correcta (*mgpu-examples/* en nuestro caso) es verificando que justo en el panel de Console, a la derecha de la versión de R, aparezca únicamente la ruta de nuestra carpeta principal (y no alguna de las subcarpetas, e.g. *mgpu-examples/code/* o *mgpu-examples/inputs/*).

![](images/clipboard-3123546063.png)

::: {.callout-caution title="Antes de decir `hello`"}
`marbec-gpu` incorpora la posibilidad de trabajar con RStudio (Server); sin embargo, esta interfaz deberá utilizarse ÚNICAMENTE para PREPARAR nuestros scripts antes de ser ejecutados utilizando toda la potencia de nuestro server. En otras palabras, dentro del entorno de RStudio podremos cargar archivos no tan grandes y realizar operaciones básicas, pero en ningún momento debemos ejecutar un proceso complejo (pesado) desde ahí, sino desde **Terminal**.
:::

## `Hello world!` (ejemplos sencillos)

### Ejemplo 1.1

Iniciaremos con lo más sencillo: crear un script en R e imprimir el (famosísimo) mensaje "Hello world!".

* Una vez dentro de la pantalla de RStudio, crearemos un nuevo script el cual contendrá una única línea:

```{r}
#| eval: false
print("Hello world and hello marbec-gpu!")
```

* Luego, guardaremos ese script con el nombre *code/ex1-1.R* (*code/* hace referencia a que el script deberá guardarse dentro de la subcarpeta *code/* que hemos creado anteriormente).

* Ahora viene lo interesante, dentro de nuestro navegador, debemos volver a la pestaña de Launcher y abrir una ventana de **Terminal** (dando click al ícono correspondiente).

* Por defecto, el Terminal se abre en la carpeta local asignada a nuestro usuario. Desde ahí, debemos llegar a la carpeta que hemos establecido como directorio de trabajo; es decir, la carpeta que nuestro script reconocerá como directorio de trabajo (ya sea que hayamos decidido usar RStudio o no para crearla o crear un proyecto dentro de ella). Nuestro script deberá estar contenido en esa carpeta (o en alguna de sus subcarpetas).

### Ejemplo 1.2

### Ejemplo 1.3

## `Hello universe!` (procesos en paralelo)

### Ejemplo 2.1

### Ejemplo 2.2

### Ejemplo 2.3
