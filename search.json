[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "EN: Here I will be depositing several articles of very diverse topics.\nES: Aquí iré depositando contenido sobre temas muy diversos.\nImage credits: Siora Photography at Unplash\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto template for a scientific article draft\n\n\nA simple template in Quarto for writing a scientific article. | Una plantilla simple en Quarto para redactar un artículo científico.\n\n\n\n\n\nDec 17, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to insert bibliographic references from Zotero in Quarto files?\n\n\nAutomatically insert bibliographic citations from Zotero into Quarto files through RStudio. | Insertar citas bibliográficas automáticamente desde Zotero en archivos Quarto a…\n\n\n\n\n\nDec 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEl Niño\n\n\nCurrent conditions for the Peruvian coast. | Condiciones actuales para la costa peruana.\n\n\n\n\n\nApr 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeveloping Beneath the surface\n\n\nCómo fui desarrollando esta página\n\n\n\n\n\nApr 19, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "EN\nMy full name is Luis Wencheng Lau-Medrano, I am Peruvian by birth and a passionate (geek) about technology, marine biology, data analysis, Legos and travel. Since I was a child, I have been fascinated by the digital world and biology, so when I became an adult, I decided to combine both passions to solve problems and improve people’s lives (and my own, which I am working on).\nIn my professional career, I complete my bachelor as biologist with a specialization in Hydrobiology at the UNMSM (Lima-Peru), then I continued with a Master’s degree in Marine Sciences at the UPCH (Lima-Peru). Currently, I am finishing a doctorate in ecology at the University of Montpellier-UM (France) with an IRD scholarship.\nI have worked as a researcher at the Instituto del Mar del Perú-IMARPE, in the General Directorate of Pelagic Resources Research and in the General Directorate of Demersal and Littoral Resources Research. My main tasks were the statistical analysis of fishery information and research cruises for decision-making and management of the anchovy (Engraulis ringens), jack mackerel (Trachurus murphyi), mackerel (Scomber japonicus), hake (Merluccius gayi peruanus) and giant squid (Dosidicus gigas). Additionally, I have done two internships: one at the University of Washington-UW for the standardization of the CPUE of two shark species using the VAST tool, and another at the UM supporting the calibration of the OSMOSE model for the Peruvian Upwelling Ecosystem. I have experience as a speaker at international congresses held in Lima-Peru, La Paz-Mexico, Victoria-Canada and Palma de Mallorca-Spain.\nI have also experience teaching programming and data management courses and I am the creator and developer of the packages in CRAN imagine and grec.\nHobbies? Of course! Video games, building Legos, biking, traveling, taking pictures of natural and urban landscapes and programming (yes, also as a hobbie).\n\n\nES\nMi nombre completo es Luis Wencheng Lau-Medrano, soy peruano de nacimiento y un apasionado de la tecnología (un geek quizás), la biología marina, el análisis de datos, los Legos y los viajes. Desde siempre me ha fascinado el mundo digital y la biología, por lo que llegado el momento de ser adulto decidí combinar ambas pasiones para resolver problemas y mejorar la vida de las personas (y la mía propia, en ello trabajo).\nMi formación profesional inicial es de biólogo con mención en Hidrobiología en la UNMSM (Lima-Perú), luego continué con una Maestría en Ciencias del Mar en la UPCH (Lima-Perú). Actualmente, vengo finalizando un doctorado en ecología en la Universidad de Montpellier-UM (Francia) con el apoyo de una beca IRD.\nHe trabajado como investigador en el Instituto del Mar del Perú-IMARPE, en la Dirección General de Investigaciones de Recursos Pelágicos y en la Dirección General de Investigaciones de Recursos Demersales y Litorales. Mis labores principales fueron el análisis estadístico de información de pesquería y cruceros de investigación para la toma de decisiones y manejo de los recursos anchoveta (Engraulis ringens), jurel (Trachurus murphyi), caballa (Scomber japonicus), merluza (Merluccius gayi peruanus) y pota (Dosidicus gigas). Adicionalmente, he realizado dos pasantías: una en la Universidad de Washington-UW para la estandarización de la CPUE de dos especies de tiburones usando la herramienta VAST, y otra en la UM apoyando con la calibración del modelo OSMOSE para el Ecosistema de Afloramiento Peruano. Tengo experiencia como expositor en congresos internacionales realizados en Lima-Perú, La Paz-México, Victoria-Canadá y Palma de Mayorca-España.\nTambién tengo experiencia docente cursos de programación y manejo de datos y soy creador y desarrollador de los paquetes en CRAN imagine y grec.\n¿Hobbies? ¡Por supuesto! Juegos de video, armar Legos, pasear en bicicleta, viajar, tomar fotos de paisajes naturales y urbanos y programar (sí, también como hobbie)."
  },
  {
    "objectID": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html",
    "href": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html",
    "title": "How to insert bibliographic references from Zotero in Quarto files?",
    "section": "",
    "text": "Image credits: RetroSupply at Unplash"
  },
  {
    "objectID": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#required-software",
    "href": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#required-software",
    "title": "How to insert bibliographic references from Zotero in Quarto files?",
    "section": "Required software",
    "text": "Required software\nAs you can suppose, it is necessary to have installed: R, RStudio, Zotero (preferably with a logged in account and with some references that we can use as an example) and Quarto (this last one comes with the installation of the latest versions of RStudio)."
  },
  {
    "objectID": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#installing-rbb-plug-in-in-zotero",
    "href": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#installing-rbb-plug-in-in-zotero",
    "title": "How to insert bibliographic references from Zotero in Quarto files?",
    "section": "Installing RBB plug-in in Zotero",
    "text": "Installing RBB plug-in in Zotero\nTo quote the words of the official website of this plug-in: Better BibTeX (BBT) is a plugin for Zotero and Juris-M that makes it easier to manage bibliographic data, especially for people authoring documents using text-based toolchains (e.g. based on LaTeX / Markdown).\nThe installation is detailed in the web site itself, but we will make quick wrap-up:\n\nGo to the Installation section (tab):\nRight in the first sentence of the instructions, the words latest release are in a slightly different color as they contain the link to the repository of the latest available version of the plug-in:\n\nClicking on this link will open a repository window in Github, from where we must download the file with extension .xpi:\n\nNext, we will open a Zotero window and go to the Tools → plug-ins menu:\n\nA window will open showing all installed plug-ins. To install a new plug-in, just click on the gear icon (top right) and click on the Install Pluggins From File option:\n\nFrom here, we will select the xpi file we downloaded in step [3] and, after a few seconds, we should see our new BBT plug-in installed and active (because yes, it is possible to deactivate plug-ins):"
  },
  {
    "objectID": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#installing-the-rbbt-package-and-addin-in-rstudio",
    "href": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#installing-the-rbbt-package-and-addin-in-rstudio",
    "title": "How to insert bibliographic references from Zotero in Quarto files?",
    "section": "Installing the rbbt package and addin in RStudio",
    "text": "Installing the rbbt package and addin in RStudio\nAs I mentioned, in RStudio it is possible to add extra capabilities to the IDE through addins. For our case, we will use a package that contains the addins needed to interface our RStudio interface with Zotero. The package referred to is called rbbt and, while it is NOT an official CRAN package, we can download it directly from their repository on Github.\nNow, you may decide to download and use the official version of the package; however, as of this writing, I have taken the official version of rbbt and created my own version where I have corrected certain problems and added certain features (e.g., the ability to quote R packages). This tutorial shows how to install and use the (forked) version available on my Github profile, but this is open source, so you decide (you can even create your own version and add more interesting features).\nTo install the package, just run the following line in R:\n\n# To run this, you must first install the 'remotes' package\nremotes::install_github(repo = \"LuisLauM/rbbt\")\n\nOnce the installation is complete, we can check that it has been correctly added to our Addins menu, which is located right at the end of the RStudio shortcut bar:\n\nBy clicking on the Addins drop-down menu, we can look for the Insert Citation command to be found now:\n\nFrom this point on, it is possible to perform those actions by clicking on those buttons, but this is VERY uncomfortable to do while writing an article or report, so we will now see how to add keyboard shortcuts for those commands."
  },
  {
    "objectID": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#configuring-rbbt-shortcuts",
    "href": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#configuring-rbbt-shortcuts",
    "title": "How to insert bibliographic references from Zotero in Quarto files?",
    "section": "Configuring rbbt shortcuts",
    "text": "Configuring rbbt shortcuts\nAdding keyboard shortcuts in RStudio is very simple, just go to the menu Tools → Modify keyboard shortcuts and, in the window that will appear, use the small search engine at the top right to find those commands related to Zotero. Three will appear, of which, from my own experience, I have only assigned a shortcut to Insert citation. To assign a key combination, just click on the space to the right of the name of each command (in the Shortcut column) and press the desired combination: in my case, I use the combinations of Ctrl + K, but this will depend on your operating system (e.g. in MacOS there is no Ctrl key), to make sure that there are no other commands previously assigned to any of those key combinations.\n\nGreat, we’re all set! It’s time to test our changes."
  },
  {
    "objectID": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#testing-everything",
    "href": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#testing-everything",
    "title": "How to insert bibliographic references from Zotero in Quarto files?",
    "section": "Testing everything",
    "text": "Testing everything\n\nWe will start by opening a file in Quarto in HTML output format (this is merely illustrative, the commands will work regardless of the output format selected). Important: for this example, I suggest making sure that the Use visual markdown editor option is unchecked, since we will be working in Source mode.\n\nNext, we will create an empty file where our bibliographic citations will be stored (for our example, we will name it references.bib). Then, in the header of our Quarto file (also called the YAML section), we will add a line where we will indicate the path to this created file:\n\n---\ntitle: \"test_rbbt\"\nformat: html\nbibliography: references.bib\n---\n\nAlso, to ensure that rbbt does NOT attempt to include references to figures, tables, equations, or other non-bibliographic elements, we will include the following code within a chunk at the beginning of our document:\n\n\n# Get current filepath\ncurrentFilePath &lt;- this.path::this.path()\n\n# Get citation keys\nprefix2rm &lt;- c(\"fig-\", \"tbl-\", \"eq-\", \"sec-\", \"lst-\", \"thm-\")\nkeys &lt;- rbbt::bbt_detect_citations(path = currentFilePath)\nindex2rm &lt;- sapply(X = paste0(\"^\", prefix2rm), FUN = grep, x = keys) |&gt; \n  \n  do.call(what = c)\n\n# Updating bib file\nrbbt::bbt_update_bib(path_rmd = currentFilePath, ignore = keys[index2rm], quiet = TRUE)\n\n\nNext, we will type some text and then press the key combination assigned to the insert quote command (remember the Ctrl + K shorcut?). What will happen is that a very thin window will open that will serve as an interface to Zotero. We will be able to type all the quotes we want to include in our text. The navigation between the suggested quotations is done with the arrow keys and the Enter key. It is also possible to add multiple quotes in each call of this small but powerful interface:\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuotations may be made freely or in parentheses; however, for the latter case, quotations should be placed in square brackets [ ] (and not between the parenthesis symbols).\n\n\n\nNow yes, we render the document and we should get:\n\n\n\n\n\n\n\n\nRender on Save\n\n\n\nIt is highly recommended to enable the Render on Save option (located at the top next to the Save button), which allows us to Render and visualize our work just pressing Ctrl + S (Save shortcut).\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAll the material needed to run this tutorial can be found in my repository, following this link link."
  },
  {
    "objectID": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#software-necesario",
    "href": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#software-necesario",
    "title": "How to insert bibliographic references from Zotero in Quarto files?",
    "section": "Software necesario",
    "text": "Software necesario\nComo ya imaginarán, es necesario tener instalados: R, RStudio, Zotero (de preferencia, con una cuenta logueada y con algunas referencias que podamos usar como ejemplo) y Quarto (este último viene junto a la instalación de las últimas versiones de RStudio)."
  },
  {
    "objectID": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#instalando-el-plug-in-de-rbb-en-zotero",
    "href": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#instalando-el-plug-in-de-rbb-en-zotero",
    "title": "How to insert bibliographic references from Zotero in Quarto files?",
    "section": "Instalando el plug-in de RBB en Zotero",
    "text": "Instalando el plug-in de RBB en Zotero\nCitando las propias palabras de la web oficial de este plug-in: Better BibTeX (BBT) es un complemento para Zotero y Juris-M que facilita la gestión de los datos bibliográficos, especialmente para los autores de documentos que utilizan cadenas de herramientas basadas en texto (por ejemplo, LaTeX / Markdown).\nSu instalación está detallada en la propia web, pero haremos un resumen aquí:\n\nIr a la sección (pestaña) de Instalación:\nJustamente en la primera frase de las instrucciones, las palabras latest release están de un color ligeramente distinto ya que contienen el link al repositorio de la última versión disponible del plug-in:\n\nAl hacer click sobre ese link, se abrirá una ventana de repositorio en Github, desde donde deberemos descargar el archivo con extensión .xpi:\n\nSeguidamente, abriremos una ventana de Zotero e iremos al menú de Tools → Plugins:\n\nSe abrirá una ventana que nos mostrará todos los plug-ins instalados. Para instalar un plug-in nuevo, bastará con dar click al ícono de engranaje (arriba a la derecha) y dar click a la opción Install Pluggins From File:\n\nDesde aquí, seleccionaremos el archivo xpi que descargamos en el paso [3] y, después de unos segundos, ya deberíamos observar nuestro nuevo plug-in BBT instalado y activo (porque sí, es posible desactivar plug-ins):"
  },
  {
    "objectID": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#instalando-el-addin-de-rbbt-en-rstudio",
    "href": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#instalando-el-addin-de-rbbt-en-rstudio",
    "title": "How to insert bibliographic references from Zotero in Quarto files?",
    "section": "Instalando el addin de rbbt en RStudio",
    "text": "Instalando el addin de rbbt en RStudio\nComo mencioné, en RStudio es posible añadir capacidades extra al IDE a través de addins. Para nuestro caso, utilizaremos un paquete que contiene los addins necesarios para interconectar nuestra interfaz de RStudio con Zotero. El paquete referido se llama rbbt y, si bien NO es un paquete oficial de CRAN, podemos descargarlo directamente desde su repositorio en Github.\nAhora bien, usted puede decidir descargar y utilizar la versión oficial del paquete; sin embargo, al día en que escribo este artículo, yo he tomado la versión oficial de rbbt y he creado la mía propia en donde corrijo ciertos problemas y añado ciertas funcionalidades (e.g., el poder citar paquetes de R). El presente tutorial muestra cómo instalar y usar la versión (forked) disponible en mi perfil de Github, pero esto es código libre, por lo que usted decide (hasta incluso puede crear su propia versión y añadir funcionalidades más interesantes).\nPara instalar el paquete, bastará con ejecutar las siguiente línea en R:\n\n# Para esto, debe instalar previamente el paquete 'remotes'\nremotes::install_github(repo = \"LuisLauM/rbbt\")\n\nUna vez que haya culminado la instalación, podremos revisar que se haya añadido correctamente a nuestro menú de Addins, que se encuentra justo al final de la barra de accesos rápidos de RStudio:\n\nAl hacer click en el menú desplegable de Addins, podremos buscar que se encuentre ahora los comandos de Insertar citas y Añadir bibliografía:\n\nA partir de este punto, ya es posible realizar esas acciones a través de dar click a esos botones, pero esto resulta MUY incómodo de hacer durante la redacción de un artículo o reporte, por lo que a continuación veremos cómo añadir atajos de teclado para dichos comandos."
  },
  {
    "objectID": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#atajos-de-teclado-para-los-comandos-de-rbbt",
    "href": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#atajos-de-teclado-para-los-comandos-de-rbbt",
    "title": "How to insert bibliographic references from Zotero in Quarto files?",
    "section": "Atajos de teclado para los comandos de rbbt",
    "text": "Atajos de teclado para los comandos de rbbt\nAñadir atajos de teclado en RStudio es muy sencillo, basta con ir al menú Tools → Modify keyboard shortcuts y, en la ventana que aparecerá, utilizar el pequeño buscador arriba a la derecha para hallar aquellos comandos relacionados con Zotero. Aparecerán 3, de los cuales bastará con asignar un atajo a Insertar cita. Para asignar una combinación de teclas, daremos click al espacio a la derecha del nombre del comando de interés (en la columna Shortcut) y presionar la combinación deseada: en mi caso, utilizo las combinación Ctrl + K, pero eso dependerá desde su sistema operativo (e.g. en MacOS no existe la tecla Ctrl), hasta el hecho de asegurarnos que no haya otros comandos previamente asignados a alguna de esas combinaciones de teclas.\n\n¡Genial, ya tenemos todo listo! Es momento de probar nuestros cambios."
  },
  {
    "objectID": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#poner-a-prueba-todo",
    "href": "blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html#poner-a-prueba-todo",
    "title": "How to insert bibliographic references from Zotero in Quarto files?",
    "section": "Poner a prueba todo",
    "text": "Poner a prueba todo\n\nEmpezaremos por abrir un archivo en Quarto en formato de salida en HTML (esto es meramente ilustrativo, los comandos funcionará independientemente del formato de salida seleccionado). Importante: para este ejemplo, sugiero asegurarnos que la opción Use visual markdown editor esté deseleccionada, ya que trabajaremos en el modo Source.\n\nSeguidamente, crearemos un archivo vacío en donde se guardarán nuestras citas bibliográficas (para nuestro ejemplo, le pondremos el nombre references.bib). Luego, en la cabecera de nuestro archivo de Quarto (llamada también la sección YAML), añadiremos una línea en donde indicaremos la ruta a este archivo creado:\n\n---\ntitle: \"test_rbbt\"\nformat: html\nbibliography: references.bib\n---\n\nAsí mismo, para asegurarnos de que rbbt NO intente incluir las referencias a figuras, tablas, ecuaciones, u otros elementos no bibliográficos, incluiremos el siguiente código dentro de un chunk al inicio de nuestro documento:\n\n\n# Get current filepath\ncurrentFilePath &lt;- this.path::this.path()\n\n# Get citation keys\nprefix2rm &lt;- c(\"fig-\", \"tbl-\", \"eq-\", \"sec-\", \"lst-\", \"thm-\")\nkeys &lt;- rbbt::bbt_detect_citations(path = currentFilePath)\nindex2rm &lt;- sapply(X = paste0(\"^\", prefix2rm), FUN = grep, x = keys) |&gt; \n  \n  do.call(what = c)\n\n# Updating bib file\nrbbt::bbt_update_bib(path_rmd = currentFilePath, ignore = keys[index2rm], quiet = TRUE)\n\n\nA continuación, digitaremos algo de texto y seguidamente presionaremos la combinación de teclas asignada al comando de insertar cita (en este ejemplo, Ctrl + K). Lo que ocurrirá es que se abrirá una ventana muy delgada que nos servirá como interface con Zotero. En ella, podremos escribir todas las citas que deseamos incluir en nuestro texto. La navegación entre las citas sugeridas la haremos con las teclas direccionales y la tecla Enter. Así mismo, es posible añadir múltiples citas en cada llamada de esta pequeña pero poderosa interfaz:\n\n\n\n\n\n\n\n\nNote\n\n\n\nLas citas pueden hacerse de forma libre o entre paréntesis; sin embargo, para el segundo caso, deberán colocarse las citas entre corchetes [ ] (y no entre los símbolos de paréntesis).\n\n\n\nAhora sí, renderizamos el documento y deberíamos obtener:\n\n\n\n\n\n\n\n\nRender on Save\n\n\n\nEs muy recomendable habilitar la opción de Render on Save (situada arriba al costado del botón de Guardar) que, como su nombre lo indica, permite Redenrizar al Guardar, lo que permite que solo presiones Ctrl + S para visualizar nuestro trabajo en Quarto.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTodo el material necesario para ejecutar este tutorial se puede encontrar en mi repositorio, siguiendo este link."
  },
  {
    "objectID": "blog/about-this-website/about-this-website.html",
    "href": "blog/about-this-website/about-this-website.html",
    "title": "Developing Beneath the surface",
    "section": "",
    "text": "The first thing that came to mind was “how can I develop a page that I can leave as a reference for those who want to contact me in a professional setting?” and “through what medium can I share those ideas, small works or personal experiences that I believe could be useful for other professionals in my field?”. Well, there are many options around (social media, podcasts, TikTok, etc.). This first decision was not difficult, as I am not particularly characterized by my charisma on social networks, so I decided to opt for writing a blog. However, here the decision-making process did get a bit complicated, as there are many platforms available: Wordpress, Netlify, Gitlab pages, Medium, among others. Each one offers different advantages and potential, but my decision was based above all on the familiarity of use of the Github and Quarto platforms. I decided on Github pages.\n\n\n\nGithub Pages is a free static website hosting service that allows you to publish HTML content directly from a GitHub repository. This platform offers multiple advantages:\n\nIt’s free!: You don’t need to pay for a web hosting service, just have a (free) GitHub account.\nEasy to use: Uploading your HTML, CSS, and JavaScript files to GitHub is very simple.\nDirect integration with GitHub: This becomes VERY important if you already use GitHub (as was my case) for your code projects.\nVersioning: GitHub Pages keeps a history of all the changes you make to your website, so if something goes wrong you can always go back to a previous version of your repository (page).\nSecure: GitHub Pages uses HTTPS to protect your website.\nFast: For a few years now, Microsoft has bought GitHub and therefore its services use an extensive global network of servers to deliver your website to users around the world.\nScalable: GitHub Pages can handle any amount of traffic, so your website can grow smoothly. Although a personal/professional blog is not expected to have very high traffic peaks, it is always good to know that this support exists.\nSEO optimized: GitHub Pages is optimized for search engines, which will help your website appear in the results of major web search engines.\n\nIn the end, Github pages was the hosting option that I found most attractive. However, there are multiple ways to upload content, from different development platforms that involve the use of programming languages (e.g. Javascript) or markup, such as markdown or Quarto. Once again, my historical experience weighed more and I decided to use Quarto.\n\n\n\nQuarto is an open-source scientific document publishing platform developed by the POSIT (formerly RStudio) team. It is based on the R Markdown format and extends it with new features and functionalities to create richer and more interactive documents. It implements a more powerful preprocessing system than R Markdown and supports additional programming languages such as Python and Julia, expanding the possibilities for analysis and visualization.\nFor the past few years, I have been using Quarto not only for writing simple R reports, but also for the complete composition of scientific articles (one of them with a format submitted directly from the .docx output obtained in Quarto), as well as the development of interactive websites through the Quarto-Shiny duo.\n\n\n\nI Didn’t Have to Start from Scratch. Fortunately, there are many resources available online, but I will briefly summarize the main links I used:\n\nCreate the website hosted on Github pages, prepare it for content management with Quarto and to work from RStudio: The first steps to follow are very well explained in the video by Melissa Van Bussel (link). Highly recommended, although it assumes that we know how to handle Git-bash and that we have a token well configured for our PC. I will put these last details at the end of this article.\n\n\n\nEstablish an outline of what we are going to publish: Once we have successfully configured our website, it is time to take pen and paper and outline what content we want to share and what the logic will be for organizing that content into sections. While this part is very personal, since it will not be the same to diagram a page that only aims to serve as a professional reference (that is, an interactive resume) to that of a freelancer who wants to show their main projects and/or services offered, you don’t need to start from scratch either. You can review examples of pages from other creators (researchers, reporters, bloggers, graphic artists, etc.) and be inspired by their designs. Also, you can review examples of page structures that use Github pages (link). Remember, everything must ALWAYS start with the type of content you plan to place.\nStart writing: OK, this is not a scientific article and there is much more freedom to fill in the different sections; however, always remember to take into account the basic writing criteria (from general to specific), be clear and careful when choosing the type of language (based on the type of audience you expect to read you) and, once again, review examples. Of course, these days AI text generation platforms can be of great help, but we should not delegate the entire burden (i.e. no copy-paste) to them without first reading and corroborating the information they return to us. At this point, the following articles were very useful to me:\n\nCreate your website with Quarto: complete tutorial and template link: https://www.marvinschmitt.com/blog/website-tutorial-quarto/.\nCreating your personal website with Quarto link: https://ucsb-meds.github.io/creating-quarto-websites/.\nCreating a website link: https://quarto.org/docs/websites/.\n\nEstablish an order: Once we have finished and published a first article, everything will be simpler in technical terms since you will discover that there are multiple reference sources available."
  },
  {
    "objectID": "blog/about-this-website/about-this-website.html#the-idea",
    "href": "blog/about-this-website/about-this-website.html#the-idea",
    "title": "Developing Beneath the surface",
    "section": "",
    "text": "The first thing that came to mind was “how can I develop a page that I can leave as a reference for those who want to contact me in a professional setting?” and “through what medium can I share those ideas, small works or personal experiences that I believe could be useful for other professionals in my field?”. Well, there are many options around (social media, podcasts, TikTok, etc.). This first decision was not difficult, as I am not particularly characterized by my charisma on social networks, so I decided to opt for writing a blog. However, here the decision-making process did get a bit complicated, as there are many platforms available: Wordpress, Netlify, Gitlab pages, Medium, among others. Each one offers different advantages and potential, but my decision was based above all on the familiarity of use of the Github and Quarto platforms. I decided on Github pages."
  },
  {
    "objectID": "blog/about-this-website/about-this-website.html#github-pages",
    "href": "blog/about-this-website/about-this-website.html#github-pages",
    "title": "Developing Beneath the surface",
    "section": "",
    "text": "Github Pages is a free static website hosting service that allows you to publish HTML content directly from a GitHub repository. This platform offers multiple advantages:\n\nIt’s free!: You don’t need to pay for a web hosting service, just have a (free) GitHub account.\nEasy to use: Uploading your HTML, CSS, and JavaScript files to GitHub is very simple.\nDirect integration with GitHub: This becomes VERY important if you already use GitHub (as was my case) for your code projects.\nVersioning: GitHub Pages keeps a history of all the changes you make to your website, so if something goes wrong you can always go back to a previous version of your repository (page).\nSecure: GitHub Pages uses HTTPS to protect your website.\nFast: For a few years now, Microsoft has bought GitHub and therefore its services use an extensive global network of servers to deliver your website to users around the world.\nScalable: GitHub Pages can handle any amount of traffic, so your website can grow smoothly. Although a personal/professional blog is not expected to have very high traffic peaks, it is always good to know that this support exists.\nSEO optimized: GitHub Pages is optimized for search engines, which will help your website appear in the results of major web search engines.\n\nIn the end, Github pages was the hosting option that I found most attractive. However, there are multiple ways to upload content, from different development platforms that involve the use of programming languages (e.g. Javascript) or markup, such as markdown or Quarto. Once again, my historical experience weighed more and I decided to use Quarto."
  },
  {
    "objectID": "blog/about-this-website/about-this-website.html#quarto",
    "href": "blog/about-this-website/about-this-website.html#quarto",
    "title": "Developing Beneath the surface",
    "section": "",
    "text": "Quarto is an open-source scientific document publishing platform developed by the POSIT (formerly RStudio) team. It is based on the R Markdown format and extends it with new features and functionalities to create richer and more interactive documents. It implements a more powerful preprocessing system than R Markdown and supports additional programming languages such as Python and Julia, expanding the possibilities for analysis and visualization.\nFor the past few years, I have been using Quarto not only for writing simple R reports, but also for the complete composition of scientific articles (one of them with a format submitted directly from the .docx output obtained in Quarto), as well as the development of interactive websites through the Quarto-Shiny duo."
  },
  {
    "objectID": "blog/about-this-website/about-this-website.html#the-content",
    "href": "blog/about-this-website/about-this-website.html#the-content",
    "title": "Developing Beneath the surface",
    "section": "",
    "text": "I Didn’t Have to Start from Scratch. Fortunately, there are many resources available online, but I will briefly summarize the main links I used:\n\nCreate the website hosted on Github pages, prepare it for content management with Quarto and to work from RStudio: The first steps to follow are very well explained in the video by Melissa Van Bussel (link). Highly recommended, although it assumes that we know how to handle Git-bash and that we have a token well configured for our PC. I will put these last details at the end of this article.\n\n\n\nEstablish an outline of what we are going to publish: Once we have successfully configured our website, it is time to take pen and paper and outline what content we want to share and what the logic will be for organizing that content into sections. While this part is very personal, since it will not be the same to diagram a page that only aims to serve as a professional reference (that is, an interactive resume) to that of a freelancer who wants to show their main projects and/or services offered, you don’t need to start from scratch either. You can review examples of pages from other creators (researchers, reporters, bloggers, graphic artists, etc.) and be inspired by their designs. Also, you can review examples of page structures that use Github pages (link). Remember, everything must ALWAYS start with the type of content you plan to place.\nStart writing: OK, this is not a scientific article and there is much more freedom to fill in the different sections; however, always remember to take into account the basic writing criteria (from general to specific), be clear and careful when choosing the type of language (based on the type of audience you expect to read you) and, once again, review examples. Of course, these days AI text generation platforms can be of great help, but we should not delegate the entire burden (i.e. no copy-paste) to them without first reading and corroborating the information they return to us. At this point, the following articles were very useful to me:\n\nCreate your website with Quarto: complete tutorial and template link: https://www.marvinschmitt.com/blog/website-tutorial-quarto/.\nCreating your personal website with Quarto link: https://ucsb-meds.github.io/creating-quarto-websites/.\nCreating a website link: https://quarto.org/docs/websites/.\n\nEstablish an order: Once we have finished and published a first article, everything will be simpler in technical terms since you will discover that there are multiple reference sources available."
  },
  {
    "objectID": "blog/about-this-website/about-this-website.html#la-idea",
    "href": "blog/about-this-website/about-this-website.html#la-idea",
    "title": "Developing Beneath the surface",
    "section": "La idea",
    "text": "La idea\nLo primero que llegó a mi mente fue «¿de qué manera puedo desarrollar una página en que pueda dejar como referencia para aquellos que quisieran contactar conmigo en un ambiente profesional?» y «¿desde qué medio puedo compartir aquellas ideas, pequeños trabajos o experiencias personales que creo que podrían resultar de utilidad para otros profesionales en mi rubro?». Bueno, existen muchas opciones alrededor (redes sociales, podcast, TikTok, etc.). Esta primera decisión no fue difícil, pues no me caracterizo particularmente por mi carisma en redes, así que decidí optar por escribir un blog. Sin embargo, aquí la toma de decisiones sí se complicó un poco, pues existen muchas plataformas disponibles: Wordpress, Netlify, Gitlab pages, Medium, entre others. Cada una plantea ventajas y potencialidades distintas, pero mi decisión se basó sobre todo en la familiaridad de uso de las plataformas Github y Quarto. Me decidí por Github pages."
  },
  {
    "objectID": "blog/about-this-website/about-this-website.html#github-pages-1",
    "href": "blog/about-this-website/about-this-website.html#github-pages-1",
    "title": "Developing Beneath the surface",
    "section": "Github pages",
    "text": "Github pages\nGithub pages es un servicio gratuito de alojamiento de sitios web estáticos que permite publicar contenido HTML directamente desde un repositorio de GitHub. Esta plataforma ofrece múltiples ventajas:\n\nGratuito: No necesitas pagar por un servicio de alojamiento web, solo tener una cuenta de GitHub (gratuita).\nFácil de usar: Subir tus archivos HTML, CSS y JavaScript a GitHub es muy sencillo.\nIntegración directa con GitHub: Esto se hace MUY importante si ya usas GitHub (como fue mi caso) para tus proyectos de código.\nVersionado: GitHub Pages guarda un historial de todos los cambios que realices en tu sitio web, por lo que si algo sale mal siempre puedes volver a una versión anterior de tu repositorio (página).\nSeguro: GitHub Pages utiliza HTTPS para proteger tu sitio web.\nRápido: Desde hace unos años, Microsoft compró GitHub y por tanto sus servicios utilizan una extensa red global de servidores para entregar tu sitio web a los usuarios de todo el mundo.\nEscalable: GitHub Pages puede manejar cualquier cantidad de tráfico, por lo que tu sitio web puede crecer sin problemas. Aunque de un blog personal/profesional no se espera tener picos de tráfico muy altos, siempre es bueno saber que existe este respaldo.\nOptimizado para SEO: GitHub Pages está optimizado para los motores de búsqueda, lo que ayudará a que nuestro sitio web aparezca en los resultados de los principales buscadores web.\n\nAl final, Github pages fue la opción de alojamiento que me resultó más atractiva. Sin embargo, existen múltiples maneras de subir contenido, desde diferentes plataformas de desarrollo que involucran el uso de lenguajes de programación (e.g. Javascript) o de marcado, como markdown o Quarto. Una vez más, mi experiencia histórica pesó más y me decanté por el uso de Quarto."
  },
  {
    "objectID": "blog/about-this-website/about-this-website.html#quarto-1",
    "href": "blog/about-this-website/about-this-website.html#quarto-1",
    "title": "Developing Beneath the surface",
    "section": "Quarto",
    "text": "Quarto\nQuarto es una plataforma de publicación de documentos científicos de código abierto desarrollada por el equipo de POSIT (ex RStudio). Se basa en el formato R Markdown y lo amplía con nuevas características y funcionalidades para crear documentos más ricos e interactivos. Implementa un sistema de preprocesamiento más potente que R Markdown y soporta lenguajes de programación adicionales como Python y Julia, ampliando las posibilidades de análisis y visualización.\nDesde hace unos pocos años, he venido utilizando Quarto no solo para la redacción de reportes sencillos en R, sino inclusive para la composición completa de artículos científicos (uno de ellos con formato sometido directamente desde la salida en .docx obtenida en Quarto), así como el desarrollo de webs interactivas a través de la dupla Quarto-Shiny."
  },
  {
    "objectID": "blog/about-this-website/about-this-website.html#el-contenido",
    "href": "blog/about-this-website/about-this-website.html#el-contenido",
    "title": "Developing Beneath the surface",
    "section": "El contenido",
    "text": "El contenido\nNo tuve que empezar desde cero. Afortunadamente, hay mucho material allá afuera, pero resumiré brevemente los principales links que utilicé:\n\nCrear la website alojada en Github pages, preparaela para el manejo de contenido con Quarto y para trabajar desde RStudio: Los primeros pasos a seguir están muy bien explicados en el vídeo de Melissa Van Bussel (link). Muy recomendable, aunque parte bajo el supuesto de que conocemos cómo manejar Git-bash y de que tenemos bien configurado un token para nuestra PC. Estos últimos detalles los colocaré al final de este artículo.\n\n\n\nEstablecer un esquema de lo que vamos a publicar. Una vez que hayamos logrado configurar correctamente nuestra web, sigue el turno de tomar lápiz y papel y esquematizar qué contenido deseamos compartir y cuál será la lógica para ordenar dicho contenido en secciones. Si bien esta parte es muy personal, ya que no será lo mismo diagramar una página que solo tiene como objetivo servir de referencia profesional (es decir, un CV interactivo) a la de un freelancer que desea mostrar sus principales proyectos y/o servicios ofrecidos, no necesitas ir desde cero tampoco. Puedes revisar ejemplos de páginas de otros creadores (investigadores, reporteros, bloggers, artistas gráficos, etc.) e inspirarte en sus diseños. Así también, puedes revisar ejemplos de estructuras de páginas que usan Github pages (link). Recuerda, todo debe partir SIEMPRE del tipo de contenido que planeas colocar.\nEmpezar a escribir. OK, esto no es un artículo científico y hay mucha más libertad para rellenar las distintas secciones; no obstante, recuerda siempre tener en cuenta los criterios básicos de redacción (de lo general a lo específico), ser claro y cuidadoso al elegir el tipo de lenguaje (con base en el tipo de público que esperas que te lea) y, una vez más, revisar ejemplos. Por supuesto, en estos días las plataformas de IA para generación de texto pueden resultar de gran ayuda, pero no debemos delegarles toda la carga (i.e. nada de copiar-pegar) sin antes leer corroborar la información que nos devuelven. En este punto, me fueron de mucha utilidad los siguientes artículos:\n\nCrear tu website con Quarto: tutorial completo y plantilla link.\nCreando tu website personal con Quarto link.\nCreando un website link.\n\nEstablecer un orden. Una vez que hayamos culminado y publicado un primer artículo, todo irá siendo más simple en términos técnicos ya que descubrirás que existen múltiples fuentes de referencia disponibles."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html",
    "href": "blog/quarto-template-article/quarto-template-article.html",
    "title": "Quarto template for a scientific article draft",
    "section": "",
    "text": "Image credits: Daria Glakteeva at Unplash"
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#pre-requisites",
    "href": "blog/quarto-template-article/quarto-template-article.html#pre-requisites",
    "title": "Quarto template for a scientific article draft",
    "section": "Pre-requisites",
    "text": "Pre-requisites\n\nReference template: https://github.com/LuisLauM/quarto-template-scientific-article/article-template.zip. There you will find the files needed to execute what is shown in this post, which may change as this post is updated.\nR, RStudio y Zotero: https://cran.r-project.org/ / https://posit.co/downloads/ / https://www.zotero.org/\nQuarto: In recent years, RStudio already includes a recent version of Quarto, but if you do not have the software or want to try versions other than the default, you can download them from https://quarto.org/docs/download/index.html.\nZotero-Quarto-RStudio integration: Citation management will make use of the tools explained in my previous post, so I recommend you to read and do what is explained there.\nSome experience in writing documents using Quarto (or R markdown). The best way to learn how to use Quarto is using it and find what you need to get what you need from online manuals (e.g. from Quarto), videos on YT or questions on several forums (e.g. Stackoverflow) and blogs.\n\n\n\n\n\n\n\nFiles and way of working\n\n\n\nAlthough each researcher has a different way of organizing the files of their projects, it is HIGHLY recommended to work each one within the same folder (where we have configured an RStudio project), where there are separate folders for raw data, preprocessed data, output data, figures, code, external documents (reports, permissions, etc.), presentations, among others. For our example, it will be assumed that we are working in the root directory of our project itself, but ideally we should have a subfolder in dedicated to contain only the files related to the article (or articles) coming out of a project. This will be quite useful later on when revisions start coming in and not end up with dozens of confusingly named files scattered around our directory."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#extensions-folder",
    "href": "blog/quarto-template-article/quarto-template-article.html#extensions-folder",
    "title": "Quarto template for a scientific article draft",
    "section": "_extensions folder",
    "text": "_extensions folder\nQuarto extensions are basically scripts that add additional functionality and are developed and supported by the community. Quarto has a standalone environment philosophy, so, unlike R, the installation of the extensions must be done local in each project where we are going to run our Quarto script. For the purposes of this post, we are going to use an extension called kapsner/authors-block, which is already included in the reference repository (inside the /_extensions folder), but it is always good to take a look at the original repository to see if they have incorporated any interesting improvements."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#bibliography.bib-file",
    "href": "blog/quarto-template-article/quarto-template-article.html#bibliography.bib-file",
    "title": "Quarto template for a scientific article draft",
    "section": "bibliography.bib file",
    "text": "bibliography.bib file\nThis file will contain the metadata of the bibliographic references that we will cite in our main file. It is not necessary to create it manually, that will be taken care of by the Zotero-rbbt tools, as detailed in our respective post."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#ices-journal-of-marine-science.csl-file",
    "href": "blog/quarto-template-article/quarto-template-article.html#ices-journal-of-marine-science.csl-file",
    "title": "Quarto template for a scientific article draft",
    "section": "ices-journal-of-marine-science.csl file",
    "text": "ices-journal-of-marine-science.csl file\nA CSL (Citation Style Language) file defines how citations and references should be formatted in a document, allowing bibliographic management programs (such as Zotero) to automate this process. These files are essential in writing scientific articles because they ensure that citations and references conform precisely to the style standards required by a journal or institution, such as APA, MLA or Vancouver. By using a CSL file, authors can easily switch between styles without having to manually rewrite their references, which saves time, reduces errors, and ensures consistency in citation formatting throughout the paper.\nUsually, each journal tells authors which style to follow when writing their citations, for which in many cases they share the respective .csl file; however, if we cannot find the correct file, there are repositories such as this one where hundreds of .csl files for different journals are stored and maintained. Look for the one that best fits the journal to which you will submit your manuscript."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#custom-reference-doc.docx-file",
    "href": "blog/quarto-template-article/quarto-template-article.html#custom-reference-doc.docx-file",
    "title": "Quarto template for a scientific article draft",
    "section": "custom-reference-doc.docx file",
    "text": "custom-reference-doc.docx file\nUsually, a manuscript file does not need to have an ornate or sophisticated format, but it is possible that some journals, our advisor or reviewers may request some formatting details in our MS Word output file. This is where Quarto makes use of a simple but powerful solution: the use of a reference file-format.\nThe custom-reference-doc.docx file is nothing more than a Word file that explicitly shows how each element will be displayed according to the style we have chosen. Anything we edit in this file will be used by Quarto to format our final document. To explain at length how to edit this file would take a whole post and right now there are many sources where this process is already explained, this post for example. What is important to keep in mind is that every change we make must be done at the level of MS Word’s Format and Style options. While it might seem very annoying to have to work in Word, the good news is that it is not something we will do continuously, but only a couple of times during our project (if someone requests some special formatting in our manuscript). Personally, the shared file has been enough for my advisors, the reviewers and editors of 2 different journals (ICES JMS and Fisheries Research of Elsevier)."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#the-main-file-article_v1.qmd",
    "href": "blog/quarto-template-article/quarto-template-article.html#the-main-file-article_v1.qmd",
    "title": "Quarto template for a scientific article draft",
    "section": "The main file: article_v1.qmd",
    "text": "The main file: article_v1.qmd\nThe initial part of the script of this template consists of a header (in YAML format) where the general options of our document will be shown:\n\ntitle, between double quotes \" \".\nauthors, where we will be able to include data such as names, surnames and affiliation (which is the most important information), as well as ORCID code, reference URL, etc.\naffiliations, this is where we will indicate an identifier (which we will use as a reference for the authors) and the full name of the affiliation, as we want it to appear in the document.\nfilters, where we will list the Quarto extensions that we want to be loaded at the beginning of the document (and that will be looked for in the /_extensions folder).\nlink-citations, where we can define (true/false) if we want the bibliographic citations in the final document to link to the corresponding reference in the final Bibliography section.\nbibliography, where we will indicate the file where our bibliographic references are in BibTeX format.\ncsl, where we indicate the file that Quarto will use to establish the citation format for bibliographic references.\nformat, where specific parameters of the output file will be specified. For this example, everything is set to get a MS Word file (.docx) that will use our custom-reference-doc.docx style reference file. The toc parameter (which refers to Table Of Contents) allows to display or not the table of contents at the beginning of the document. The numer-sections parameter allows to enable/disable the use of numbering in the sections of our manuscript.\n\n\nSetup chunk\nThe chunk shown at the beginning of the qmd file contains some parameters that should be set, so that you do not have to do it independently in each subsequent chunk. Hey, this is a SUGGESTED configuration, you can (and should) modify it as required by your project or the reviewers.\n\nknitr::opts_chunk$set(echo = FALSE, \n                      verbose = FALSE,\n                      message = FALSE, \n                      warning = FALSE,\n                      dev = \"ragg_png\",\n                      out.width = \"100%\", \n                      dpi = 1500)\n\n\necho = FALSE: Causes the executed code NOT to be displayed verbatim in the document.\nverbose = FALSE: Useful for suppressing detailed messages about progress, intermediate steps or partial results of code within chunks to keep outputs cleaner.\nmessage = FALSE/warning = FALSE: used to suppress warning messages or information that functions may generate during code execution, preventing them from appearing in the document output. This helps to keep the output cleaner and focused on the essential results.\ndev = \"ragg_png\": specifies that the graphics device used to generate the images is ragg, an efficient and modern engine that produces graphics in PNG format with high quality and performance.\nout.width = \"100%\": sets that the width of the generated images or graphics will occupy 100% of the width of the container (e.g., the page or column where it is displayed), automatically adjusting to the available size.\ndpi = 1500: sets the resolution of the images generated in the document, specifically in dots per inch. A value of 1500 dpi indicates a very high resolution, which results in sharper and more detailed images, but also heavier, so it will be the user’s responsibility to determine the optimum value as specified by each magazine.\n\n\n\nWriting in Quarto\nWhat follows is basically to write our manuscript as if it were just another report in Quarto, taking advantage of the power of chunks to recreate the analyses needed to generate each figure, table or value. Here it is important to recommend that each value that comes from an analysis of our information (i.e. that does not come directly from a bibliographic citation) should be generated from explicit code in our document.\nFor example, let us imagine that I am working with the mtcars table (from R) and I want to write the following text-result:\n\nThe car models Toyota Corolla and Fiat 128 were those with the highest miles per gallon value.\n\nThe text inside our qmd file should look like this:\nThe car models `r rownames(mtcars)[order(mtcars$mpg, decreasing = TRUE)[1:2]] |&gt; paste(collapse = \" and \")` were those with the highest miles per gallon value.\nAs you can see, within the paragraph itself I am running a chunk with a data sorting and extraction operation. While this may seem more cumbersome, it allows that if at some point we were to modify some pre-processing process of the initial data, the results will be generated automatically, without the need for us to do these small calculations again.\n\n\n\n\n\n\nImportant\n\n\n\nObviously, the texts related to the interpretation of the results should be reviewed whenever we know that we have made an important change in our initial data.\n\n\nThere are multiple websites (blogs and forums) where we can learn how to format our results or presentation. Some examples are:\n\nMarkdown Basics\nR Markdown: The Definitive Guide\nR markdown\nknitr\nBookdown\nHello Quarto\nQuarto Q&A. This site is particularly interesting because it is the Q&A section of the Quarto repository itself, so it is always good to take a look at its search engine and check if someone else had similar difficulties as us. We can also leave a ticket with our query if we don’t find a match."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#extra-file-letter_editor.rmd",
    "href": "blog/quarto-template-article/quarto-template-article.html#extra-file-letter_editor.rmd",
    "title": "Quarto template for a scientific article draft",
    "section": "Extra file: letter_editor.Rmd",
    "text": "Extra file: letter_editor.Rmd\nThe letter to the editor is a key component when submitting a scientific article to a journal, as it serves as a first presentation of the work to the editors and helps to highlight its relevance, originality and contribution to the field. Its usefulness lies in quickly capturing the editor’s attention by summarizing the objectives, main findings and importance of the study, which facilitates the initial evaluation of the manuscript. In addition, it allows the author to briefly explain why the article is appropriate for the journal in question, showing alignment with its focus and audience. A well-written letter can positively influence the editor’s decision to send the article for review, thus expediting the evaluation process.\nAlthough in this template I do not share an example of writing this letter (only the R markdown format), it is possible to find multiple related posts in various forums or blogs. The use of this file is quite intuitive, just fill in the fields and render the document. By the way, it requires the prior installation of the komaletter package."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#requerimientos",
    "href": "blog/quarto-template-article/quarto-template-article.html#requerimientos",
    "title": "Quarto template for a scientific article draft",
    "section": "Requerimientos",
    "text": "Requerimientos\n\nPlantilla de referencia: https://github.com/LuisLauM/quarto-template-scientific-article/article-template.zip. Ahí se encuentran los archivos necesarios para ejecutar lo mostrado en este post, los cuales podrán ir variando conforme este post se actualice.\nR, RStudio y Zotero: https://cran.r-project.org/ / https://posit.co/downloads/ / https://www.zotero.org/\nQuarto: En los últimos años, RStudio ya incluye una versión reciente de Quarto, pero si usted no cuenta con el software o desea probar versiones distintas a la que llega por defecto, puede descargarlas desde https://quarto.org/docs/download/index.html.\nIntegración Zotero-Quarto-RStudio: El manejo de citas se debe hacer a través de las herramientas explicadas en mi post anterior, así que les recomiendo leerlo previamente e implementar lo explicado ahí.\nExperiencia en la escritura de documentos usando Quarto (o R markdown). La mejor manera de aprender a usar Quarto es usándolo e ir hallando lo necesario para obtener lo que necesitamos a partir de manuales en línea (e.g. desde la propia web de Quarto), vídeos en YT o preguntas en diversos foros (e.g. Stackoverflow).\n\n\n\n\n\n\n\nArchivos, orden y modo de trabajo\n\n\n\nSi bien cada investigador tiene una manera distinta de organizar los archivos de sus proyectos, es MUY recomendable trabajar cada uno dentro de una misma carpeta (en donde tengamos configurado un proyecto de RStudio), en donde haya carpetas diferenciadas para los datos de entrada en bruto (raw), los preprocesados, los de salida, las figuras, el código, los documentos externos (informes, permisos, etc.), las presentaciones, entre otros. Para nuestro ejemplo, se asumirá que estamos trabajando en el propio directorio raíz de nuestro proyecto, pero idealmente deberíamos tener una subcarpeta en dedicada a contener únicamente los archivos relacionados al artículo (o artículos) que salen de un proyecto. Esto será bastante útil posteriormente, cuando empiecen a llegar las revisiones y no terminar con decenas de archivos con nombre confusos y desperdigados por nuestro directorio."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#carpeta-_extensions",
    "href": "blog/quarto-template-article/quarto-template-article.html#carpeta-_extensions",
    "title": "Quarto template for a scientific article draft",
    "section": "Carpeta _extensions",
    "text": "Carpeta _extensions\nLas extensiones de Quarto son básicamente scripts que añaden funcionalidades adicionales y que son desarrolladas y soportadas por la comunidad. Quarto maneja una filosofía de entornos independientes, por lo que, a diferencia de R, la instalación de las extensiones de hacerse de manera local en cada proyecto en que vayamos a ejecutar nuestro script de Quarto. Para efectos del presente post, vamos a utilizar una extensión llamada kapsner/authors-block, la cual ya viene incluidas en el repositorio de referencia (dentro de la carpeta /_extensions), pero siempre es bueno darse una vuelta por el repositorio original para saber si han incorporado alguna mejora interesante."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#archivo-bibliography.bib",
    "href": "blog/quarto-template-article/quarto-template-article.html#archivo-bibliography.bib",
    "title": "Quarto template for a scientific article draft",
    "section": "Archivo bibliography.bib",
    "text": "Archivo bibliography.bib\nEste archivo contendrá la metadata de las referencias bibliográficas que citaremos en nuestro archivo principal. No es necesario crearlo manualmente, de eso se encargará las herramientas de Zotero-rbbt, tal como se detalla en nuestro post respectivo."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#archivo-ices-journal-of-marine-science.csl",
    "href": "blog/quarto-template-article/quarto-template-article.html#archivo-ices-journal-of-marine-science.csl",
    "title": "Quarto template for a scientific article draft",
    "section": "Archivo ices-journal-of-marine-science.csl",
    "text": "Archivo ices-journal-of-marine-science.csl\nUn archivo CSL (Citation Style Language) define cómo se deben formatear las citas y las referencias en un documento, permitiendo que programas de gestión bibliográfica (como Zotero) automaticen este proceso. Estos archivos son fundamentales en la escritura de artículos científicos porque garantizan que las citas y referencias se adapten de manera precisa a las normas de estilo exigidas por una revista o institución, como APA, MLA o Vancouver. Al utilizar un archivo CSL, los autores pueden cambiar fácilmente entre estilos sin necesidad de reescribir manualmente sus referencias, lo que ahorra tiempo, reduce errores y asegura la consistencia en el formato de citación a lo largo del documento.\nUsualmente, cada revista indica a los autores qué estilo deben seguir al momento de redactar sus citas, para lo cual en muchos casos comparten el respectivo archivo .csl; sin embargo, si no logramos hallar el archivo correcto, existen repositorios como este en donde se almacenan y mantienen cientos de archivos .csl para diferentes revistas. Busca el que más se ajuste a la revista a la que someterás tu manuscrito."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#archivo-custom-reference-doc.docx",
    "href": "blog/quarto-template-article/quarto-template-article.html#archivo-custom-reference-doc.docx",
    "title": "Quarto template for a scientific article draft",
    "section": "Archivo custom-reference-doc.docx",
    "text": "Archivo custom-reference-doc.docx\nUsualmente, un archivo de manuscrito no requiere tener un formato ornamentado o sofisticado, pero es posible que algunas revistas, nuestro asesor o los revisores soliciten algunos detalles de formato en nuestro archivo de salida en MS Word. Aquí es donde Quarto hace uso de una solución sencilla, pero potente: el uso de un archivo-formato de referencia.\nEl archivo custom-reference-doc.docx no es más que un archivo en Word en donde se muestra de forma explícita la manera en cómo se mostrará cada elemento según el estilo que hayamos elegido. Cualquier cosa que editemos en ese archivo será utilizada por Quarto para darle formato a nuestro documento final. Explicar en extenso cómo editar este archivo tomaría un post entero y ahora mismo existen muchas fuentes en donde ya se explica este proceso, este post por ejemplo. Lo que sí es importante tener en cuenta es que cada cambio que hagamos debe hacerse a nivel de las opciones de Formato y Estilo de MS Word. Si bien podría parecer muy molesto tener que trabajar en Word, la buena noticia es que no es algo que haremos continuamente, sino solo un par de veces durante nuestro proyecto (si es que alguien solicita algún formato especial en nuestro manuscrito). En lo personal, con el archivo compartido ha sido suficiente para mis asesores, los revisores y editores de 2 revistas distintas (ICES JMS y Fisheries Research de Elsevier)."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#archivo-principal-article_v1.qmd",
    "href": "blog/quarto-template-article/quarto-template-article.html#archivo-principal-article_v1.qmd",
    "title": "Quarto template for a scientific article draft",
    "section": "Archivo principal article_v1.qmd",
    "text": "Archivo principal article_v1.qmd\nLa parte inicial del script de esta plantilla se compone un header (en formato YAML) en donde se mostrará las opciones generales de nuestro documento:\n\ntitle, entre comillas dobles \" \".\nauthors, en donde podremos incluir datos como nombres, apellidos y afiliación (que es la información más importante), así como código ORCID, URL de referencia, etc.\naffiliations, aquí es donde indicaremos un identificador (que usaremos como referencia para los autores) y el nombre (name) completo de la afiliación, tal como querramos que aparezca en el documento.\nfilters, en donde listaremos las Quarto extensions que deseamos que se carguen al inicio del documento (y que se buscarán en la carpeta /_extensions).\nlink-citations, en donde podremos definir (true/false) si deseamos que las citas bibliográficas en el documento final se enlacen a la referencia correspondiente en la sección final de Bibliografía.\nbibliography, en donde indicaremos el archivo en donde se hallan nuestras referencias bibliográficas en formato BibTeX.\ncsl, en donde indicaremos el archivo que utilizará Quarto para establecer el formato de citación de referencias bibliográficas.\nformat, en donde se indicará parámetros específicos del archivo de salida. Para este ejemplo, todo está configurado para obtener un archivo en MS Word (.docx) que utilizará nuestro archivo de referencia de estilo custom-reference-doc.docx. El parámetro toc (que hace referencia a Table Of Contents) permite mostrar o no la tabla de contenidos al inicio del documento. El parámetro numer-sections permite activar/desactivar el uso de numeración en las secciones de nuestro manuscrito.\n\n\nSetup chunk\nEl chunk que se muestra al inicio del archivo qmd contiene algunos parámetros que conviene fijar, para no tener que hacerlo independientemente en cada chunk posterior. Ojo, esta es una configuración SUGERIDA, usted podrá (y deberá) modificarla según lo requiera su proyecto o los revisores.\n\nknitr::opts_chunk$set(echo = FALSE, \n                      verbose = FALSE,\n                      message = FALSE, \n                      warning = FALSE,\n                      dev = \"ragg_png\",\n                      out.width = \"100%\", \n                      dpi = 1500)\n\n\necho = FALSE: Hace que el código ejecutado NO se muestre textualmente en el documento.\nverbose = FALSE: Útil para suprimir mensajes detallados sobre el progreso, los pasos intermedios o los resultados parciales del código dentro de los chunks y mantener salidas más limpias.\nmessage = FALSE/warning = FALSE: se utiliza para suprimir los mensajes de advertencia o información que las funciones pueden generar durante la ejecución del código, evitando que estos aparezcan en la salida del documento. Esto ayuda a mantener la salida más limpia y enfocada en los resultados esenciales.\ndev = \"ragg_png\": especifica que el dispositivo gráfico utilizado para generar las imágenes es ragg, un motor eficiente y moderno que produce gráficos en formato PNG con alta calidad y rendimiento.\nout.width = \"100%\": establece que el ancho de las imágenes o gráficos generados ocupará el 100% del ancho del contenedor (por ejemplo, la página o columna donde se muestra), ajustándose automáticamente al tamaño disponible.\ndpi = 1500: establece la resolución de las imágenes generadas en el documento, específicamente en puntos por pulgada (dots per inch). Un valor de 1500 dpi indica una resolución muy alta, lo que resulta en imágenes más nítidas y detalladas, pero también más pesadas, por lo que será responsabilidad del usuario determinar el valor óptimo junto a lo especificado por cada revista.\n\n\n\nRedactar en Quarto\nLo que sigue es básicamente redactar nuestro manuscrito somo si se tratara de un reporte más en Quarto, aprovechando el poder de los chunks para recrear los análisis necesarios para generar cada figura, tabla o valor. Aquí es importante recomendar que cada valor que provenga de un análisis de nuestra información (i.e. que no provenga diractamente de una cita bibliográfica) debe ser generado a partir de código explícito en nuestro documento.\nPor ejemplo, imaginemos que estoy trabajando con la tabla mtcars (de R) y deseo redactar el siguiente texto-resultado:\n\nLos modelos Toyota Corolla y Fiat 128 fueron aquellos con mayor valor de millas por galón.\n\nEl texto dentro de nuestro archivo qmd dbería lucir del siguiente modo:\nLos modelos `r rownames(mtcars)[order(mtcars$mpg, decreasing = TRUE)[1:2]] |&gt; paste(collapse = \" y \")` fueron los que mostraron los primeros según la variable de millas por galón.\nComo se observa, dentro del propio párrafo estoy ejecutando un chunk con una operación de ordenamiento y extracción de datos. Si bien esto puede parecer más engorroso, permite que si en algún momento tuviéramos que modificar algún proceso de preprocesamiento de los datos iniciales, los resultados se generarán automáticamente, sin necesidad de que tengamos que volver a hacer estos pequeños cálculos nuevamente.\n\n\n\n\n\n\nImportant\n\n\n\nEvidentemente, los textos relacionados a la interpretación de los resultados deben ser revisados cada vez que sepamos que hemos realizado un cambio importante en nuestros datos iniciales.\n\n\nExisten múltiples sitios web (blogs y foros) en donde podemos aprender a darle el formato que nuestros resultados o presentación requieren. Algunos ejemplos son:\n\nMarkdown Basics\nR Markdown: The Definitive Guide\nR markdown\nknitr\nBookdown\nHello Quarto\nQuarto Q&A. Este sitio es particularmente interesante porque se trata de la sección de Q&A del propio repositorio de Quarto, por lo que siempre es bueno darnos una vuelta por su buscador y revisar si alguien más tuvo similares dificultades que nosotros. Así mismo, podemos dejar un ticket con nuestra consulta si es que no encontramos coincidencias."
  },
  {
    "objectID": "blog/quarto-template-article/quarto-template-article.html#archivo-adicional-letter_editor.rmd",
    "href": "blog/quarto-template-article/quarto-template-article.html#archivo-adicional-letter_editor.rmd",
    "title": "Quarto template for a scientific article draft",
    "section": "Archivo adicional letter_editor.Rmd",
    "text": "Archivo adicional letter_editor.Rmd\nLa carta al editor es un componente clave al someter un artículo científico a una revista, ya que sirve como una primera presentación del trabajo a los editores y ayuda a destacar su relevancia, originalidad y contribución al campo. Su utilidad radica en captar rápidamente la atención del editor al resumir los objetivos, los principales hallazgos y la importancia del estudio, lo que facilita la evaluación inicial del manuscrito. Además, permite al autor explicar brevemente por qué el artículo es adecuado para la revista en cuestión, mostrando alineación con su enfoque y audiencia. Una carta bien redactada puede influir positivamente en la decisión del editor de enviar el artículo a revisión, agilizando así el proceso de evaluación.\nSi bien en esta plantilla no comparto un ejemplo de redacción de esta carta (solo el formato en R markdown), es posible hallar múltiples post relacionados en diversos foros o blogs. El uso de este archivo es bastante intuitivo, solo basta con rellenar los campos y renderizar el documento. Por cierto, se requiere la instalación previa del paquete komaletter."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Wencheng Lau-Medrano",
    "section": "",
    "text": "Note\n\n\n\nOne surface, dos idiomas.\nHere you will find content in two languages: English (EN) and Spanish (ES). Each piece of content will be available in both languages.\nEn esta página encontrarás contenido en dos idiomas: inglés (EN) y español (ES). Cada sección estará disponible en ambos idiomas.\n\n\n\n[EN] Beneath the surface 🌊\nHi there! I’m (Luis) Wencheng Lau-Medrano, a passionate enthusiast of technology, marine biology, data analysis, Legos, and travel. Here I will share some of what I know, have learned, and experienced in those fields. You will find everything from practical tips to improve your programming and data analysis skills to recommendations for tourist destinations and guides for administrative procedures. Thank you for being a part of this journey of learning and discovery.\nBelow are my main networks and ways to contact me. Feel free to send me a message about any of the contents.\nImage credits: Dan Grinwis at Unplash\n\n\n[ES] Bajo la superficie 🌊\n¡Hola, qué tal! Soy (Luis) Wencheng Lau-Medrano, un apasionado de la tecnología, la biología marina, el análisis de datos, los Legos y los viajes. Aquí compartiré un poco de lo que sé, aprendí y experimenté en esos campos. Encontrarás desde consejos prácticos para mejorar tus habilidades en programación y análisis de datos, hasta recomendaciones de destinos turísticos y guías para realizar trámites administrativos. Gracias por ser ahora parte de ese viaje de aprendizaje y descubrimiento.\nAbajo están mis principales redes y formas de contacto. No dudes en enviarme un mensaje acerca de cualquiera de los contenidos.\nCréditos de la imagen: Dan Grinwis en Unplash"
  }
]