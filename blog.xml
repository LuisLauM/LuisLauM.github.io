<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Beneath the surface üåä</title>
<link>https://luislaum.github.io/home/blog.html</link>
<atom:link href="https://luislaum.github.io/home/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://luislaum.github.io/home/blog-photo.jpg</url>
<title>Beneath the surface üåä</title>
<link>https://luislaum.github.io/home/blog.html</link>
</image>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Fri, 25 Oct 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Running an R script into marbec-gpu</title>
  <link>https://luislaum.github.io/home/blog/marbec-gpu-run-process/marbec-gpu-run-process.html</link>
  <description><![CDATA[ 

<p>Image credits: –ê–Ω–¥—Ä–µ–π –°–∏–∑–æ–≤ at <a href="https://unsplash.com/photos/a-book-with-a-diagram-on-it-nuz3rK5iiKg?utm_content=creditShareLink&amp;utm_medium=referral&amp;utm_source=unsplash">Unplash</a></p>
<section id="en-lets-working-with-marbec-gpu" class="level1">
<h1>[EN] Let‚Äôs working with <code>marbec-gpu</code></h1>
<section id="lets-tidy-up-a-bit" class="level2">
<h2 data-anchor-id="lets-tidy-up-a-bit">Let‚Äôs tidy up a bit</h2>
<section id="creating-a-working-directory" class="level3">
<h3 data-anchor-id="creating-a-working-directory">Creating a working directory</h3>
<p>As when working with RStudio locally (i.e.&nbsp;on our PC), it is recommended to clearly define our working directory. This is extremely important because any process we run (either from RStudio or Terminal) will use that directory as a reference to find input files, output files or even other scripts.</p>
<p>For our case, we have created a folder called <strong>mgpu-examples/</strong> where there is a subfolder called <strong>code/</strong>. The creation of folders in <code>marbec-data</code> can be done directly from the web interface (by clicking on <em>File station</em> and then using the <em>Create folder</em> button), the command <code>mkdir</code>, but we can also copy-paste the elements already existing in our PC into the working folder.</p>
</section>
<section id="creating-an-rstudio-project" class="level3">
<h3 data-anchor-id="creating-an-rstudio-project">Creating an RStudio project</h3>
<p>The following is NOT mandatory, but very useful, especially when working with RStudio and that is to create an RStudio project. To do this, we will go to <em>File</em> and then <em>New Project</em>.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-334464964.png" class="img-fluid"></p>
<p>Then, in the window that appears, click on <em>Existing directory</em>, then on <em>Browse</em> and click on the folder that we have defined as our working directory (in our case, <em>mgpu-examples/</em>). Then, <em>OK</em> and finally click on the <em>Create Project</em> button. Rstudio will flicker a little bit and then will show us the same window, but inside the set project. The easiest way to check that the project has been created in the correct folder (<em>mgpu-examples/</em> in our case) is to verify that right in the Console panel, to the right of the R version, appears only the path of our main folder (and not any of the subfolders, e.g.&nbsp;<em>mgpu-examples/code/</em> or <em>mgpu-examples/inputs/</em>).</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546063.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-caution callout-titled" title="Just before to say `hello`">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Just before to say <code>hello</code>
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>marbec-gpu</code> incorporates the possibility of working with RStudio (Server); however, this interface should be used ONLY to PREPARE our scripts before being executed using all the power of our server. In other words, within the RStudio environment we will be able to load not so big files and perform basic operations, but at no time should we execute a complex (heavy) process from there, but from <strong>Terminal</strong>.</p>
</div>
</div>
</section>
</section>
<section id="hello-world-simple-examples" class="level2">
<h2 data-anchor-id="hello-world-simple-examples"><code>Hello world!</code> (simple examples)</h2>
<section id="example-1-1" class="level3">
<h3 data-anchor-id="example-1-1">Example 1-1</h3>
<p>We will start with the simplest: create a script in R and print the (very famous) ‚ÄúHello world!‚Äù message.</p>
<ul>
<li><p>We will start by opening an RStudio session from the JupyterLab environment (if you want to know how to get there, check the <a href="https://luislaum.github.io/blog/marbec-data-gpu-intro/marbec-data-gpu-intro.html">post</a> of Introduction to <code>marbec-gpu</code>).</p></li>
<li><p>Once inside the RStudio environment, we will create a new script (<em>File -&gt; New file -&gt; R script</em>) which will contain a single line:</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello world and hello marbec-gpu!"</span>)</span></code></pre></div>
</div>
<ul>
<li><p>Then, we will save that script with the name <em>code/ex1-1.R</em> (<em>code/</em> refers to a subfolder created previously inside the <em>working directory</em> of our project in RStudio).</p></li>
<li><p>Now comes the interesting part, inside our browser, we must go back to the Launcher tab and open a <strong>Terminal</strong> window (clicking on the corresponding icon).</p></li>
<li><p>By default, Terminal will open a session in the local folder assigned to our user. From there, we must get to the folder we have set as <em>working directory</em>; that is, the folder that our script will recognize as working directory (whether we have decided to use RStudio or not to create it or create a project inside it). Assuming that our working directory is the <code>mgpu-examples/</code> folder, we must reach it using the <code>cd</code> command:</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> mgpu-examples/</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="How do we know that we have arrived at the correct folder?">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
How do we know that we have arrived at the correct folder?
</div>
</div>
<div class="callout-body-container callout-body">
<p>First, the prompt will indicate the name of the folder in which it is located.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546064.png" class="img-fluid"></p>
<p>In addition, we can run the <code>ls</code> command which will show the subfolders and files inside the folder we have reached. If everything matches, then we did well.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546065.png" class="img-fluid"></p>
</div>
</div>
<ul>
<li>Next, we execute the following command in the Terminal: <code>Rscript code/ex1-1.R</code> and the result should be just what would be shown in a usual R session.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546066.png" class="img-fluid"></p>
</section>
<section id="example-1-2" class="level3">
<h3 data-anchor-id="example-1-2">Example 1-2</h3>
<p>In this next example, we will show a script that generates and saves files in our <em>working directory</em> where previously, we will create two new folders (<strong>figures/</strong> and <strong>outputs/</strong>) through the <code>mkdir</code> command as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> figures/ outputs/</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Within the Terminal environment, it is not possible to observe graphics interactively (as in RStudio), so if you want to keep any figure, you must always include the code to save it within the script you execute. Depending on the graphical environment, we can use functions such as <code>png</code>, <code>bmp</code>, <code>jpeg</code>, <code>pdf</code> (for <strong>graphics</strong> environment), or <code>ggsave</code> (for <strong>ggplot2</strong> environment).</p>
</div>
</div>
<ul>
<li>Now, let‚Äôs go to RStudio to create the following script and save it in <strong>code/ex1-2.R</strong>:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print mtcars</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(mtcars)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export mtcars as a csv</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mtcars, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outputs/mtcars.csv"</span>)</span>
<span id="cb4-6"> </span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and save a scatterplot</span></span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">png</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figures/fig_1-1.png"</span>)</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>disp, </span>
<span id="cb4-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miles per (US) gallon"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Displacement (cu.in.)"</span>)</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev.off</span>()</span></code></pre></div>
</div>
<ul>
<li>Next, we go back to the Terminal environment and run our new script with the command <code>Rscript code/ex1-2.R</code>. Immediately, the <code>mtcars</code> table will be displayed as that is what the first line of our script commands.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546067.png" class="img-fluid"></p>
<ul>
<li>However, if we run the <code>ls</code> command in Terminal for the <em>figures/</em> and <em>outputs/</em> folders, we will see that the two files we ordered to be created inside our script appear.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546068.png" class="img-fluid"></p>
<ul>
<li>If the files created are the ones we expect to collect from our analysis, we can download them through Filezilla (see the corresponding <a href="https://luislaum.github.io/blog/marbec-data-manage-files/marbec-data-manage-files.html">post</a>).</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled" title="Previewing figures">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Previewing figures
</div>
</div>
<div class="callout-body-container callout-body">
<p>While it is not possible to preview figures in Terminal or JupyterLab because they do not have an image viewer, it is possible to do so from the <code>marbec-data</code> web environment. However, this is a basic viewer and only available for the most common file types.</p>
</div>
</div>
</section>
</section>
<section id="hello-universe-parallel-process" class="level2">
<h2 data-anchor-id="hello-universe-parallel-process"><code>Hello universe!</code> (parallel process)</h2>
<section id="example-2-1-a-loop-in-a-single-core" class="level3">
<h3 data-anchor-id="example-2-1-a-loop-in-a-single-core">Example 2-1: A loop in a single core</h3>
<ul>
<li>We will start by creating a script (which we will save as <em>code/ex2-1.R</em>) containing a simple loop that generates 20 100x100 arrays with random values and saves them in separate csv files inside the <em>outputs/ex2-rndmats/</em> folder (remember to create that folder beforehand using <code>mkdir</code>):</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting number of rows and columns</span></span>
<span id="cb5-2">row_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb5-3">col_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)){</span>
<span id="cb5-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create random matrix</span></span>
<span id="cb5-7">  rndMat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> row_n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>col_n), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> row_n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> col_n)</span>
<span id="cb5-8">  </span>
<span id="cb5-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save matrix</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> rndMat, </span>
<span id="cb5-11">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outputs/ex2-rndmats/mat_%02d.csv"</span>, i), </span>
<span id="cb5-12">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb5-13">  </span>
<span id="cb5-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print a message at the end of each step</span></span>
<span id="cb5-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Matrix %02d finished!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, i))</span>
<span id="cb5-16">}</span></code></pre></div>
</div>
<ul>
<li>Now, we will run our script in Terminal (with the command <code>Rscript code/ex2-1.R</code>) and we will observe that everything went well if the messages at the end of each step of the loop are displayed correctly and also if when we run the command <code>ls</code> on the target folder we see the files created:</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546069.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Run a small example first">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Run a small example first
</div>
</div>
<div class="callout-body-container callout-body">
<p>Being already in a real execution, it is highly recommended always to try with a small example that allows us to corroborate that our script goes well BEFORE to pull out all the stops trying to execute the heavy process. In addition, if our script returns figures or files, executing a small corroboration script allows us to quickly check if the generated files are consistent with what we expect to obtain.</p>
</div>
</div>
</section>
<section id="example-2-2-a-loop-on-multiple-cores" class="level3">
<h3 data-anchor-id="example-2-2-a-loop-on-multiple-cores">Example 2-2: A loop on multiple cores</h3>
<ul>
<li>Starting from the previous example, we will convert our script into one that executes the processes in parallel. For this we will take advantage of the tools of the packages <a href="https://cran.r-project.org/package=foreach">foreach</a> and <a href="https://cran.r-project.org/package=doParallel">doParallel</a>. Note that the names of the files of this script will begin with the letters <code>mc_</code> to be able to recognize them with respect to those obtained in the previous example:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting number of rows and columns</span></span>
<span id="cb6-2">row_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb6-3">col_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(foreach)</span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(doParallel)</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Registering cluster</span></span>
<span id="cb6-9">cl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeCluster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">spec =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb6-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registerDoParallel</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cl =</span> cl)</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run multithread process</span></span>
<span id="cb6-13">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.inorder =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%dopar%</span> {</span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create random matrix</span></span>
<span id="cb6-15">  rndMat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> row_n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>col_n), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> row_n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> col_n)</span>
<span id="cb6-16">  </span>
<span id="cb6-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save matrix</span></span>
<span id="cb6-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> rndMat, </span>
<span id="cb6-19">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outputs/ex2-rndmats/mc_mat_%02d.csv"</span>, i), </span>
<span id="cb6-20">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb6-21">  </span>
<span id="cb6-22">  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb6-23">}</span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Finish cluster</span></span>
<span id="cb6-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopCluster</span>(cl)</span></code></pre></div>
</div>
<ul>
<li>Now, we will run our script in Terminal (with the command <code>Rscript code/ex2-2.R</code>) and we will observe that everything has gone well if when executing the command <code>ls</code> on the target folder we see the created files:</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546070.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>A couple of things:</p>
<ul>
<li><p>In the script of the second example, <code>foreach</code> is assigned to an object (<code>out</code>) which will receive the last object generated within each step of the loop. If you only want to get files to be exported (figures, tables, NetCDF, etc.), be sure to leave a <code>NULL</code> in the last line of the loop. On the other hand, if you want to get an object and it is placed in that position, <code>foreach</code> will compile it using the <code>list</code> function, i.e.&nbsp;the final object (<code>out</code>) will be a <code>list</code> that will have as many levels as there are steps in the loop. Also, it is important to note that internally <code>foreach</code> runs a separate small R session so it is necessary to indicate the additional packages required through the <code>.packages</code> argument (see the following example).</p></li>
<li><p>The argument <code>spec = 20</code> inside <code>makeCluster</code> refers to the amount of threads that will be used to execute the loop. Remember that one of the options when creating your server in <code>marbec-gpu</code> was to choose the amount of CPUs (2, 4, 8, 16, 32‚Ä¶)? Well, it is precisely with this argument where you will indicate that amount of logical cores. Remember that another important aspect is the RAM. At a given time each process running within each thread will have to load everything that a single simple process would need. In other words, if in a single core process, in each step of our loop we have to load 5 NetCDF files that occupy 5 GB in RAM, if we run that process in multicore and we define <code>spec = 40</code>, at a given moment we will have to load 5GBx40 (200 GB) in RAM simultaneously. So not only you must choose well the configuration of your server (regarding the script you plan to run), but also an approximate of what is consumed in each independent process, in order not to saturate your server. <code>marbec-gpu</code> is great, but it has its limits.</p></li>
</ul>
</div>
</div>
</section>
</section>
</section>
<section id="es-empezando-a-trabajar-con-marbec-gpu" class="level1">
<h1>[ES] Empezando a trabajar con <code>marbec-gpu</code></h1>
<section id="un-poco-de-orden" class="level2">
<h2 data-anchor-id="un-poco-de-orden">Un poco de orden</h2>
<section id="creando-un-directorio-de-trabajo" class="level3">
<h3 data-anchor-id="creando-un-directorio-de-trabajo">Creando un directorio de trabajo</h3>
<p>Al igual que cuando se trabaja con RStudio de manera local (i.e.&nbsp;en nuestra PC), se recomienda definiendo claramente nuestro directorio de trabajo. Esto es sumamente importante porque cualquier proceso que ejecutemos (ya sea desde RStudio o Terminal) utilizar√° ese directorio como referencia para hallar los archivos de entrada, salida o incluso otros scripts.</p>
<p>Para nuestro caso, hemos creado una carpeta llamada <strong>mgpu-examples/</strong> en donde a su vez existen las subcarpetas <strong>code/</strong>, <strong>inputs/</strong>, <strong>outputs/</strong> y <strong>figures/</strong>. La creaci√≥n de carpetas en <code>marbec-data</code> puede hacerse directamente desde la interfaz web (dando click a <em>File station</em> y luego usando el bot√≥n <em>Create folder</em>), pero tambi√©n podemos copiar-pegar los elementos ya existentes en nuestra PC hacia la carpeta de trabajo.</p>
</section>
<section id="creando-un-proyecto-de-rstudio" class="level3">
<h3 data-anchor-id="creando-un-proyecto-de-rstudio">Creando un proyecto de RStudio</h3>
<p>Lo siguiente NO es obligatorio, pero s√≠ muy √∫til, sobre todo cuando se trabaja con RStudio y es crear un proyecto de RStudio. Para ello, iremos a <em>File</em> y luego a <em>New Project</em>.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-334464964.png" class="img-fluid"></p>
<p>Luego, en la ventana que nos aparece, daremos click a <em>Existing directory</em>, luego a <em>Browse</em> y daremos click a la carpeta que hemos definido como nuestro directorio de trabajo (en nuestro caso, <em>mgpu-examples/</em>). Luego, <em>Aceptar</em> y finalmente en el bot√≥n <em>Create Project</em>. Rstudio parpadear√° un poco y luego nos mostrar√° la misma ventana, pero dentro del proyecto establecido. La manera m√°s sencilla de comprobar que el proyecto se ha creado en la carpeta correcta (<em>mgpu-examples/</em> en nuestro caso) es verificando que justo en el panel de Console, a la derecha de la versi√≥n de R, aparezca √∫nicamente la ruta de nuestra carpeta principal (y no alguna de las subcarpetas, e.g.&nbsp;<em>mgpu-examples/code/</em> o <em>mgpu-examples/inputs/</em>).</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546063.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-caution callout-titled" title="Antes de decir `hello`">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Antes de decir <code>hello</code>
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>marbec-gpu</code> incorpora la posibilidad de trabajar con RStudio (Server); sin embargo, esta interfaz deber√° utilizarse √öNICAMENTE para PREPARAR nuestros scripts antes de ser ejecutados utilizando toda la potencia de nuestro server. En otras palabras, dentro del entorno de RStudio podremos cargar archivos no tan grandes y realizar operaciones b√°sicas, pero en ning√∫n momento debemos ejecutar un proceso complejo (pesado) desde ah√≠, sino desde <strong>Terminal</strong>.</p>
</div>
</div>
</section>
</section>
<section id="hello-world-ejemplos-sencillos" class="level2">
<h2 data-anchor-id="hello-world-ejemplos-sencillos"><code>Hello world!</code> (ejemplos sencillos)</h2>
<section id="ejemplo-1-1" class="level3">
<h3 data-anchor-id="ejemplo-1-1">Ejemplo 1-1</h3>
<p>Iniciaremos con lo m√°s sencillo: crear un script en R e imprimir el (famos√≠simo) mensaje ‚ÄúHello world!‚Äù.</p>
<ul>
<li><p>Empezaremos abriendo una sesi√≥n de RStudio a partir del entorno JupyterLab (si desseas conocer c√≥mo llegar hasta ah√≠, revisa el <a href="https://luislaum.github.io/blog/marbec-data-gpu-intro/marbec-data-gpu-intro.html">post</a> de Introducci√≥n a <code>marbec-gpu</code>).</p></li>
<li><p>Una vez dentro del entorno RStudio, crearemos un nuevo script (<em>File -&gt; New file -&gt; R script</em>) el cual contendr√° una √∫nica l√≠nea:</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello world and hello marbec-gpu!"</span>)</span></code></pre></div>
</div>
<ul>
<li><p>Luego, guardaremos ese script con el nombre <em>code/ex1-1.R</em> (<em>code/</em> hace referencia a una subcarpeta creada anteriormente dentro del <em>working directory</em> de nuestro proyecto en RStudio).</p></li>
<li><p>Ahora viene lo interesante, dentro de nuestro navegador, debemos volver a la pesta√±a de Launcher y abrir una ventana de <strong>Terminal</strong> (dando click al √≠cono correspondiente).</p></li>
<li><p>Por defecto, Terminal abrir√° una sesi√≥n en la carpeta local asignada a nuestro usuario. Desde ah√≠, debemos llegar a la carpeta que hemos establecido como <em>working directory</em>; es decir, la carpeta que nuestro script reconocer√° como directorio de trabajo (ya sea que hayamos decidido usar RStudio o no para crearla o crear un proyecto dentro de ella). Asumiendo que nuestro working directory es la carpeta <code>mgpu-examples/</code>, debemos llegar a ella utilizando el comando <code>cd</code>:</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> mgpu-examples/</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="¬øc√≥mo saber que hemos llegado a la carpeta correcta?">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
¬øc√≥mo saber que hemos llegado a la carpeta correcta?
</div>
</div>
<div class="callout-body-container callout-body">
<p>En primer lugar, el prompt indicar√° el nombre de la carpeta en la que se encuentra.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546064.png" class="img-fluid"></p>
<p>Adem√°s, podemos ejecutar el comando <code>ls</code> con el que se mostrar√° las subcarpetas y archivos dentro de la carpeta a donde hemos llegado. Si todo coincide, pues lo hicimos bien.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546065.png" class="img-fluid"></p>
</div>
</div>
<ul>
<li>A continuaci√≥n, ejecutaremos en la Terminal la siguiente orden: <code>Rscript code/ex1-1.R</code> y el resultado deber√° ser que justo lo que se nos mostrar√≠a en una sesi√≥n habitual de R.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546066.png" class="img-fluid"></p>
</section>
<section id="ejemplo-1-2" class="level3">
<h3 data-anchor-id="ejemplo-1-2">Ejemplo 1-2</h3>
<p>En este siguiente ejemplo, mostraremos un script que genera y guarda archivos en nuestro <em>working directory</em> en donde previamente, crearemos dos carpetas nuevas (<strong>figures/</strong> y <strong>outputs/</strong>) a trav√©s del comando <code>mkdir</code> del siguiente modo:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> figures/ outputs/</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Dentro del entorno de Terminal, no es posible observar gr√°ficos de forma interactiva (como en RStudio), por lo que si se desea conservar cualquier figura, se deber√° incluir siempre el c√≥digo para guardarla dentro del script que ejecutemos. Dependiendo del entorno gr√°fico, podemos usar funciones como <code>png</code>, <code>bmp</code>, <code>jpeg</code>, <code>pdf</code> (para entorno <strong>graphics</strong>), o <code>ggsave</code> (para entorno <strong>ggplot2</strong>).</p>
</div>
</div>
<ul>
<li>Ahora, vamos a RStudio para crear el siguiente script y a guardarlo en <strong>code/ex1-2.R</strong>:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print mtcars</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(mtcars)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export mtcars as a csv</span></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mtcars, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outputs/mtcars.csv"</span>)</span>
<span id="cb10-6"> </span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and save a scatterplot</span></span>
<span id="cb10-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">png</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figures/fig_1-1.png"</span>)</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>disp, </span>
<span id="cb10-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miles per (US) gallon"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Displacement (cu.in.)"</span>)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev.off</span>()</span></code></pre></div>
</div>
<ul>
<li>Seguidamente, volvemos al entorno de Terminal y ejecutaremos nuestro nuevo script con el comando <code>Rscript code/ex1-2.R</code>. Inmediatamente, se mostrar√° la tabla de <code>mtcars</code> ya que eso es lo que ordena la primera l√≠nea de nuestro script.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546067.png" class="img-fluid"></p>
<ul>
<li>Sin embargo, si ejecutamos en Terminal el comando <code>ls</code> para las carpetas <em>figures/</em> y <em>outputs/</em>, veremos que aparecen los dos archivos que ordenamos crear dentro de nuestro script.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546068.png" class="img-fluid"></p>
<ul>
<li>Si los archivos creados son los que esperamos recolectar de nuestro an√°lisis, podemos descargarlos a trav√©s de Filezilla (ver el <a href="https://luislaum.github.io/blog/marbec-data-manage-files/marbec-data-manage-files.html">post</a> correspondiente).</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled" title="Previsualizar figuras">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Previsualizar figuras
</div>
</div>
<div class="callout-body-container callout-body">
<p>Si bien no es posible obtener una previsualizaci√≥n de figuras en Terminal o JupyterLab ya que estos no cuentan con un visor de im√°genes, s√≠ es posible hacerlo desde el entorno web de <code>marbec-data</code>. No obstante, se trata de un visor b√°sico y solo disponible para los tipos de archivos m√°s comunes.</p>
</div>
</div>
</section>
</section>
<section id="hello-universe-procesos-en-paralelo" class="level2">
<h2 data-anchor-id="hello-universe-procesos-en-paralelo"><code>Hello universe!</code> (procesos en paralelo)</h2>
<section id="ejemplo-2-1-un-bucle-en-un-solo-n√∫cleo" class="level3">
<h3 data-anchor-id="ejemplo-2-1-un-bucle-en-un-solo-n√∫cleo">Ejemplo 2-1: Un bucle en un solo n√∫cleo</h3>
<ul>
<li>Empezaremos creando un script (que guardaremos como <em>code/ex2-1.R</em>) que contenga un bucle sencillo que genere 20 matrices de 100x100 con valores aleatorios y las guarde en archivos csv distintos dentro de la carpeta <em>outputs/ex2-rndmats/</em> (recuerda que debes crear previamente esa carpeta usando <code>mkdir</code>):</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting number of rows and columns</span></span>
<span id="cb11-2">row_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb11-3">col_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)){</span>
<span id="cb11-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create random matrix</span></span>
<span id="cb11-7">  rndMat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> row_n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>col_n), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> row_n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> col_n)</span>
<span id="cb11-8">  </span>
<span id="cb11-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save matrix</span></span>
<span id="cb11-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> rndMat, </span>
<span id="cb11-11">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outputs/ex2-rndmats/mat_%02d.csv"</span>, i), </span>
<span id="cb11-12">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb11-13">  </span>
<span id="cb11-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print a message at the end of each step</span></span>
<span id="cb11-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Matrix %02d finished!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, i))</span>
<span id="cb11-16">}</span></code></pre></div>
</div>
<ul>
<li>Ahora, ejecutaremos nuestro script en Terminal (con el comando <code>Rscript code/ex2-1.R</code>) y observaremos que todo ha ido bien si los mensajes al final de cada paso del bucle se muestran correctamente y si adem√°s al ejecutar el comando <code>ls</code> sobre la carpeta objetivo vemos los archivos creados:</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546069.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Siempre correr un ejemplo peque√±o primero">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Siempre correr un ejemplo peque√±o primero
</div>
</div>
<div class="callout-body-container callout-body">
<p>Ya en una ejecuci√≥n real, lo recomendable es siempre intentar con un ejemplo peque√±o que nos permita corroborar que nuestro script va bien ANTES de poner toda la carne en el asador tratando de ejecutar el proceso pesado. Adem√°s, si nuestro script devuelve figuras o archivos, ejecutar un script peque√±o de corroboraci√≥n nos permite revisar r√°pidamente si los archivos generados con coherentes con lo que esperamos obtener.</p>
</div>
</div>
</section>
<section id="ejemplo-2-2-un-bucle-en-m√∫ltiples-n√∫cleos" class="level3">
<h3 data-anchor-id="ejemplo-2-2-un-bucle-en-m√∫ltiples-n√∫cleos">Ejemplo 2-2: Un bucle en m√∫ltiples n√∫cleos</h3>
<ul>
<li>Partiendo del ejemplo anterior, convertiremos nuestro script en uno que ejecute los procesos de forma paralela. Para ello aprovecharemos las herramientas de los paquetes <a href="https://cran.r-project.org/package=foreach">foreach</a> y <a href="https://cran.r-project.org/package=doParallel">doParallel</a>. N√≥tese que los nombres de los archivos de este script empezar√°n con las letras <code>mc_</code> para poder reconocerlos respecto a los obtenidos en el ejemplo anterior:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting number of rows and columns</span></span>
<span id="cb12-2">row_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb12-3">col_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(foreach)</span>
<span id="cb12-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(doParallel)</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Registering cluster</span></span>
<span id="cb12-9">cl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeCluster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">spec =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb12-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registerDoParallel</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cl =</span> cl)</span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run multithread process</span></span>
<span id="cb12-13">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.inorder =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%dopar%</span> {</span>
<span id="cb12-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create random matrix</span></span>
<span id="cb12-15">  rndMat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> row_n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>col_n), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> row_n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> col_n)</span>
<span id="cb12-16">  </span>
<span id="cb12-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save matrix</span></span>
<span id="cb12-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> rndMat, </span>
<span id="cb12-19">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outputs/ex2-rndmats/mc_mat_%02d.csv"</span>, i), </span>
<span id="cb12-20">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb12-21">  </span>
<span id="cb12-22">  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb12-23">}</span>
<span id="cb12-24"></span>
<span id="cb12-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Finish cluster</span></span>
<span id="cb12-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopCluster</span>(cl)</span></code></pre></div>
</div>
<ul>
<li>Ahora, ejecutaremos nuestro script en Terminal (con el comando <code>Rscript code/ex2-2.R</code>) y observaremos que todo ha ido bien si al ejecutar el comando <code>ls</code> sobre la carpeta objetivo vemos los archivos creados:</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/marbec-gpu-run-process/images/clipboard-3123546070.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Es importante notar un par de cosas:</p>
<ul>
<li><p>En el script del segundo ejemplo, <code>foreach</code> se encuentra asignado a un objeto (<code>out</code>) el cual recibir√° el √∫ltimo objeto generado dentro de cada paso del loop. Si lo que se desea es √∫nicamente obtener archivos que se exportar√°n (figuras, tablas, NetCDF, etc.), hay que asegurarse de dejar un <code>NULL</code> en la √∫ltima l√≠nea dentro del bucle. Por otro lado, si lo que se desea es obtener un objeto y √©ste se coloca en esa posici√≥n, <code>foreach</code> lo compilar√° utilizando la funci√≥n <code>list</code>, i.e.&nbsp;el objeto final (<code>out</code>) ser√° una lista que tendr√° tantos niveles como pasos haya en el bucle. As√≠ mismo, es importante tener en cuenta que internamente <code>foreach</code> ejecuta una peque√±a sesi√≥n de R aparte por lo que es necesario indicar los paquetes adicionales requeridos a trav√©s del argumento <code>.packages</code> (ver el ejemplo siguiente).</p></li>
<li><p>El argumento <code>spec = 20</code> dentro de <code>makeCluster</code> hace referencia a la cantidad de hilos de proceso que se utilizar√°n para ejecutar el bucle, ¬ørecuerdas que una de las opciones al momento de crear tu server en <code>marbec-gpu</code> era elegir la cantidad de CPUs (2, 4, 8, 16, 32‚Ä¶)? Bueno, pues es justamente con este argumento en donde indicar√°s esa cantidad de nucleos l√≥gicos. Recuerda que otro aspecto importante es la RAM. En un momento determinado cada proceso corriendo dentro de cada hilo tendr√° que cargar todo lo que necesitar√≠a un solo proceso simple. Dicho de otro modo, si en un proceso de n√∫cleo simple, en cada paso de nuestro bucle se tiene que cargar 5 archivos NetCDF que ocupan 5 GB en RAM, si ejecutamos ese proceso en multin√∫cleo y definimos <code>spec = 40</code>, en un momento se tendr√°n que cargar 5GBx40 (200 GB) en RAM en simult√°neo. As√≠ que no solo debes elegir bien la configuraci√≥n de tu servidor (respecto al script que planeas ejecutar), sino tambi√©n un aproximado de lo que se consume en cada proceso independiente, con el fin de no saturar tu servidor. <code>marbec-gpu</code> es grande, pero tiene sus l√≠mites.</p></li>
</ul>
</div>
</div>


</section>
</section>
</section>
 ]]></description>
  <guid>https://luislaum.github.io/home/blog/marbec-gpu-run-process/marbec-gpu-run-process.html</guid>
  <pubDate>Fri, 25 Oct 2024 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/marbec-gpu-run-process/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Managing files within marbec-data</title>
  <link>https://luislaum.github.io/home/blog/marbec-data-manage-files/marbec-data-manage-files.html</link>
  <description><![CDATA[ 

<p>Image credits: Declan Sun at <a href="https://unsplash.com/photos/a-shelf-filled-with-lots-of-white-boxes-8byGIDpCU1w?utm_content=creditShareLink&amp;utm_medium=referral&amp;utm_source=unsplash">Unplash</a></p>
<section id="en-managing-files-fromto-marbec-data" class="level1">
<h1>[EN] Managing files from/to <code>marbec-data</code></h1>
<section id="create-a-shared-work-folder" class="level2">
<h2 data-anchor-id="create-a-shared-work-folder">Create a shared work folder</h2>
<p>[Content in preparation]</p>
</section>
<section id="linking-a-working-folder-to-marbec-gpu." class="level2">
<h2 data-anchor-id="linking-a-working-folder-to-marbec-gpu.">Linking a working folder to <code>marbec-gpu</code>.</h2>
<p>[Content in preparation]</p>
</section>
<section id="managing-files-between-marbec-data-and-our-pc-filezilla" class="level2">
<h2 data-anchor-id="managing-files-between-marbec-data-and-our-pc-filezilla">Managing files between <code>marbec-data</code> and our PC (FileZilla)</h2>
<section id="installing-filezilla-and-connecting-to-marbec-data." class="level3">
<h3 data-anchor-id="installing-filezilla-and-connecting-to-marbec-data.">Installing FileZilla and connecting to <code>marbec-data</code>.</h3>
<p>The easiest way to move (copy, cut and paste) files from our PC to one of our shared work folders or to our <code>marbec-gpu</code> user folder is through the (free) FileZilla software. To download the installer, just go to its official website <a href="https://filezilla-project.org/" class="uri">https://filezilla-project.org/</a> and select the <strong>Download FileZilla Client</strong> button.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566289.png" class="img-fluid"></p>
<p>Then, by default we will be offered to download the version corresponding to the operating system (OS) where we are running our browser, but we can always choose the most appropriate version in the section <em>More download options</em>.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566290.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-caution callout-titled" title="Operating systems and CPU architectures">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Operating systems and CPU architectures
</div>
</div>
<div class="callout-body-container callout-body">
<p>In recent years, processors with ARM architecture have been incorporated into the PC market. The most recent and famous example is Apple‚Äôs Mx series (e.g.&nbsp;M1); however, in recent months laptops with ARM processors (from the Snapdragon brand, for instance) have also appeared. Software compiled for an ARM architecture will not work on an x86 architecture (which is the architecture manufactured by brands such as Intel or AMD) and vice versa, so it will always be important to know not only which OS our PC is running (Windows, MacOS or Linux), but also the architecture of our processor.</p>
</div>
</div>
<p>Once the file has been downloaded, it will be enough to run it leaving most of the options by default (except those that offer us to install some additional program that we do not need, e.g.&nbsp;Chrome). After that, we will be able to run the program and we will obtain an environment that will look like this:</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566291.png" class="img-fluid"></p>
<p>The next thing we will do is to establish a connection to <code>marbec-data</code>. To do this, at the top, we will fill in the following fields:</p>
<ul>
<li>Server: marbec-data.ird.fr</li>
<li>User: youruser</li>
<li>Password: yourpassword</li>
<li>Port: 22</li>
</ul>
<p>If all goes well, a message indicating that the connection has been successful will be displayed in the panel immediately below. In addition, the next two lower panels to the right will show those folders already linked and available in our <code>marbec-data</code> account.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566292.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>It is not necessary to log in every time we log back into FileZilla. We could save our login and skip the above steps by clicking the small arrow to the right of <strong>Quick Login</strong> and selecting our saved login. Of course, allowing our login credentials to be saved should ONLY occur on our personal PC.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566293.png" class="img-fluid"></p>
</div>
</div>
<p>And that is all! In the left panels, we will be able to navigate in the directories of our PC, while in the right panels we will be able to do it in the <code>marbec-gpu</code> and <code>marbec-data</code> ones.</p>
</section>
<section id="copying-files-and-folders" class="level3">
<h3 data-anchor-id="copying-files-and-folders">Copying files and folders</h3>
<p>It will be as simple as dragging the element between the left and right panels. The process will start and the bottom pane (the last one) will show the queued, completed and failed transfers.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566294.png" class="img-fluid"></p>
<p>Also, if at any time FileZilla detects that there are repeated items, it will show a small window with multiple options available (overwrite and skip, verify differences in sizes or names, apply the selected option to future cases in the transfer queue, etc.).</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566295.png" class="img-fluid"></p>
</section>
</section>
<section id="manage-files-within-marbec-data." class="level2">
<h2 data-anchor-id="manage-files-within-marbec-data.">Manage files within <code>marbec-data</code>.</h2>
<p>While the <code>marbec-data</code> web environment explorer offers the options to copy, paste, delete, etc., it is not an efficient method when our files are medium or large (&gt;10 MB). Here is how to perform these operations from <strong>Terminal</strong>.</p>
<section id="copy-paste" class="level3">
<h3 data-anchor-id="copy-paste">Copy-paste</h3>
<p>For this, the simplest way is through the <code>cp</code> command and making use of the navigation commands cited in this <a href="https://luislaum.github.io/blog/marbec-gpu-main-cmds/marbec-gpu-main-cmds.html">post</a> (e.g.&nbsp;<code>..</code> to indicate a previous folder). The basic syntax is the following: <code>cp path/origin /path/destination</code>, but there are different possible cases:</p>
<ul>
<li><p>Copy a file into the same folder, but with a different name (create duplicate): <code>cp file1.csv file1-dup.csv</code>.</p></li>
<li><p>Copy a file to another folder: <code>cp path/file1.csv path/destination</code>.</p></li>
<li><p>Copy more than one file to another folder: <code>cp path/file1.csv path/file2.csv folder/destination</code></p></li>
<li><p>Copy a folder to another folder: <code>cp path/folder1 path/folder2 --recursive</code> or <code>cp path/folder1 path/folder2 -r</code>.</p></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>By default, <code>cp</code> will overwrite any file with the same name. To avoid this, it is possible to add the <code>-n</code> option as follows: <code>cp path/from/file1.csv path/destination -n</code>.</p>
</div>
</div>
</section>
<section id="cut-paste-and-also-rename" class="level3">
<h3 data-anchor-id="cut-paste-and-also-rename">Cut-paste (and also rename)</h3>
<p>It will be very similar to the above, but through the <code>mv</code> command:</p>
<ul>
<li><p>Rename a file (within the same folder): <code>mv file1.csv file2.csv</code></p></li>
<li><p>Move a file to another folder: <code>mv path/file1.csv path/to/destination</code></p></li>
<li><p>Move one file to another folder: <code>mv path/file1.csv path/file2.csv path/destination</code></p></li>
<li><p>Move one folder to another folder: <code>mv path/old/folder path/new/folder</code></p></li>
</ul>
</section>
<section id="delete" class="level3">
<h3 data-anchor-id="delete">Delete</h3>
<p>For this, we will use the <code>rm</code> command as follows:</p>
<ul>
<li><p>Delete a file: <code>rm path/to/file.csv</code></p></li>
<li><p>Delete a folder (and all its contents): <code>rm path/to/folder -r</code></p></li>
</ul>
<div class="callout callout-style-default callout-caution callout-titled" title="No turning back">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
No turning back
</div>
</div>
<div class="callout-body-container callout-body">
<p>While inside Terminal it is always possible to cancel a command using the shortcut <code>Ctrl+C</code> (or <code>Cmd+C</code> on MacOS), once the <code>rm</code> command completes its work, <strong>there is no way to revert the deletion</strong> or recover it from a recycle garbage can, so be very careful when using it.</p>
</div>
</div>
</section>
</section>
</section>
<section id="es-manejando-archivos-desdehacia-marbec-data" class="level1">
<h1>[ES] Manejando archivos desde/hacia <code>marbec-data</code></h1>
<section id="crear-una-carpeta-de-trabajo-compartida" class="level2">
<h2 data-anchor-id="crear-una-carpeta-de-trabajo-compartida">Crear una carpeta de trabajo compartida</h2>
<p>[Contenido en preparaci√≥n]</p>
</section>
<section id="enlazar-una-carpeta-de-trabajo-a-marbec-gpu" class="level2">
<h2 data-anchor-id="enlazar-una-carpeta-de-trabajo-a-marbec-gpu">Enlazar una carpeta de trabajo a <code>marbec-gpu</code></h2>
<p>[Contenido en preparaci√≥n]</p>
</section>
<section id="gestionar-archivos-entre-marbec-data-y-nuestra-pc-filezilla" class="level2">
<h2 data-anchor-id="gestionar-archivos-entre-marbec-data-y-nuestra-pc-filezilla">Gestionar archivos entre <code>marbec-data</code> y nuestra PC (FileZilla)</h2>
<section id="instalando-filezilla-y-conect√°ndonos-a-marbec-data" class="level3">
<h3 data-anchor-id="instalando-filezilla-y-conect√°ndonos-a-marbec-data">Instalando FileZilla y conect√°ndonos a <code>marbec-data</code></h3>
<p>La manera m√°s sencilla de mover (copiar, cortar y pegar) archivos desde nuestra PC hacia alguna de nuestras carpetas de trabajos compartidas o hacia nuestra carpeta de usuario de <code>marbec-gpu</code> es a trav√©s del software (gratuito) FileZilla. Para descargar el instalador, basta con ir a su sitio web oficial <a href="https://filezilla-project.org/" class="uri">https://filezilla-project.org/</a> y seleccionar el bot√≥n <strong>Download FileZilla Client</strong>.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566289.png" class="img-fluid"></p>
<p>Luego, por defecto se nos ofrecer√° descargar la versi√≥n correspondiente al sistema operativo (SO) en donde estemos ejecutando nuestro navegador, pero siempre podremo elegir la versi√≥n m√°s adecuada en la secci√≥n <em>More download options</em>.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566290.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-caution callout-titled" title="Sistemas Operativos y arquitecturas de procesador">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Sistemas Operativos y arquitecturas de procesador
</div>
</div>
<div class="callout-body-container callout-body">
<p>En los √∫ltimos a√±os, se ha ido incorporando al mercado de PCs los procesadores con arquitectura ARM. El ejemplo m√°s reciente y famoso es la serie Mx de Apple (e.g.&nbsp;M1); sin embargo, en los √∫ltimos meses tambi√©n han aparecido laptops con procesadores ARM (de la marca Snapdragon, por ejemplo). Un software compilado para una arquitectura ARM no funcionar√° en una arquitectura x86 (que es la arquitectura fabricada por marcas como Intel o AMD) y viceversa, por lo que siempre ser√° importante conocer no solamente qu√© SO lleva nuestra PC (Windows, MacOS o Linux), sino tambi√©n la arquitectura de nuestro procesador.</p>
</div>
</div>
<p>Una vez descargado el archivo, bastar√° con ejecutarlo dejando la mayor parte de opciones por defecto (salvo aquellas que nos ofrezcan instalar alg√∫n programa adicional que no necesitemos, e.g.&nbsp;Chrome). Luego de ello, podremos ejecutar el programa y obtendremos un entorno que lucir√° as√≠:</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566291.png" class="img-fluid"></p>
<p>Lo siguiente que haremos ser√° establecer una conexi√≥n a <code>marbec-data</code>. Para ello, en la parte superior, completaremos los siguientes campos:</p>
<ul>
<li>Servidor: marbec-data.ird.fr</li>
<li>Usuario: nuestrousuario</li>
<li>Contrase√±a: nuestracontrase√±a</li>
<li>Puerto: 22</li>
</ul>
<p>Si todo va bien, en el panel inmediato inferior se mostrar√° un mensaje indicado que la conexi√≥n ha sido exitosa. Adem√°s, en los dos paneles inferiores siguientes a la derecha se mostrar√° aquellas carpetas ya enlazadas y disponibles en nuestra cuenta de <code>marbec-data</code>.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566292.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>No es necesario iniciar sesi√≥n cada vez que ingresemos nuevamente a FileZilla. Si decidimos que deseamos que guarde nuestro inicio de sesi√≥n, podremos obviar los pasos anteriores dando click a la peque√±a flecha a la derecha de <strong>Conexi√≥n r√°pida</strong> y seleccionando nuestro inici√≥ de sesi√≥n guardado. Por supuesto, el permitir que se guarden nuestras credenciales de inicio de sesi√≥n SOLO debe ocurrir en nuestra PC de uso personal.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566293.png" class="img-fluid"></p>
</div>
</div>
<p>¬°Y eso es todo! En los paneles de la izquierda, podremos navegar en los directorios de nuestra PC, mientras que en los paneles de la derecha podremos hacerlo en los de <code>marbec-gpu</code> y <code>marbec-data</code>.</p>
</section>
<section id="copiar-archivos-y-carpetas" class="level3">
<h3 data-anchor-id="copiar-archivos-y-carpetas">Copiar archivos y carpetas</h3>
<p>Ser√° tan sencillo como arrastrar el elemento entre los paneles izquierdo y derecho. El proceso iniciar√° y en el panel inferior (el √∫ltimo) se mostrar√° las transferencias en cola, las completadas y las fallidas.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566294.png" class="img-fluid"></p>
<p>As√≠ mismo, si en alg√∫n momento FileZilla detecta que hay elementos repetidos, nos mostrar√° una ventana peque√±a con m√∫ltiples opciones disponibles (sobreescribir y omitir, verificar diferenencias en tama√±os o nombres, aplicar la opci√≥n seleccionada a futuros casos en la cola de transferencia, etc.).</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-manage-files/images/clipboard-1730566295.png" class="img-fluid"></p>
</section>
</section>
<section id="gestionar-archivos-dentro-de-marbec-data" class="level2">
<h2 data-anchor-id="gestionar-archivos-dentro-de-marbec-data">Gestionar archivos dentro de <code>marbec-data</code></h2>
<p>Si bien el explorador del entorno web de <code>marbec-data</code> ofrece las opciones de copiar, pegar, eliminar, etc., no es un m√©todo eficiente cuando nuestros archivos son medianos o grandes (&gt;10 MB). A continuaci√≥n, se mostrar√° c√≥mo realizar estas operaciones desde <strong>Terminal</strong>.</p>
<section id="copiar-pegar" class="level3">
<h3 data-anchor-id="copiar-pegar">Copiar-pegar</h3>
<p>Para esto, la manera m√°s sencilla es a trav√©s del comando <code>cp</code> y haciendo uso de los comandos de navegaci√≥n citados en este <a href="https://luislaum.github.io/blog/marbec-gpu-main-cmds/marbec-gpu-main-cmds.html">post</a> (e.g.&nbsp;<code>..</code> para indicar una carpeta anterior). La sintaxis b√°sica es la siguiente: <code>cp ruta/de/origen ruta/de/destino</code>, pero existen diferentes casos posibles:</p>
<ul>
<li><p>Copiar un archivo dentro de la misma carpeta, pero con un nombre distinto (crear duplicado): <code>cp archivo1.csv archivo1-dup.csv</code></p></li>
<li><p>Copiar un archivo hacia otra carpeta: <code>cp ruta/de/archivo1.csv carpeta/de/destino</code></p></li>
<li><p>Copiar m√°s de un archivo hacia otra carpeta: <code>cp ruta/de/archivo1.csv ruta/de/archivo2.csv carpeta/de/destino</code></p></li>
<li><p>Copiar una carpeta en otra carpeta: <code>cp ruta/de/carpeta1 ruta/de/carpeta2 --recursive</code> o <code>cp ruta/de/carpeta1 ruta/de/carpeta2 -r</code></p></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Por defecto, <code>cp</code> sobreescribir√° cualquier archivo con el mismo nombre. Para evitarlo, es posible a√±adir la opci√≥n <code>-n</code> del siguiente modo: <code>cp ruta/de/archivo1.csv ruta/de/destino -n</code></p>
</div>
</div>
</section>
<section id="cortar-pegar-y-tambi√©n-renombrar" class="level3">
<h3 data-anchor-id="cortar-pegar-y-tambi√©n-renombrar">Cortar-pegar (y tambi√©n renombrar)</h3>
<p>Ser√° muy similar a lo anterior, pero a trav√©s del comando <code>mv</code>:</p>
<ul>
<li><p>Renombrar un archivo (dentro de la misma carpeta): <code>mv archivo1.csv archivo2.csv</code></p></li>
<li><p>Mover un archivo hacia otra carpeta: <code>mv ruta/de/archivo1.csv carpeta/de/destino</code></p></li>
<li><p>Mover m√°s de un archivo hacia otra carpeta: <code>mv ruta/de/archivo1.csv ruta/de/archivo2.csv carpeta/de/destino</code></p></li>
<li><p>Mover una carpeta hacia otra carpeta: <code>mv ruta/antigua/carpeta ruta/nueva/carpeta</code></p></li>
</ul>
</section>
<section id="borrar" class="level3">
<h3 data-anchor-id="borrar">Borrar</h3>
<p>Para esto, utilizaremos el comando <code>rm</code> de la siguiente manera:</p>
<ul>
<li><p>Borrar un archivo: <code>rm ruta/de/archivo.csv</code></p></li>
<li><p>Borrar una carpeta (y todo su contenido): <code>rm ruta/de/carpeta -r</code></p></li>
</ul>
<div class="callout callout-style-default callout-caution callout-titled" title="No hay vuelta atr√°s">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
No hay vuelta atr√°s
</div>
</div>
<div class="callout-body-container callout-body">
<p>Si bien dentro de Terminal siempre es posible cancelar una orden usando el atajo <code>Ctrl+C</code> (o <code>Cmd+C</code> en MacOS), una vez que se ejecuta el comando <code>rm</code> y √©ste culmina su trabajo, <strong>no hay manera de revertir lo borrado</strong> ni recuperarlo desde alguna papelera de reciclaje, as√≠ que ten mucho cuidado al usarlo.</p>
</div>
</div>


</section>
</section>
</section>
 ]]></description>
  <guid>https://luislaum.github.io/home/blog/marbec-data-manage-files/marbec-data-manage-files.html</guid>
  <pubDate>Thu, 24 Oct 2024 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/marbec-data-manage-files/banner.png" medium="image" type="image/png" height="106" width="144"/>
</item>
<item>
  <title>Main commands in marbec-gpu Terminal</title>
  <link>https://luislaum.github.io/home/blog/marbec-gpu-main-cmds/marbec-gpu-main-cmds.html</link>
  <description><![CDATA[ 

<p>Image credits: Kajetan Sumila at <a href="https://unsplash.com/photos/black-metal-tools-on-brown-wooden-shelf-sXPR9JV270c?utm_content=creditShareLink&amp;utm_medium=referral&amp;utm_source=unsplash">Unplash</a></p>
<section id="en-main-commands-in-marbec-gpu-terminal" class="level1">
<h1>[EN] Main commands in <code>marbec-gpu</code> Terminal</h1>
<p>The first thing to keep in mind is that <code>marbec-gpu</code> has Ubuntu installed, so the commands listed below will be the same as the ones used in that OS. This article will show a description of the main usage modes for each command, but if you have any additional requirements, you can always search in forums like <a href="https://stackoverflow.com/">Stackoverflow</a> or check the help for each command, which consists of placing the command name followed by <code>--help</code>. For example, if I want to know the help for the <code>ls</code> command, just run <code>ls --help</code> in the Terminal.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Upper and lower case">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Upper and lower case
</div>
</div>
<div class="callout-body-container callout-body">
<p>As in R or Python, the use of upper or lower case when indicating an option does matter. For example, <code>ls -D</code> is not equivalent to <code>ls -d</code>, so be carefull.</p>
</div>
</div>
<section id="browsing-within-folders" class="level3">
<h3 data-anchor-id="browsing-within-folders">Browsing within folders</h3>
<ul>
<li>Command: <code>cd</code></li>
<li>Usage: <code>cd path/folder</code></li>
</ul>
<p>To indicate a previous position (folder), you will use the <em>statement</em> <code>..</code> as follows: <code>../path/folder1</code> (this indicates that there is a folder called <code>path</code> from the folder where you are, and that that has a folder called <code>folder1</code> as well).</p>
</section>
<section id="create-a-folder" class="level3">
<h3 data-anchor-id="create-a-folder">Create a folder</h3>
<ul>
<li>Command: <code>mkdir</code></li>
<li>Usage: <code>mkdir path/folder</code></li>
</ul>
</section>
<section id="get-the-content-of-a-folder-as-a-list" class="level3">
<h3 data-anchor-id="get-the-content-of-a-folder-as-a-list">Get the content of a folder as a list</h3>
<ul>
<li>Command: <code>ls</code></li>
<li>Usage: <code>ls path/folder/</code></li>
</ul>
<p>Main options:</p>
<ul>
<li><code>--all</code> (o <code>-a</code>): Displays all files and subfolders, including those protected (hidden) by the system.</li>
</ul>
</section>
<section id="generate-a-list-of-filesfolders-and-display-the-size-of-each-item" class="level3">
<h3 data-anchor-id="generate-a-list-of-filesfolders-and-display-the-size-of-each-item">Generate a list of files/folders and display the size of each item</h3>
<ul>
<li>Command: <code>du</code></li>
<li>Usage: <code>du path/to/file.csv</code> o <code>du path/to/folder</code></li>
</ul>
<p>Main options:</p>
<ul>
<li><p><code>--human-readable</code> (o <code>-h</code>): changes the units dynamically to avoid displaying all Kb. This is especially useful when you have large objects (subfolders or files).</p></li>
<li><p><code>--summary</code> (o <code>-s</code>): displays a summary table, i.e.&nbsp;it only includes the subfolders and files present at the first search level. This is useful when we just want to take a quick look and avoid displaying a complete listing of ALL internal subfolders.</p></li>
</ul>
<p>If I want to get a list of all the files and folders inside a folder with their respective sizes (the three options are equivalent):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">du</span> ruta/de/folder/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--human-readable</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--summarize</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">du</span> ruta/de/folder/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">du</span> ruta/de/folder/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-hs</span></span></code></pre></div>
</div>
</section>
<section id="copy-paste" class="level3">
<h3 data-anchor-id="copy-paste">Copy-paste</h3>
<p>For this, the simplest way is through the <code>cp</code> command and making use of the navigation commands cited in this post (e.g.&nbsp;<code>..</code> to indicate a previous folder). The basic syntax is the following: <code>cp path/origin /path/destination</code>, but there are different possible cases:</p>
<ul>
<li><p>Copy a file into the same folder, but with a different name (create duplicate): <code>cp file1.csv file1-dup.csv</code>.</p></li>
<li><p>Copy a file to another folder: <code>cp path/file1.csv path/destination</code>.</p></li>
<li><p>Copy more than one file to another folder: <code>cp path/file1.csv path/file2.csv folder/destination</code></p></li>
<li><p>Copy a folder to another folder: <code>cp path/folder1 path/folder2 --recursive</code> or <code>cp path/folder1 path/folder2 -r</code>.</p></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>By default, <code>cp</code> will overwrite any file with the same name. To avoid this, it is possible to add the <code>-n</code> option as follows: <code>cp path/from/file1.csv path/destination -n</code>.</p>
</div>
</div>
</section>
<section id="cut-paste-and-also-rename" class="level3">
<h3 data-anchor-id="cut-paste-and-also-rename">Cut-paste (and also rename)</h3>
<p>It will be very similar to the above, but through the <code>mv</code> command:</p>
<ul>
<li><p>Rename a file (within the same folder): <code>mv file1.csv file2.csv</code></p></li>
<li><p>Move a file to another folder: <code>mv path/file1.csv path/to/destination</code></p></li>
<li><p>Move one file to another folder: <code>mv path/file1.csv path/file2.csv path/destination</code></p></li>
<li><p>Move one folder to another folder: <code>mv path/old/folder path/new/folder</code></p></li>
</ul>
</section>
<section id="delete" class="level3">
<h3 data-anchor-id="delete">Delete</h3>
<p>For this, we will use the <code>rm</code> command as follows:</p>
<ul>
<li><p>Delete a file: <code>rm path/to/file.csv</code></p></li>
<li><p>Delete a folder (and all its contents): <code>rm path/to/folder -r</code></p></li>
</ul>
<div class="callout callout-style-default callout-caution callout-titled" title="No turning back">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
No turning back
</div>
</div>
<div class="callout-body-container callout-body">
<p>While inside Terminal it is always possible to cancel a command using the shortcut <code>Ctrl+C</code> (or <code>Cmd+C</code> on MacOS), once the <code>rm</code> command completes its work, <strong>there is no way to revert the deletion</strong> or recover it from a recycle garbage can, so be very careful when using it.</p>
</div>
</div>
</section>
<section id="display-current-processes" class="level3">
<h3 data-anchor-id="display-current-processes">Display current processes</h3>
<ul>
<li>Command: <code>top</code></li>
</ul>
<p>When you run it, it will show in interactive mode in Terminal the processes that are running, as well as the resources used by each of them (basically like a Task Manager). To exit this interactive mode, just press the <code>q</code> key.</p>
</section>
<section id="stop-a-process" class="level3">
<h3 data-anchor-id="stop-a-process">Stop a process</h3>
<p>If we want to force the closing or the cancellation of a process already started, we can use the shortcut <code>Ctrl+C</code> (or <code>Cmd+C</code> in MacOS). It is important to keep in mind that forcing the closing of a process that had in progress the handling of files or folders (creation, copy, etc.) can leave the generated files unusable.</p>
</section>
<section id="viewing-a-plain-text-file" class="level3">
<h3 data-anchor-id="viewing-a-plain-text-file">Viewing a plain text file</h3>
<p>By default, there are two tools available from Terminal: <code>vi</code> and <code>nano</code>. The syntax for their execution is as simple as <code>vi path/file1.txt</code> or <code>nano path/file1.txt</code>, where <code>file1.txt</code> can be any plain text file (e.g.&nbsp;an R or Python script). The navigation shortcuts within each of these environments are different, but documentation is abundant on the Internet. Choose the one you like best.</p>
</section>
</section>
<section id="es-principales-comandos-en-terminal-de-marbec-gpu" class="level1">
<h1>[ES] Principales comandos en Terminal de <code>marbec-gpu</code></h1>
<p>Lo primero que debemos tener en cuenta es que <code>marbec-gpu</code> lleva instalado Ubuntu, por lo que los comandos listados a continuaci√≥n ser√°n los mismos que se usan en dicho SO. En este art√≠culo se mostrar√° una descripci√≥n de los principales modos de uso para cada comando, pero si usted tiene alg√∫n requerimiento adicional, siempre puede buscar en foros como Stackoverflow o revisar la ayuda de cada comando, que consiste en colocar el nombre del comando seguido de <code>--help</code>. Por ejemplo, si deseo conocer la ayuda del comando <code>ls</code>, bastar√° con ejecutar <code>ls --help</code> en la Terminal.</p>
<div class="callout callout-style-default callout-note callout-titled" title="May√∫sculas y min√∫sculas">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
May√∫sculas y min√∫sculas
</div>
</div>
<div class="callout-body-container callout-body">
<p>Al igual que en R o Python, el uso de may√∫sculas o min√∫sculas al momento de indicar una opci√≥n s√≠ importa. Por ejemplo, <code>ls -D</code> no equivale a <code>ls -d</code>, por lo que se debe tener cuidado.</p>
</div>
</div>
<section id="navegar-entre-carpetas" class="level3">
<h3 data-anchor-id="navegar-entre-carpetas">Navegar entre carpetas</h3>
<ul>
<li>Comando: <code>cd</code></li>
<li>Modo de uso: <code>cd ruta/carpeta</code></li>
</ul>
<p>Para indicar que se desea ir a una posici√≥n (carpeta) anterior, se utilizar√° el <em>statement</em> <code>..</code> de la siguiente manera: <code>../ruta/carpeta1</code> (esto indica que a partir de la carpeta en donde nos encontramos, en la carpeta anterior hay una carpeta llamada <code>ruta</code> que a su vez tiene una llamada <code>carpeta1</code>).</p>
</section>
<section id="crear-una-carpeta" class="level3">
<h3 data-anchor-id="crear-una-carpeta">Crear una carpeta</h3>
<ul>
<li>Comando: <code>mkdir</code></li>
<li>Modo de uso: <code>mkdir ruta/carpeta</code></li>
</ul>
</section>
<section id="generar-un-listado-de-archivos" class="level3">
<h3 data-anchor-id="generar-un-listado-de-archivos">Generar un listado de archivos</h3>
<ul>
<li>Comando: <code>ls</code></li>
<li>Modo de uso: <code>ls ruta/folder</code></li>
</ul>
<p>Principales opciones:</p>
<ul>
<li><code>--all</code> (o <code>-a</code>): Muestra todos los archivos y subcarpetas, incluyendo aquellos protegidos (ocultos) por el sistema.</li>
</ul>
</section>
<section id="generar-un-listado-de-archivoscarpetas-mostrando-el-tama√±o-de-cada-elemento" class="level3">
<h3 data-anchor-id="generar-un-listado-de-archivoscarpetas-mostrando-el-tama√±o-de-cada-elemento">Generar un listado de archivos/carpetas mostrando el tama√±o de cada elemento</h3>
<ul>
<li>Comando: <code>du</code></li>
<li>Modo de uso: <code>du ruta/archivo-folder.csv</code></li>
</ul>
<p>Principales opciones:</p>
<ul>
<li><p><code>--human-readable</code> (o <code>-h</code>): cambia las unidades din√°micamente para evitar mostrar todo Kb. Esto es especialmente √∫til cuando se tiene objetos (subcarpetas o archivos) de gran tama√±o.</p></li>
<li><p><code>--summary</code> (o <code>-s</code>): muestra una tabla resumida, i.e.&nbsp;solo incluye las subcarpetas y archivos presentes en el primer nivel de b√∫squeda. Esto es √∫til cuando solo queremos echar un vistazo r√°pido y evitar que muestre un listado completo de TODAS las subcarpetas internas.</p></li>
</ul>
<p>Si deseo obtener un listado de todos los archivos y carpetas dentro de un folder con sus respectivos tama√±os (las tres opciones son equivalentes):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">du</span> ruta/de/folder/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--human-readable</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--summarize</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">du</span> ruta/de/folder/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">du</span> ruta/de/folder/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-hs</span></span></code></pre></div>
</div>
</section>
<section id="copiar-pegar" class="level3">
<h3 data-anchor-id="copiar-pegar">Copiar-pegar</h3>
<p>Para esto, la manera m√°s sencilla es a trav√©s del comando <code>cp</code> y haciendo uso de los comandos de navegaci√≥n citados en este post (e.g.&nbsp;<code>..</code> para indicar una carpeta anterior). La sintaxis b√°sica es la siguiente: <code>cp ruta/de/origen ruta/de/destino</code>, pero existen diferentes casos posibles:</p>
<ul>
<li><p>Copiar un archivo dentro de la misma carpeta, pero con un nombre distinto (crear duplicado): <code>cp archivo1.csv archivo1-dup.csv</code></p></li>
<li><p>Copiar un archivo hacia otra carpeta: <code>cp ruta/de/archivo1.csv carpeta/de/destino</code></p></li>
<li><p>Copiar m√°s de un archivo hacia otra carpeta: <code>cp ruta/de/archivo1.csv ruta/de/archivo2.csv carpeta/de/destino</code></p></li>
<li><p>Copiar una carpeta en otra carpeta: <code>cp ruta/de/carpeta1 ruta/de/carpeta2 --recursive</code> o <code>cp ruta/de/carpeta1 ruta/de/carpeta2 -r</code></p></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Por defecto, <code>cp</code> sobreescribir√° cualquier archivo con el mismo nombre. Para evitarlo, es posible a√±adir la opci√≥n <code>-n</code> del siguiente modo: <code>cp ruta/de/archivo1.csv ruta/de/destino -n</code></p>
</div>
</div>
</section>
<section id="cortar-pegar-y-tambi√©n-renombrar" class="level3">
<h3 data-anchor-id="cortar-pegar-y-tambi√©n-renombrar">Cortar-pegar (y tambi√©n renombrar)</h3>
<p>Ser√° muy similar a lo anterior, pero a trav√©s del comando <code>mv</code>:</p>
<ul>
<li><p>Renombrar un archivo (dentro de la misma carpeta): <code>mv archivo1.csv archivo2.csv</code></p></li>
<li><p>Mover un archivo hacia otra carpeta: <code>mv ruta/de/archivo1.csv carpeta/de/destino</code></p></li>
<li><p>Mover m√°s de un archivo hacia otra carpeta: <code>mv ruta/de/archivo1.csv ruta/de/archivo2.csv carpeta/de/destino</code></p></li>
<li><p>Mover una carpeta hacia otra carpeta: <code>mv ruta/antigua/carpeta ruta/nueva/carpeta</code></p></li>
</ul>
</section>
<section id="borrar" class="level3">
<h3 data-anchor-id="borrar">Borrar</h3>
<p>Para esto, utilizaremos el comando <code>rm</code> de la siguiente manera:</p>
<ul>
<li><p>Borrar un archivo: <code>rm ruta/de/archivo.csv</code></p></li>
<li><p>Borrar una carpeta (y todo su contenido): <code>rm ruta/de/carpeta -r</code></p></li>
</ul>
<div class="callout callout-style-default callout-caution callout-titled" title="No hay vuelta atr√°s">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
No hay vuelta atr√°s
</div>
</div>
<div class="callout-body-container callout-body">
<p>Si bien dentro de Terminal siempre es posible cancelar una orden usando el atajo <code>Ctrl+C</code> (o <code>Cmd+C</code> en MacOS), una vez que se ejecuta el comando <code>rm</code> y √©ste culmina su trabajo, <strong>no hay manera de revertir lo borrado</strong> ni recuperarlo desde alguna papelera de reciclaje, as√≠ que ten mucho cuidado al usarlo.</p>
</div>
</div>
</section>
<section id="visualizar-procesos-en-curso" class="level3">
<h3 data-anchor-id="visualizar-procesos-en-curso">Visualizar procesos en curso</h3>
<ul>
<li>Comando: <code>top</code></li>
</ul>
<p>Al ejecutarlo, se mostrar√° en modo interactivo en Terminal los procesos que se est√°n ejecutando, as√≠ como los recursos utilizados por cada uno de ellos (b√°sicamente como un Administrador de tareas). Para salir de este modo interactivo, basta con pulsar la tecla <code>q</code>.</p>
</section>
<section id="detener-la-ejecuci√≥n-de-un-proceso" class="level3">
<h3 data-anchor-id="detener-la-ejecuci√≥n-de-un-proceso">Detener la ejecuci√≥n de un proceso</h3>
<p>Si queremos forzar el cierre o la cancelaci√≥n de un proceso ya iniciado, podemos utilizar el atajo <code>Ctrl+C</code> (o <code>Cmd+C</code> en MacOS). Es importante tener en cuenta que forzar el cierre de un proceso que ten√≠a en marcha el manejo de archivos o carpetas (creaci√≥n, copia, etc.) puede dejar inutilizables los archivos generados.</p>
</section>
<section id="visualizar-un-archivo-de-texto-plano" class="level3">
<h3 data-anchor-id="visualizar-un-archivo-de-texto-plano">Visualizar un archivo de texto plano</h3>
<p>Por defecto, desde Terminal existen dos herramientas disponibles: <code>vi</code> y <code>nano</code>. La sintaxis para su ejecuci√≥n es tan sencilla como <code>vi ruta/archivo1.txt</code> o <code>nano ruta/archivo1.txt</code>, en donde <code>archivo1.txt</code> puede ser cualquier archivo de texto plano (e.g.&nbsp;un script en R o Python). Los atajos de navegaci√≥n dentro de cada uno de esos entornos s√≠ son distintos, pero la documentaci√≥n es muy abundante en Internet. Elige el que te agrade m√°s.</p>


</section>
</section>
 ]]></description>
  <guid>https://luislaum.github.io/home/blog/marbec-gpu-main-cmds/marbec-gpu-main-cmds.html</guid>
  <pubDate>Wed, 23 Oct 2024 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/marbec-gpu-main-cmds/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Introduction to marbec-data and marbec-gpu</title>
  <link>https://luislaum.github.io/home/blog/marbec-data-gpu-intro/marbec-data-gpu-intro.html</link>
  <description><![CDATA[ 

<p>Image credits: Diego Fernandez at <a href="https://unsplash.com/photos/mixing-console-yRNJAcdpDAo?utm_content=creditShareLink&amp;utm_medium=referral&amp;utm_source=unsplash">Unplash</a></p>
<section id="en-introduction-to-marbec-data-and-marbec-gpu" class="level1">
<h1>[EN] Introduction to <code>marbec-data</code> and <code>marbec-gpu</code></h1>
<section id="what-are-they-are-they-the-same" class="level2">
<h2 data-anchor-id="what-are-they-are-they-the-same">What are they? Are they the same?</h2>
<p>No.&nbsp;<code>marbec-data</code> and <code>marbec-gpu</code> compose a <em>High-performance computing system</em>. (Very) Basically, it is like having a supercomputer prepared to deal with complex problems. Imagine that, instead of having a single processor (Intel/AMD) working in conjunction with the RAM and storage space of just your computer (e.g.&nbsp;your laptop), you have several computers linked together combining their power to run complex processes. This is how HPC works: it uses multiple computers working together to solve very large computations much faster than a single personal computer could. Marbec HPC is composed of two systems: <code>marbec-data</code> (a Network File System or NFS) and <code>marbec-gpu</code> (a compute cluster).</p>
<p><strong>An NFS</strong> is a network protocol that allows multiple devices connected to a network to share files and directories. This allows researchers to store input data, codes and results, but with the advantage of having a centralized backup and the ability to access their files from any machine connected to the cluster. In very simple words and going back to the analogy with your current PC, <code>marbec-data</code> takes the place of the storage (i.e.&nbsp;the hard disk) in the HPC. On the other hand, a <strong>compute cluster</strong> is, in essence, a set of interconnected computational elements working in a coordinated manner to execute complex computational processes. Within the analogy of your current PC, <code>marbec-gpu</code> equates to: your main processor (CPU), your graphics processor (GPU), general RAM and video RAM. Of course, with these simplifications we are leaving out some important details that we will explain in depth as we need to.</p>
</section>
<section id="power-of-marbec-gpu" class="level2">
<h2 data-anchor-id="power-of-marbec-gpu">Power of <code>marbec-gpu</code></h2>
<p>Up to October 2024, <code>marbec-gpu</code> has:</p>
<ul>
<li>CPU: 4 x <span class="citation" data-cites="2.30GHz">[Intel(R) Xeon(R) Platinum 8380 @2.30GHz, 40 physical cores, 80 logical cores]</span></li>
<li>RAM: 1.5 TB DDR4</li>
<li>GPU: 2 x [NVIDIA A40, 48 GB ECC GDDR6 RAM, 10‚Äô752 CUDA cores, 336 tensor cores, 696 GB/s bandwidth]</li>
</ul>
</section>
<section id="how-to-access-marbec-data" class="level2">
<h2 data-anchor-id="how-to-access-marbec-data">How to access marbec-data?</h2>
<p>This will depend on what we need to do. If we just want to take a quick look at the files and review aspects of our account, we just open a browser window and go to the address <a href="https://marbec-data.ird.fr/" class="uri">https://marbec-data.ird.fr/</a>. This will open a login interface where we just need to enter our credentials (provided by the <code>marbec-gpu</code> administrators).</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-380148957.png" class="img-fluid"></p>
<p>Once inside, we will see a sort of desktop where we will see a couple of icons to access our shared directories and general documentation on the use of the platform.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-3953217027.png" class="img-fluid"></p>
</section>
<section id="how-to-change-our-password-in-marbec-data" class="level2">
<h2 data-anchor-id="how-to-change-our-password-in-marbec-data">¬øHow to change our password in <code>marbec-data</code>?</h2>
<p>We will start by clicking on the user options icon (the one that looks like a little person) at the top right of the desktop and selecting the <strong>Personal</strong> option.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-1332799177.png" class="img-fluid"></p>
<p>A small window will open where in the first tab shown (<strong>Account</strong>), we will have access to <strong>Change password</strong> option. Likewise, in the <strong>Display Preferences</strong> tab, we will be able to change aspects such as the interface language or the desktop image and colors.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-222437051.png" class="img-fluid"></p>
</section>
<section id="check-our-available-space-in-marbec-data." class="level2">
<h2 data-anchor-id="check-our-available-space-in-marbec-data.">Check our available space in <code>marbec-data</code>.</h2>
<p>From the same <strong>Personal</strong> window seen in the previous section, in the <strong>Quota</strong> tab we will be able to verify the storage limit assigned to our user and what has been used so far in each of the folders associated to our user. This is a simple and graphic way to visualize the available space we have left. If at any time we need more space, just request it by e-mail to the <code>marbec-data</code> administrators.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-2171152553.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>If at any time during the execution of a process the allocated quota limit is reached, the system will block any attempt to save files and this will result in the unplanned termination of the process or errors related to disk write problems.</p>
</div>
</div>
</section>
<section id="how-to-manage-files-inside-marbec-data-or-between-marbec-data-and-our-pc" class="level2">
<h2 data-anchor-id="how-to-manage-files-inside-marbec-data-or-between-marbec-data-and-our-pc">How to manage files inside <code>marbec-data</code> or between <code>marbec-data</code> and our PC?</h2>
<p>We have a <a href="https://luislaum.github.io/blog/marbec-data-manage-files/marbec-data-manage-files.html">post</a> where we develop this point in more detail.</p>
</section>
<section id="how-to-access-marbec-gpu" class="level2">
<h2 data-anchor-id="how-to-access-marbec-gpu">How to access <code>marbec-gpu</code>?</h2>
<p>The easiest way to access <code>marbec-gpu</code> is through a browser using the JupyterLab environment. To do this, just open a browser (Chrome, Firefox, Brave, etc.) window and go to <a href="https://marbec-gpu.ird.fr/" class="uri">https://marbec-gpu.ird.fr/</a>. A window will appear to enter our credentials (NOTE: They are not necessarily the same as those of <code>marbec-data</code>) and then click on the <strong>Start my server</strong> button. Next, a drop-down menu will appear where we will be able to choose different default configurations of computing power for our session.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-1569546190.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Although we indicated a moment ago that marbec-gpu has a good amount of CPUs, GPUs and RAM, this represents 100% of its absolute power and <code>marbec-gpu</code> is a shared service, so it is not possible (allowed) for a single user to monopolize 100% of its capacity. That is why the first choice will consist of deciding what is the power we require for our process. For example, if we want to run an automated process of downloading satellite information, it will be enough to reserve 1 CPU and 2GB of RAM. On the other hand, if our script is only configured (and tested) to use CPU cores, it will not be necessary to reserve those configurations that include GPU. Remember that if you select a very powerful option that you will not take advantage of, it will not be available for someone else who might really need it (choose wisely).</p>
</div>
</div>
<p>After selecting (and reserving) the resources for our session and clicking <strong>Start</strong>, a window with the JupyterLab Launcher will appear. In it, we will be able to see the different preinstalled and available applications. The main one will be the <strong>Terminal</strong>, which is the one we will use to launch (execute) our processes (scripts).</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-1563571514.png" class="img-fluid"></p>
</section>
<section id="change-password-in-marbec-gpu." class="level2">
<h2 data-anchor-id="change-password-in-marbec-gpu.">Change password in <code>marbec-gpu</code>.</h2>
<p>From the previous step, we will start by opening a <strong>Terminal</strong> window (by clicking on the corresponding icon) and the window that opens we will type the command <code>passwd</code> (and then <em>Enter</em>). Next, we will be prompted to type our current and new passwords. <strong>By default and for security, during the password change process NO cursor is displayed while typing, so it may appear that our keyboard is not working, but this is not the case. You type normally</strong>.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>It is very important to define strong passwords (alphanumeric with symbols and uppercase-case) and preferably different passwords for the login in <code>marbec-data</code> and <code>marbec-gpu</code>. On the other hand, the JupyterLab environment DOES allow the use of classic shortcuts like <code>Ctrl+C</code>-<code>Ctrl+V</code> (or <code>Cmd+C</code>-<code>Cmd+V</code> in MacOS) to copy-paste character strings, so it is possible to use them during the password change process with the <code>passwd</code> command.</p>
</div>
</div>
</section>
<section id="how-to-run-a-process-on-marbec-gpu" class="level2">
<h2 data-anchor-id="how-to-run-a-process-on-marbec-gpu">How to run a process on <code>marbec-gpu</code>?</h2>
<p>We have a <a href="https://luislaum.github.io/blog/marbec-gpu-run-process/marbec-gpu-run-process.html">post</a> where we develop this point in more detail.</p>
</section>
</section>
<section id="es-introducci√≥n-a-marbec-data-y-marbec-gpu" class="level1">
<h1>[ES] Introducci√≥n a <code>marbec-data</code> y <code>marbec-gpu</code></h1>
<section id="qu√©-son-son-lo-mismo" class="level2">
<h2 data-anchor-id="qu√©-son-son-lo-mismo">¬øQu√© son? ¬øSon lo mismo?</h2>
<p>No.&nbsp;<code>marbec-data</code> y <code>marbec-gpu</code> componen un Sistema de c√≥mputo de alto rendimiento (<em>High-performance computing</em>). (Muy) B√°sicamente, es como tener una supercomputadora a tu disposici√≥n para resolver problemas complejos. Imagina que, en lugar de tener un √∫nico procesador (Intel/AMD) trabajando en conjunto con la RAM y el espacio de almacenamiento de √∫nicamente tu computadora (e.g.&nbsp;tu laptop), tienes a varias computadoras unidas entre s√≠ combinando su potencia para ejecutar procesos complejos. As√≠ es como funciona un HPC: utiliza m√∫ltiples computadoras trabajando juntas para resolver c√°lculos muy grandes mucho m√°s r√°pido de lo que una sola computadora personal podr√≠a hacerlo. El HPC de Marbec se compone de dos sistemas: <code>marbec-data</code> (un sistema de almacenamiento distribuido o NFS por las siglas en ingl√©s de <em>Network File System</em>) y <code>marbec-gpu</code>(un cl√∫ster de c√≥mputo).</p>
<p><strong>Un NFS</strong> es un protocolo de red que permite a m√∫ltiples dispositivos conectados a una red compartir archivos y directorios. Esto permite a los investigadores el almacenamiento de los datos de entrada, c√≥digos y resultados, pero con la ventaja de tener una copia de seguridad centralizada y la posibilidad de acceder a sus archivos desde cualquier m√°quina conectada al cl√∫ster. En palabras muy simples y volviendo a la analog√≠a con tu actual PC, <code>marbec-data</code> hace las veces del almacenamiento (i.e.&nbsp;del disco duro) en el HPC. Por otro lado, un <strong>cl√∫ster de c√≥mputo</strong> es, en esencia, un conjunto de elementos de c√≥mputo interconectados que trabajan de forma coordinada para ejecutar procesos computacionales complejos. Dentro de la analog√≠a de tu PC actual, <code>marbec-gpu</code> equivale a: tu procesador principal (CPU), tu procesador de gr√°ficos (GPU), la RAM general y la de v√≠deo. Por supuesto, con estas simplificaciones estamos obviando algunos detalles importantes que iremos explicando a profundidad conforme lo necesitemos.</p>
</section>
<section id="potencia-de-marbec-gpu" class="level2">
<h2 data-anchor-id="potencia-de-marbec-gpu">Potencia de <code>marbec-gpu</code></h2>
<p>A octubre 2024, <code>marbec-gpu</code> cuenta con:</p>
<ul>
<li>CPU: 4 x <span class="citation" data-cites="2.30GHz">[Intel(R) Xeon(R) Platinum 8380 @2.30GHz, 40 physical cores, 80 logical cores]</span></li>
<li>RAM: 1.5 TB DDR4</li>
<li>GPU: 2 x [NVIDIA A40, 48 GB ECC GDDR6 RAM, 10‚Äô752 CUDA cores, 336 tensor cores, 696 GB/s bandwidth]</li>
</ul>
</section>
<section id="c√≥mo-acceder-a-marbec-data" class="level2">
<h2 data-anchor-id="c√≥mo-acceder-a-marbec-data">¬øC√≥mo acceder a <code>marbec-data</code>?</h2>
<p>Esto depender√° de lo que necesitemos hacer. Si √∫nicamente queremos echar un vistazo r√°pido a los archivos y revisar aspectos de nuestra cuenta, bastar√° con abrir una ventana de navegador e ir a la direcci√≥n <a href="https://marbec-data.ird.fr/" class="uri">https://marbec-data.ird.fr/</a>. Se abrir√° una interfaz de logueo en donde bastar√° con colocar nuestras credenciales de acceso (brindadas por los administradores de <code>marbec-gpu</code>).</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-380148957.png" class="img-fluid"></p>
<p>Una vez adentro, veremos una interfaz similar a un escritorio en donde se mostrar√° un par de √≠conos de acceso a nuestros directorios compartidos y a documentaci√≥n general de uso de la plataforma.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-3953217027.png" class="img-fluid"></p>
</section>
<section id="c√≥mo-cambiar-nuestra-contrase√±a-de-marbec-data" class="level2">
<h2 data-anchor-id="c√≥mo-cambiar-nuestra-contrase√±a-de-marbec-data">¬øC√≥mo cambiar nuestra contrase√±a de <code>marbec-data</code>?</h2>
<p>Empezaremos con un click sobre el √≠cono de opciones de usuario (el que parece una personita que se halla arriba a la derecha) y seleccionaremos la opci√≥n <strong>Personal</strong>.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-1332799177.png" class="img-fluid"></p>
<p>Se abrir√° una peque√±a ventana en donde en la primera pesta√±a mostrada (<strong>Account</strong>), tendremos acceso a cambiar nuestra contrase√±a (<strong>Change password</strong>). As√≠ mismo, en la pesta√±a <strong>Display Preferences</strong>, podremos cambiar aspectos como el idioma de la interfaz o la imagen de escritorio y los colores.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-222437051.png" class="img-fluid"></p>
</section>
<section id="verificar-el-espacio-disponible-en-marbec-data" class="level2">
<h2 data-anchor-id="verificar-el-espacio-disponible-en-marbec-data">Verificar el espacio disponible en <code>marbec-data</code></h2>
<p>Desde la misma ventana de <strong>Personal</strong> vista en la secci√≥n anterior, en la pesta√±a <strong>Quota</strong> podremos verificar el l√≠mite de almacenamiento asignado a nuestro usuario y lo utilizado hasta el momento en cada una de las carpetas asociadas a nuestro usuario. Esta es una manera sencilla y gr√°fica de visualizar el espacio disponible que nos queda. Si en alg√∫n momento necesitamos de m√°s espacio, basta con solicitarlo por e-mail a los administradores de <code>marbec-data</code>.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-2171152553.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Si en alg√∫n momento durante la ejecuci√≥n de un proceso se alcanza el l√≠mite de la cuota asignada, el sistema bloquear√° cualquier intento de guardado de archivos y esto dar√° lugar a la finalizaci√≥n imprevista del proceso o a errores relacionados a problemas de escritura en disco.</p>
</div>
</div>
</section>
<section id="c√≥mo-manejar-archivos-dentro-de-marbec-data-o-entre-marbec-data-y-nuestra-pc" class="level2">
<h2 data-anchor-id="c√≥mo-manejar-archivos-dentro-de-marbec-data-o-entre-marbec-data-y-nuestra-pc">¬øC√≥mo manejar archivos dentro de <code>marbec-data</code> o entre <code>marbec-data</code> y nuestra PC?</h2>
<p>Tenemos un <a href="https://luislaum.github.io/blog/marbec-data-manage-files/marbec-data-manage-files.html">post</a> en donde desarrollamos m√°s a detalle este punto.</p>
</section>
<section id="c√≥mo-acceder-a-marbec-gpu" class="level2">
<h2 data-anchor-id="c√≥mo-acceder-a-marbec-gpu">¬øC√≥mo acceder a <code>marbec-gpu</code>?</h2>
<p>La manera m√°s sencilla de acceder a <code>marbec-gpu</code> es a trav√©s de un navegador utilizando el entorno de JupyterLab. Para esto, bastar√° con abrir una ventana de navegador (Chrome, Firefox, Brave, etc.) e ir a la direcci√≥n <a href="https://marbec-gpu.ird.fr/" class="uri">https://marbec-gpu.ird.fr/</a>. Se mostrar√° una ventana para ingresar nuestras credenciales (<strong>OJO: No necesariamente son las mismas que las de <code>marbec-data</code></strong>) y posteriormente daremos click al bot√≥n de <strong>Start my server</strong>. A continuaci√≥n, se mostrar√° un men√∫ desplegable en donde podremos elegir diferentes configuraciones predeterminadas de potencia de c√°lculo para nuestra sesi√≥n.</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-1569546190.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Si bien, hace un momento indicamos que <code>marbec-gpu</code> dispone de una buena cantidad CPUs, GPUs y RAM, eso representa el 100% de su potencia absoluta y <code>marbec-gpu</code> es un servicio compartido, por lo que no es posible (permitido) que un solo usuario pueda acaparar el 100% de su capacidad. Es por ello que la primera elecci√≥n consistir√° en decidir cu√°l es la potencia que requerimos para nuestro proceso. Por ejemplo, si lo que deseamos es ejecutar un proceso de automatizado de descarga de informaci√≥n satelital, bastar√° con reservar 1 CPU y 2GB de RAM. De otro modo, si nuestro script solo est√° configurado (y probado) para utilizar n√∫cleos de CPU, no es necesario reservar aquellas configuraciones que incluyan GPUs. Recuerda que si seleccionas una opci√≥n muy potente que no aprovechar√°s, no estar√° disponible para alguien m√°s que s√≠ podr√≠a necesitarla realmente (elige sabiamente).</p>
</div>
</div>
<p>Luego de haber seleccionado (y reservado) los recursos para nuestra sesi√≥n y haberle dado click a <strong>Start</strong>, se nos mostrar√° una ventana con el Launcher de JupyterLab. En ella, podremos observar los distintos aplicativos preinstalados y disponibles. El principal de todos ser√° el de <strong>Terminal</strong>, que es con el que lanzaremos (ejecutaremos) nuestros procesos (scripts).</p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-1563571514.png" class="img-fluid"></p>
</section>
<section id="cambiar-contrase√±a-en-marbec-gpu" class="level2">
<h2 data-anchor-id="cambiar-contrase√±a-en-marbec-gpu">Cambiar contrase√±a en <code>marbec-gpu</code></h2>
<p>A partir del paso anterior, empezaremos por abrir una ventana de <strong>Terminal</strong> (d√°ndole click al √≠cono correspondiente) y la ventana que se abre escribiremos el comando <code>passwd</code> (y luego <em>Enter</em>). A continuaci√≥n, nos solicitar√° que escribamos nuestra contrase√±a actual y la nueva. <strong>OJO: por defecto y por seguridad, durante el proceso de cambio de contrase√±a NO se muestra ning√∫n cursor mientras se escribe, por lo que podr√≠a parecer que nuestro teclado no est√° funcionando, pero esto no es as√≠. Usted escriba con normalidad.</strong></p>
<p><img src="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/images/clipboard-1563571515.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Es muy importante que se defina contrase√±as seguras (alfanum√©ricas con s√≠mbolos y may√∫sculas-min√∫sculas) y de preferencia distintas para el inicio de sesi√≥n en <code>marbec-data</code> y <code>marbec-gpu</code>. Por otro lado, el entorno de JupyterLab S√ç permite el uso de shortcuts cl√°sicos como <code>Ctrl+C</code>-<code>Ctrl+V</code> (o <code>Cmd+C</code>-<code>Cmd+V</code> en MacOS) para copiar-pegar cadenas de carcateres, por lo que es posible utilizarlos durante el proceso de cambio de contrase√±a con el comando <code>passwd</code>.</p>
</div>
</div>
</section>
<section id="c√≥mo-ejecutar-un-proceso-en-marbec-gpu" class="level2">
<h2 data-anchor-id="c√≥mo-ejecutar-un-proceso-en-marbec-gpu">¬øC√≥mo ejecutar un proceso en <code>marbec-gpu</code>?</h2>
<p>Tenemos un <a href="https://luislaum.github.io/blog/marbec-gpu-run-process/marbec-gpu-run-process.html">post</a> en donde desarrollamos m√°s a detalle este punto.</p>


</section>
</section>
 ]]></description>
  <guid>https://luislaum.github.io/home/blog/marbec-data-gpu-intro/marbec-data-gpu-intro.html</guid>
  <pubDate>Mon, 21 Oct 2024 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/marbec-data-gpu-intro/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title></title>
  <link>https://luislaum.github.io/home/blog/elnino-app/elnino-app.html</link>
  <description><![CDATA[ undefined ]]></description>
  <guid>https://luislaum.github.io/home/blog/elnino-app/elnino-app.html</guid>
  <pubDate>Sat, 20 Apr 2024 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/elnino-app/elnino-explain1.png" medium="image" type="image/png" height="288" width="144"/>
</item>
<item>
  <title>Developing Beneath the surface</title>
  <link>https://luislaum.github.io/home/blog/about-this-website/about-this-website.html</link>
  <description><![CDATA[ 

<section id="en-developing-beneath-the-surface" class="level1">
<h1>[EN] Developing ‚ÄòBeneath the surface üåä‚Äô</h1>
<section id="the-idea" class="level2">
<h2 data-anchor-id="the-idea">The idea</h2>
<p>The first thing that came to mind was ‚Äúhow can I develop a page that I can leave as a reference for those who want to contact me in a professional setting?‚Äù and ‚Äúthrough what medium can I share those ideas, small works or personal experiences that I believe could be useful for other professionals in my field?‚Äù. Well, there are many options around (social media, podcasts, TikTok, etc.). This first decision was not difficult, as I am not particularly characterized by my charisma on social networks, so I decided to opt for writing a blog. However, here the decision-making process did get a bit complicated, as there are many platforms available: <a href="https://wordpress.com/">Wordpress</a>, <a href="https://www.netlify.com/">Netlify</a>, <a href="https://docs.gitlab.com/ee/user/project/pages/">Gitlab pages</a>, <a href="https://medium.com/">Medium</a>, among <a href="https://stackshare.io/github-pages/alternatives">others</a>. Each one offers different advantages and potential, but my decision was based above all on the familiarity of use of the Github and Quarto platforms. I decided on Github pages.</p>
</section>
<section id="github-pages" class="level2">
<h2 data-anchor-id="github-pages">Github pages</h2>
<p>Github Pages is a free static website hosting service that allows you to publish HTML content directly from a GitHub repository. This platform offers multiple advantages:</p>
<ul>
<li><p><strong>It‚Äôs free!</strong>: You don‚Äôt need to pay for a web hosting service, just have a (free) GitHub account.</p></li>
<li><p><strong>Easy to use</strong>: Uploading your HTML, CSS, and JavaScript files to GitHub is very simple.</p></li>
<li><p><strong>Direct integration with GitHub</strong>: This becomes VERY important if you already use GitHub (as was my case) for your code projects.</p></li>
<li><p><strong>Versioning</strong>: GitHub Pages keeps a history of all the changes you make to your website, so if something goes wrong you can always go back to a previous version of your repository (page).</p></li>
<li><p><strong>Secure</strong>: GitHub Pages uses HTTPS to protect your website.</p></li>
<li><p><strong>Fast</strong>: For a few years now, Microsoft has bought GitHub and therefore its services use an extensive global network of servers to deliver your website to users around the world.</p></li>
<li><p><strong>Scalable</strong>: GitHub Pages can handle any amount of traffic, so your website can grow smoothly. Although a personal/professional blog is not expected to have very high traffic peaks, it is always good to know that this support exists.</p></li>
<li><p><strong>SEO optimized</strong>: GitHub Pages is optimized for search engines, which will help your website appear in the results of major web search engines.</p></li>
</ul>
<p>In the end, Github pages was the hosting option that I found most attractive. However, there are multiple ways to upload content, from different development platforms that involve the use of programming languages (e.g.&nbsp;Javascript) or markup, such as markdown or Quarto. Once again, my historical experience weighed more and I decided to use Quarto.</p>
</section>
<section id="quarto" class="level2">
<h2 data-anchor-id="quarto">Quarto</h2>
<p>Quarto is an open-source scientific document publishing platform developed by the POSIT (formerly RStudio) team. It is based on the R Markdown format and extends it with new features and functionalities to create richer and more interactive documents. It implements a more powerful preprocessing system than R Markdown and supports additional programming languages such as Python and Julia, expanding the possibilities for analysis and visualization.</p>
<p>For the past few years, I have been using Quarto not only for writing simple R reports, but also for the complete composition of scientific articles (one of them with a format submitted directly from the .docx output obtained in Quarto), as well as the development of interactive websites through the <a href="https://quarto.org/docs/interactive/shiny/">Quarto-Shiny</a> duo.</p>
</section>
<section id="the-content" class="level2">
<h2 data-anchor-id="the-content">The content</h2>
<p>I Didn‚Äôt Have to Start from Scratch. Fortunately, there are many resources available online, but I will briefly summarize the main links I used:</p>
<ul>
<li><em>Create the website hosted on Github pages, prepare it for content management with Quarto and to work from RStudio</em>: The first steps to follow are very well explained in the video by Melissa Van Bussel <a href="https://youtu.be/arzBRW5XIkg?feature=shared">(link)</a>. Highly recommended, although it assumes that we know how to handle Git-bash and that we have a token well configured for our PC. I will put these last details at the end of this article.</li>
</ul>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/arzBRW5XIkg?feature=shared" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<ul>
<li><p><em>Establish an outline of what we are going to publish</em>: Once we have successfully configured our website, it is time to take pen and paper and outline what content we want to share and what the logic will be for organizing that content into sections. While this part is very personal, since it will not be the same to diagram a page that only aims to serve as a professional reference (that is, an interactive resume) to that of a freelancer who wants to show their main projects and/or services offered, you don‚Äôt need to start from scratch either. You can review examples of pages from other creators (researchers, reporters, bloggers, graphic artists, etc.) and be inspired by their designs. Also, you can review examples of page structures that use Github pages <a href="https://jekyllthemes.io/free">(link)</a>. Remember, everything must ALWAYS start with the type of content you plan to place.</p></li>
<li><p><em>Start writing</em>: OK, this is not a scientific article and there is much more freedom to fill in the different sections; however, always remember to take into account the basic writing criteria (from general to specific), be clear and careful when choosing the type of language (based on the type of audience you expect to read you) and, once again, review examples. Of course, these days AI text generation platforms can be of great help, but we should not delegate the entire burden (i.e.&nbsp;no copy-paste) to them without first reading and corroborating the information they return to us. At this point, the following articles were very useful to me:</p>
<ul>
<li><p>Create your website with Quarto: complete tutorial and template link: https://www.marvinschmitt.com/blog/website-tutorial-quarto/.</p></li>
<li><p>Creating your personal website with Quarto link: https://ucsb-meds.github.io/creating-quarto-websites/.</p></li>
<li><p>Creating a website link: https://quarto.org/docs/websites/.</p></li>
</ul></li>
<li><p><em>Establish an order</em>: Once we have finished and published a first article, everything will be simpler in technical terms since you will discover that there are multiple reference sources available.</p></li>
</ul>
</section>
</section>
<section id="es-desarrollando-beneath-the-surface" class="level1">
<h1>[ES] Desarrollando ‚ÄòBeneath the surface üåä‚Äô</h1>
<section id="la-idea" class="level2">
<h2 data-anchor-id="la-idea">La idea</h2>
<p>Lo primero que lleg√≥ a mi mente fue ¬´¬øde qu√© manera puedo desarrollar una p√°gina en que pueda dejar como referencia para aquellos que quisieran contactar conmigo en un ambiente profesional?¬ª y ¬´¬ødesde qu√© medio puedo compartir aquellas ideas, peque√±os trabajos o experiencias personales que creo que podr√≠an resultar de utilidad para otros profesionales en mi rubro?¬ª. Bueno, existen muchas opciones alrededor (redes sociales, podcast, TikTok, etc.). Esta primera decisi√≥n no fue dif√≠cil, pues no me caracterizo particularmente por mi carisma en redes, as√≠ que decid√≠ optar por escribir un blog. Sin embargo, aqu√≠ la toma de decisiones s√≠ se complic√≥ un poco, pues existen muchas plataformas disponibles: <a href="https://wordpress.com/">Wordpress</a>, <a href="https://www.netlify.com/">Netlify</a>, <a href="https://docs.gitlab.com/ee/user/project/pages/">Gitlab pages</a>, <a href="https://medium.com/">Medium</a>, entre <a href="https://stackshare.io/github-pages/alternatives">others</a>. Cada una plantea ventajas y potencialidades distintas, pero mi decisi√≥n se bas√≥ sobre todo en la familiaridad de uso de las plataformas <a href="https://github.com/">Github</a> y <a href="https://quarto.org/">Quarto</a>. Me decid√≠ por <a href="https://pages.github.com/">Github pages</a>.</p>
</section>
<section id="github-pages-1" class="level2">
<h2 data-anchor-id="github-pages-1">Github pages</h2>
<p>Github pages es un servicio gratuito de alojamiento de sitios web est√°ticos que permite publicar contenido HTML directamente desde un repositorio de GitHub. Esta plataforma ofrece m√∫ltiples ventajas:</p>
<ul>
<li><p><strong>Gratuito</strong>: No necesitas pagar por un servicio de alojamiento web, solo tener una cuenta de GitHub (gratuita).</p></li>
<li><p><strong>F√°cil de usar</strong>: Subir tus archivos HTML, CSS y JavaScript a GitHub es muy sencillo.</p></li>
<li><p><strong>Integraci√≥n directa con GitHub</strong>: Esto se hace MUY importante si ya usas GitHub (como fue mi caso) para tus proyectos de c√≥digo.</p></li>
<li><p><strong>Versionado</strong>: GitHub Pages guarda un historial de todos los cambios que realices en tu sitio web, por lo que si algo sale mal siempre puedes volver a una versi√≥n anterior de tu repositorio (p√°gina).</p></li>
<li><p><strong>Seguro</strong>: GitHub Pages utiliza HTTPS para proteger tu sitio web.</p></li>
<li><p><strong>R√°pido</strong>: Desde hace unos a√±os, Microsoft compr√≥ GitHub y por tanto sus servicios utilizan una extensa red global de servidores para entregar tu sitio web a los usuarios de todo el mundo.</p></li>
<li><p><strong>Escalable</strong>: GitHub Pages puede manejar cualquier cantidad de tr√°fico, por lo que tu sitio web puede crecer sin problemas. Aunque de un blog personal/profesional no se espera tener picos de tr√°fico muy altos, siempre es bueno saber que existe este respaldo.</p></li>
<li><p><strong>Optimizado para SEO</strong>: GitHub Pages est√° optimizado para los motores de b√∫squeda, lo que ayudar√° a que nuestro sitio web aparezca en los resultados de los principales buscadores web.</p></li>
</ul>
<p>Al final, Github pages fue la opci√≥n de alojamiento que me result√≥ m√°s atractiva. Sin embargo, existen m√∫ltiples maneras de subir contenido, desde diferentes plataformas de desarrollo que involucran el uso de lenguajes de programaci√≥n (e.g.&nbsp;Javascript) o de marcado, como markdown o Quarto. Una vez m√°s, mi experiencia hist√≥rica pes√≥ m√°s y me decant√© por el uso de Quarto.</p>
</section>
<section id="quarto-1" class="level2">
<h2 data-anchor-id="quarto-1">Quarto</h2>
<p>Quarto es una plataforma de publicaci√≥n de documentos cient√≠ficos de c√≥digo abierto desarrollada por el equipo de POSIT (ex RStudio). Se basa en el formato R Markdown y lo ampl√≠a con nuevas caracter√≠sticas y funcionalidades para crear documentos m√°s ricos e interactivos. Implementa un sistema de preprocesamiento m√°s potente que R Markdown y soporta lenguajes de programaci√≥n adicionales como Python y Julia, ampliando las posibilidades de an√°lisis y visualizaci√≥n.</p>
<p>Desde hace unos pocos a√±os, he venido utilizando Quarto no solo para la redacci√≥n de reportes sencillos en R, sino inclusive para la composici√≥n completa de art√≠culos cient√≠ficos (uno de ellos con formato sometido directamente desde la salida en .docx obtenida en Quarto), as√≠ como el desarrollo de webs interactivas a trav√©s de la dupla <a href="https://quarto.org/docs/interactive/shiny/">Quarto-Shiny</a>.</p>
</section>
<section id="el-contenido" class="level2">
<h2 data-anchor-id="el-contenido">El contenido</h2>
<p>No tuve que empezar desde cero. Afortunadamente, hay mucho material all√° afuera, pero resumir√© brevemente los principales links que utilic√©:</p>
<ul>
<li>Crear la website alojada en Github pages, preparaela para el manejo de contenido con Quarto y para trabajar desde RStudio: Los primeros pasos a seguir est√°n muy bien explicados en el v√≠deo de Melissa Van Bussel <a href="https://youtu.be/arzBRW5XIkg?feature=shared">(link)</a>. Muy recomendable, aunque parte bajo el supuesto de que conocemos c√≥mo manejar Git-bash y de que tenemos bien configurado un token para nuestra PC. Estos √∫ltimos detalles los colocar√© al final de este art√≠culo.</li>
</ul>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/arzBRW5XIkg?feature=shared" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<ul>
<li><p>Establecer un esquema de lo que vamos a publicar. Una vez que hayamos logrado configurar correctamente nuestra web, sigue el turno de tomar l√°piz y papel y esquematizar qu√© contenido deseamos compartir y cu√°l ser√° la l√≥gica para ordenar dicho contenido en secciones. Si bien esta parte es muy personal, ya que no ser√° lo mismo diagramar una p√°gina que solo tiene como objetivo servir de referencia profesional (es decir, un CV interactivo) a la de un <strong>freelancer</strong> que desea mostrar sus principales proyectos y/o servicios ofrecidos, no necesitas ir desde cero tampoco. Puedes revisar ejemplos de p√°ginas de otros creadores (investigadores, reporteros, bloggers, artistas gr√°ficos, etc.) e inspirarte en sus dise√±os. As√≠ tambi√©n, puedes revisar ejemplos de estructuras de p√°ginas que usan Github pages <a href="https://jekyllthemes.io/free">(link)</a>. Recuerda, todo debe partir SIEMPRE del tipo de contenido que planeas colocar.</p></li>
<li><p>Empezar a escribir. OK, esto no es un art√≠culo cient√≠fico y hay mucha m√°s libertad para rellenar las distintas secciones; no obstante, recuerda siempre tener en cuenta los criterios b√°sicos de redacci√≥n (de lo general a lo espec√≠fico), ser claro y cuidadoso al elegir el tipo de lenguaje (con base en el tipo de p√∫blico que esperas que te lea) y, una vez m√°s, revisar ejemplos. Por supuesto, en estos d√≠as las plataformas de IA para generaci√≥n de texto pueden resultar de gran ayuda, pero no debemos delegarles toda la carga (i.e.&nbsp;nada de copiar-pegar) sin antes leer corroborar la informaci√≥n que nos devuelven. En este punto, me fueron de mucha utilidad los siguientes art√≠culos:</p>
<ul>
<li><p>Crear tu website con Quarto: tutorial completo y plantilla <a href="https://www.marvinschmitt.com/blog/website-tutorial-quarto/">link</a>.</p></li>
<li><p>Creando tu website personal con Quarto <a href="https://ucsb-meds.github.io/creating-quarto-websites/">link</a>.</p></li>
<li><p>Creando un website <a href="https://quarto.org/docs/websites/">link</a>.</p></li>
</ul></li>
<li><p>Establecer un orden. Una vez que hayamos culminado y publicado un primer art√≠culo, todo ir√° siendo m√°s simple en t√©rminos t√©cnicos ya que descubrir√°s que existen m√∫ltiples fuentes de referencia disponibles.</p></li>
</ul>


</section>
</section>
 ]]></description>
  <guid>https://luislaum.github.io/home/blog/about-this-website/about-this-website.html</guid>
  <pubDate>Fri, 19 Apr 2024 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/about-this-website/banner.png" medium="image" type="image/png" height="77" width="144"/>
</item>
</channel>
</rss>
