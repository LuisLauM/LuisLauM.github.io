<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Beneath the surface üåä</title>
<link>https://luislaum.github.io/home/blog.html</link>
<atom:link href="https://luislaum.github.io/home/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://luislaum.github.io/home/blog-photo.jpg</url>
<title>Beneath the surface üåä</title>
<link>https://luislaum.github.io/home/blog.html</link>
</image>
<generator>quarto-1.8.24</generator>
<lastBuildDate>Wed, 30 Apr 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>My favorite tools from MS PowerToys</title>
  <link>https://luislaum.github.io/home/blog/powertoys-tools/powertoys-tools.html</link>
  <description><![CDATA[ 


<p>Image credits: <a href="https://winbuzzer.com/wp-content/uploads/2019/05/powertoys-logo.jpg">Winbuzzer</a></p>
<section id="en-main-tools-of-ms-powertoys" class="level1">
<h1>[EN] Main tools of MS PowerToys</h1>
<section id="what-the-powertoys-are" class="level2">
<h2 data-anchor-id="what-the-powertoys-are">What the PowerToys are?</h2>
<p>PowerToys is a collection of utilities developed by Microsoft for advanced Windows users, designed to improve productivity and personalization of the operating system. Among its tools are FancyZones for efficient window management, PowerRename for batch file renaming, and PowerToys Run, a fast application launcher. Its interface is intuitive, and being open source, it receives constant improvements from the community. Overall, PowerToys offers very useful features that optimize workflow without complicating the user experience.</p>
</section>
<section id="how-to-install-the-powertoys" class="level2">
<h2 data-anchor-id="how-to-install-the-powertoys">How to install the PowerToys?</h2>
<ul>
<li><p>Go to the <a href="https://github.com/microsoft/PowerToys/">official Github repo</a>.</p></li>
<li><p>Click on the <strong>Install PowerToys</strong> button and, in the right column, in the ‚ÄúReleases section‚Äù, click on the link shown (which corresponds to the latest version available).</p>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/01.png" class="img-fluid"></p></li>
<li><p>The web site that hosts the installers will open, select the appropriate one according to the architecture of our processor (x86 or ARM).</p>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/02.png" class="img-fluid"></p></li>
<li><p>After downloading the installer, run it and follow the instructions (Administrator permissions may be required).</p></li>
<li><p>Great. Now, to open it, just search for it through the start menu.</p>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/03.png" class="img-fluid"></p></li>
</ul>
</section>
<section id="favorite-tools" class="level2">
<h2 data-anchor-id="favorite-tools">Favorite Tools</h2>
<p>PowerToys has a huge catalog of tools and by default it will enable all of them after the first installation. However, it is possible to keep active only those that we are going to use frequently. From this control window we can configure each of the tools (keyboard shortcuts and specific parameters).</p>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/04.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>PowerToys is a software that includes EXPERIMENTAL tools, so it is always possible that they can be edited, deleted or, if they prove to be well received by users, included in the base versions of Windows.</p>
</div>
</div>
<p>In the following, I will show the tools I use the most.</p>
<section id="advanced-paste" class="level3">
<h3 data-anchor-id="advanced-paste">Advanced Paste</h3>
<p>When we copy text in Windows and paste it into software that allows formatting editing (e.g.&nbsp;Power Point, Word, or when composing an e-mail), it will try to keep the formatting of the original text, which is not always desired. Advanced Paste allows you to paste only the text WITHOUT its original formatting, allowing it to take the target formatting.</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="images/05.mp4"></video></div>
</section>
<section id="color-picker" class="level3">
<h3 data-anchor-id="color-picker">Color Picker</h3>
<p>Sometimes we want to find out the color of some element of a file (e.g.&nbsp;pdf, figure, Power Point file, etc.) or web site, to use it in a graphic (in R) or in the preparation of a slide show. This tool allows us to extract the color code of any element that we are observing on our screen and returns the corresponding codes.</p>
<ul>
<li><strong>Extract colors with Color Picker and use them in R.</strong> In this example, we see the basic interface of Color Picker. It is enough to activate it through the keyboard shortcut (by default, <code>+ Shift + C</code>) and from there to the side of our cursor will appear the color that we are pointing out. If we click on the chosen color, a small window will open showing us the code in HEX format that we can copy and paste directly into our script by prefixing the symbol <code>#</code> (e.g.).</li>
</ul>
<div class="quarto-video"><video id="video_shortcode_videojs_video2" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="images/06.mp4"></video></div>
<ul>
<li><strong>Extract colors with Color Picker and use them in PowerPoint.</strong> The dynamics is basically the same, although in this case an additional functionality is shown: if while we are looking for the color we use the scroll wheel of our mouse, Color Picker will zoom around where our cursor is, allowing us to select the color with greater precision.</li>
</ul>
<div class="quarto-video"><video id="video_shortcode_videojs_video3" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="images/07.mp4"></video></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If we activate Color Picker by mistake, just press the <code>Esc</code> key to exit its interface.</p>
</div>
</div>
</section>
<section id="keyboard-manager" class="level3">
<h3 data-anchor-id="keyboard-manager">Keyboard Manager</h3>
<p>Keyboard shortcuts help speed up our work, especially when using programs with multiple options available. Keyboard Manager allows you to set custom keyboard shortcuts: simple, but very useful. The shortcut I use the most is the context menu shortcut (i.e.&nbsp;the menu that opens when right-clicking), since <a href="https://www.keychron.com/products/keychron-k3-wireless-mechanical-keyboard">my keyboard</a> does not have a dedicated key for this purpose.</p>
<p>To assign a keyboard shortcut:</p>
<ul>
<li>Go to the corresponding tab in the PowerToys options, click on ‚ÄúRemap a shortcut‚Äù.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/08.png" class="img-fluid"></p>
<ul>
<li>In the interface that will appear, click on ‚ÄúAdd shortcut remapping‚Äù. A slot will be added where we can indicate the shortcut we want to configure.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/09.png" class="img-fluid"></p>
<ul>
<li>First, click on the pencil icon on the left. A small window will open asking us to press the key combination for the new shortcut.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/10.png" class="img-fluid"></p>
<ul>
<li>Then, we will define the action. It will show us 4 options: <strong>Send Key/Shortcut</strong> (used to reference a keyboard or mouse action), <strong>Send text</strong> (so that when the shortcut is pressed, a text we want is typed), <strong>Run Program</strong> (to run a program or application installed on our PC) and <strong>Open URI</strong> (to open a URL link).</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/11.png" class="img-fluid"></p>
<ul>
<li>In my case, I have defined two keyboard shortcuts: one that allows me to open the context menu (right click) in any environment and another one that allows me to insert the text <code>%in%</code> (only when I am in RStudio).</li>
</ul>
</section>
<section id="text-extractor" class="level3">
<h3 data-anchor-id="text-extractor">Text Extractor</h3>
<p>Ah, how many times have we needed to extract text from an image or from a website that doesn‚Äôt allow copying text? Well, <strong>Text Extractor</strong> does just that.</p>
<p>Its use is quite simple, just press the corresponding keyboard shortcut (by default, <code>+ Shift + T</code>) and the screen will darken a bit so that with our cursor we can drag a box around the text we want to extract.</p>
<p>Internally, this tool makes use of OCR (Optical Character Recognition, refers to tools for extracting text from an image) and requires the user to have the language pack of the text to be extracted installed. In other words, if I want to extract text in English, Spanish or French, I must first install the OCR packages for these languages.</p>
<p>To install a language pack we will have to:</p>
<ul>
<li>Open a PowerShell window in Administrator mode and execute the following command:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Get-WindowsCapability</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Online</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Where-Object</span> { <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$_</span>.Name <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Like</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Language.OCR*'</span> }</span></code></pre></div></div>
<p>This will show us all the available OCR packages. When we have found the one we are interested in, we must remember its code (e.g.&nbsp;<code>fr-FR</code> for French from France, <code>en-US</code> for English from the United States or <code>es-MX</code> for Spanish from Latin America).</p>
<ul>
<li>The next step is to execute the following command:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[Windows.Media.Ocr.OcrEngine,</span> Windows.Foundation, ContentType = WindowsRuntime]</span></code></pre></div></div>
<ul>
<li>Next, run the following command that will show you which packages are already installed on your PC:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[Windows.Media.Ocr.OcrEngine]::AvailableRecognizerLanguages</span></span></code></pre></div></div>
<ul>
<li>To install a new OCR package, run the following command, modifying the desired language code:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$Capability</span> = Get-WindowsCapability <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Online</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Where-Object</span> { <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$_</span>.Name <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Like</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Language.OCR*en-US*'</span> }</span></code></pre></div></div>
<ul>
<li>Finally, run the following command to start the download and installation of the selected language.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$Capability</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Add-WindowsCapability</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Online</span></span></code></pre></div></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Downloading and installing the OCR packages may take several minutes, so please be patient. Also, the installation of each OCR package must be done independently, i.e.&nbsp;one by one.</p>
</div>
</div>
<hr>
</section>
</section>
</section>
<section id="es-principales-herramientas-en-ms-powertoys" class="level1">
<h1>[ES] Principales herramientas en MS PowerToys</h1>
<section id="qu√©-son-las-powertoys" class="level2">
<h2 data-anchor-id="qu√©-son-las-powertoys">¬øQu√© son las PowerToys?</h2>
<p>PowerToys es una colecci√≥n de utilidades desarrollada por Microsoft para usuarios avanzados de Windows, dise√±ada para mejorar la productividad y personalizaci√≥n del sistema operativo. Entre sus herramientas destacan FancyZones para gestionar ventanas de forma eficiente, PowerRename para renombrar archivos en lote, y PowerToys Run, un lanzador r√°pido de aplicaciones. Su interfaz es intuitiva, y al ser de c√≥digo abierto, recibe mejoras constantes de la comunidad. En conjunto, PowerToys ofrece funcionalidades muy √∫tiles que optimizan el flujo de trabajo sin complicar la experiencia del usuario.</p>
</section>
<section id="c√≥mo-instalar-ms-powertoys" class="level2">
<h2 data-anchor-id="c√≥mo-instalar-ms-powertoys">¬øC√≥mo instalar MS PowerToys?</h2>
<ul>
<li><p>Ir al sitio web del <a href="https://github.com/microsoft/PowerToys/">repositorio de PowerToys en Github</a>.</p></li>
<li><p>Presionar el bot√≥n Install PowerToys y, en la columna de la derecha, en la secci√≥n ‚ÄúReleases‚Äù, dar click al link mostrado (que corresponde a la √∫ltima versi√≥n disponible).</p>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/01.png" class="img-fluid"></p></li>
<li><p>Se abrir√° el sitio web que aloja los instaladores, seleccionar el adecuado de acuerdo a la arquitectura de nuestro procesador (x86 o ARM).</p>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/02.png" class="img-fluid"></p></li>
<li><p>Luego de descargar el instalador, ejecutarlo y seguir las instrucciones (es posible que se requieran permisos de Administrador).</p></li>
<li><p>Genial. Ahora, para abrirlo, bastar√° con buscarlo a trav√©s del men√∫ inicio.</p>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/03.png" class="img-fluid"></p></li>
</ul>
</section>
<section id="herramientas-favoritas" class="level2">
<h2 data-anchor-id="herramientas-favoritas">Herramientas favoritas</h2>
<p>PowerToys tiene un cat√°logo enorme de herramientas y por defecto habilitar√° todas luego de la primera instalaci√≥n. Sin embargo, es posible mantener activas solo aquellas que vayamos a utilizar frecuentemente. Desde esta venta de control podemos configurar cada una de las herramientas (atajo de teclado y par√°metros espec√≠ficos).</p>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/04.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>PowerToys es un software que incluye herramientas de tipo EXPERIMENTAL, por lo que siempre es posible que sean editadas, borradas o, si demuestran una alta acogida por parte de los usuarios, incluidas en las versiones base de Windows.</p>
</div>
</div>
<p>A continuaci√≥n, mostrar√© las herramientas que yo m√°s uso.</p>
<section id="advanced-paste-1" class="level3">
<h3 data-anchor-id="advanced-paste-1">Advanced Paste</h3>
<p>Cuando copiamos un texto en Windows y lo pegamos en alg√∫n software que permite la edici√≥n de formato (e.g.&nbsp;Power Point, Word, o al redactar un correo electr√≥nico), √©ste intentar√° mantener el formato del texto original, lo cual no siempre es lo deseado. Advanced Paste permite pegar √∫nicamente el texto SIN su formato original, permitiendo que pueda tomar el formato de destino.</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video4" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="images/05.mp4"></video></div>
</section>
<section id="color-picker-1" class="level3">
<h3 data-anchor-id="color-picker-1">Color Picker</h3>
<p>Muchas veces queremos averiguar el color de alg√∫n elemento de alg√∫n archivo (e.g.&nbsp;pdf, figura, archivo en Power Point, etc.) o sitio web, para utilizarlo en un gr√°fico (en R) o en la preparaci√≥n de una dispositiva. Esta herramienta permite extraer el c√≥digo de color de cualquier elemento que estemos observando en nuestra pantalla y nos retorna los c√≥digos correspondientes.</p>
<ul>
<li><strong>Extraer colores con Color Picker y usarlos en R.</strong> En este ejemplo, vemos la interfaz b√°sica de Color Picker. Basta con activarlo a trav√©s del atajo de teclado (por defecto, <code>+ Shift + C</code>) y a partir de ah√≠ al costado de nuestro cursor aparecer√° el color que estemos se√±alando. Si damos click al color elegido, se abrir√° una ventana peque√±a mostr√°ndonos el c√≥digo en formato HEX que podemos copiar y pegar directamente en nuestro script anteponiendo el s√≠mbolo <code>#</code> (e.g.).</li>
</ul>
<div class="quarto-video"><video id="video_shortcode_videojs_video5" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="images/06.mp4"></video></div>
<ul>
<li><strong>Extraer colores con Color Picker y usarlos en Power Point.</strong> La din√°mica es b√°sicamente la misma, aunque en este caso se muestra una funcionalidad adicional: si mientras buscamos el color utilizamos la rueda de scroll de nuestro mouse, Color Picker har√° un zoom alrededor de donde est√° nuestro cursor, permiti√©ndonos seleccionar el color con mayor precisi√≥n.</li>
</ul>
<div class="quarto-video"><video id="video_shortcode_videojs_video6" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="images/07.mp4"></video></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Si por error activamos Color Picker, basta con presionar la tecla <code>Esc</code> para salir de su interfaz.</p>
</div>
</div>
</section>
<section id="keyboard-manager-1" class="level3">
<h3 data-anchor-id="keyboard-manager-1">Keyboard Manager</h3>
<p>Los atajos de teclado ayudan a agilizar nuestro trabajo, sobre todo cuando utilizamos programas con m√∫ltiples opciones disponibles. Keyboard Manager permite establecer atajos de teclado personalizados: simple, pero muy √∫til. El atajo que m√°s utilizo es el de men√∫ contextual (i.e.&nbsp;el men√∫ que se abre cuando presionamos click derecho), ya que <a href="https://www.keychron.com/products/keychron-k3-wireless-mechanical-keyboard">mi teclado</a> no tiene una tecla dedicada para este prop√≥sito.</p>
<p>Para asignar un atajo de teclado:</p>
<ul>
<li>Ir la pesta√±a correspondiente dentro de las opciones de PowerToys, dar click en ‚ÄúRemap a shortcut‚Äù.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/08.png" class="img-fluid"></p>
<ul>
<li>En la interfaz que se mostrar√°, dar click en ‚ÄúAdd shortcut remapping‚Äù. Se a√±adir√° un slot en donde podremos indicar el atajo que deseamos configurar.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/09.png" class="img-fluid"></p>
<ul>
<li>Primero, daremos click en el √≠cono de l√°piz a la izquierda. Se abrir√° una peque√±a ventana en donde nos pedir√° que presionemos la combinaci√≥n de teclas del nuevo atajo.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/10.png" class="img-fluid"></p>
<ul>
<li>Luego, definiremos la acci√≥n. Nos mostrar√° 4 opciones: <strong>Send Key/Shortcut</strong> (que sirve para referenciar una acci√≥n de teclado o mouse), <strong>Send text</strong> (para que cuando el atajo sea presionado, se escriba un texto que nosotro querramos), <strong>Run Program</strong> (para ejecutar un programa o aplicaci√≥n instalada en nuestra PC) y <strong>Open URI</strong> (para abrir un v√≠nculo URL).</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/powertoys-tools/images/11.png" class="img-fluid"></p>
<ul>
<li>En mi caso, tengo definidos dos atajos de teclado: uno que me permite abrir el men√∫ contextual (click derecho) en cualquier entorno y otro que me permite insertar el texto <code>%in%</code> (√∫nicamente cuando estoy en RStudio).</li>
</ul>
</section>
<section id="text-extractor-1" class="level3">
<h3 data-anchor-id="text-extractor-1">Text Extractor</h3>
<p>Ah, ¬øcu√°ntas veces hemos necesitado extraer el texto de alguna imagen o de alg√∫n sitio web que no permite copiar texto? Bueno, <strong>Text Extractor</strong> hace justamente eso.</p>
<p>Su uso es bastante sencillo, basta con presionar el atajo de teclado correspondiente (por defecto, <code>+ Shift + T</code>) y la pantalla se oscurecer√° un poco para que con nuestro cursor arrastremos un recuadro alrededor del texto que deseamos extraer.</p>
<p>Internamente, esta herramienta hace uso de OCR (Reconocimiento √ìptico de Caracteres, hace referencia a herramientas de extracci√≥n de texto a partir de una imagen) y requiere que el usuario tenga instalado el paquete de idioma del texto que desea extraer. En otras palabras, si deseo extraer texto en ingl√©s, espa√±ol o franc√©s, debo instalar previamente los paquetes de OCR para estos idiomas.</p>
<p>Para instalar un paquete de idiomas tendremos que:</p>
<ul>
<li>Abrir una ventana de PowerShell en modo Administrador y ejecutar el siguiente comando:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Get-WindowsCapability</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Online</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Where-Object</span> { <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$_</span>.Name <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Like</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Language.OCR*'</span> }</span></code></pre></div></div>
<p>Esto nos mostrar√° todos los paquetes OCR disponibles. Cuando hayamos encontrado el que nos interesa, debemos recordar su c√≥digo (e.g.&nbsp;<code>fr-FR</code> para franc√©s de Francia, <code>en-US</code> para ingl√©s de Estados Unidos o <code>es-MX</code> para espa√±ol de Latinoam√©rica).</p>
<ul>
<li>El siguiente paso ser√° ejecutar el siguiente comando:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[Windows.Media.Ocr.OcrEngine,</span> Windows.Foundation, ContentType = WindowsRuntime]</span></code></pre></div></div>
<ul>
<li>Seguidamente, ejecutar el siguiente comando que nos mostrar√° qu√© paquetes ya se encuentran instalados en nuestro PC:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[Windows.Media.Ocr.OcrEngine]::AvailableRecognizerLanguages</span></span></code></pre></div></div>
<ul>
<li>Para instalar un paquete OCR nuevo, ejecutaremos el siguiente comando, modificando el c√≥digo del idioma deseado:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$Capability</span> = Get-WindowsCapability <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Online</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Where-Object</span> { <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$_</span>.Name <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Like</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Language.OCR*en-US*'</span> }</span></code></pre></div></div>
<ul>
<li>Finalmente, ejecutaremos el siguiente comando para iniciar la descarga e instalaci√≥n del idioma seleccionado.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$Capability</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Add-WindowsCapability</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Online</span></span></code></pre></div></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>La descarga e instalaci√≥n de los paquetes OCR puede tomar varios minutos, seamos pacientes. As√≠ mismo, la instalaci√≥n de cada paquete OCR debe hacerse de forma independiente, i.e.&nbsp;uno por uno.</p>
</div>
</div>


</section>
</section>
</section>
 ]]></description>
  <category>Windows</category>
  <category>misc</category>
  <category>tips</category>
  <guid>https://luislaum.github.io/home/blog/powertoys-tools/powertoys-tools.html</guid>
  <pubDate>Wed, 30 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/powertoys-tools/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How to convert snippets from RStudio format to Positron format</title>
  <link>https://luislaum.github.io/home/blog/convert-snippets/convert-snippets.html</link>
  <description><![CDATA[ 


<p>Image credits: <a href="https://evbn.org/Types-of-Electrical-Plugs-Types-Uses-Features-and-Benefits-1677786008/">EVBN</a></p>
<section id="en-converting-snippets-from-rstudio-to-positron" class="level2">
<h2 data-anchor-id="en-converting-snippets-from-rstudio-to-positron">[EN] Converting snippets from RStudio to Positron</h2>
</section>
<section id="a-brief-introduction" class="level2">
<h2 data-anchor-id="a-brief-introduction">A brief introduction</h2>
<p>Positron is the latest IDE released by POSIT, the owner of the very famous RStudio IDE. While its developers are making great efforts to ease the transition for current RStudio users, there are some features that have not yet been implemented and one of them is the conversion of snippets.</p>
<p>Snippets in RStudio are a very powerful tool as they allow users to define chunks of code that they commonly use and make them available from a nickname. For example, to generate an empty plot centered on <code>c(1, 1)</code> using graphics, the complete command would be as follows:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb1-2">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> xlim, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> ylim)</span></code></pre></div></div>
<p>Of course, typing all those argument definitions can be a bit cumbersome, and that‚Äôs where the snippets show their potential, allowing me to associate all that command to a nickname (called <code>plo</code>, for example). Then, the next time I type the command <code>plo</code> and press Tab, RStudio prompts me to insert the <code>plo</code> snippet and, when I press Tab again, it generates the desired command.</p>
<p><img src="https://luislaum.github.io/home/blog/convert-snippets/images/screenshot-1.gif" class="img-fluid"></p>
<p>In RStudio, defining a snippet is very simple: just go to the menu Tools ‚Äì&gt; Edit code snippets and follow the established format for its definition which consists of: the command <code>snippet</code>, a nickname and the desired code. For example, the command to define my previous code would be the following:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">snippet plot</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> xlim, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> ylim)</span></code></pre></div></div>
<p>However, Positron uses a different format and allows us to add some extra fields: the name of the snippet, <code>scope</code> (refers to the language or context of the snippet), <code>prefix</code> (which is the hint with which we will call the snippet), <code>body</code> (the command itself, it can consist of one line or more), and <code>description</code> (a brief description of what our command does). So, taken to this format, our previous snippet would look like this:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb3-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"plo":</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scope"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"prefix"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plo"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"body"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot(x = 1, y = 1, type = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, axes = FALSE, xlab = NA, ylab = NA, xlim = xlim, ylim = ylim)"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">,</span></span></code></pre></div></div>
</section>
<section id="the-format-converter" class="level2">
<h2 data-anchor-id="the-format-converter">The format converter</h2>
<p>Well, to switch from one format to another, I have created a small Shinyapp where you just have to paste the full text of all our snippets in RStudio format, press the Convert button and get your version in jSON format. You can access the converter through <a href="https://luislaum.shinyapps.io/snippetConverter/">the following link</a>.</p>
<p>Then, you will have to go to Positron, press the key combination <code>Ctrl+Shift+P</code>, type <em>Configure snippets</em> and then select this option.</p>
<p><img src="https://luislaum.github.io/home/blog/convert-snippets/images/1.png" class="img-fluid"></p>
<p>In the same panel will be displayed several languages and platforms where it is possible to configure snippets, look for one called <code>r.json</code> and press Enter.</p>
<p><img src="https://luislaum.github.io/home/blog/convert-snippets/images/2.png" class="img-fluid"></p>
<p>Then, in the Editor, a json format file will be opened where we will paste what was obtained by the Shinyapp converter.</p>
<p>That‚Äôs it! From now on, when we need a snippet in Positron, just type the corresponding prefix, then press the Tab key, then navigate with the arrow keys to our desired snippet and press the Tab key to select it.</p>
<p><img src="https://luislaum.github.io/home/blog/convert-snippets/images/screenshot-2.gif" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Multi-line snippets
</div>
</div>
<div class="callout-body-container callout-body">
<p>So far, for multi-line snippets, Positron does not apply the proper indentation at the time of submission, so we will have to complete this process manually. Hopefully the POSIT team will be able to resolve this issue soon.</p>
</div>
</div>
<hr>
</section>
<section id="es-convertir-snippets-de-rstudio-a-positron" class="level1">
<h1>[ES] Convertir snippets de RStudio a Positron</h1>
<section id="una-breve-introducci√≥n" class="level2">
<h2 data-anchor-id="una-breve-introducci√≥n">Una breve introducci√≥n</h2>
<p>Positron es el √∫ltimo IDE lanzado por POSIT, la due√±a del tan famoso IDE RStudio. Si bien sus desarrolladores est√°n haciendo grandes esfuerzos para facilitar la transici√≥n por parte de los actuales usuarios de RStudio, existen algunas funcionalidades que a√∫n no ha sido implementadas y una de ellas es la de la conversi√≥n de los snippets.</p>
<p>Los snippets en RStudio son una herramienta muy poderosa ya que permite a los usuarios definir trozos de c√≥digo que suelen utilizar y hacerlos disponibles a partir de un nickname. Por ejemplo, para generar un plot vac√≠o centrado en <code>c(1, 1)</code> usando graphics, el comando completo ser√≠a el siguiente:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb4-2">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> xlim, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> ylim)</span></code></pre></div></div>
<p>Por supuesto, escribir todas esas definiciones de argumentos puede ser algo engorroso, y es ah√≠ en donde los snippets demuestran su potencial, permitiendo que yo pueda asociar todo ese comando a un nickname (llamado <code>plo</code>, por ejemplo). Entonces, la pr√≥xima vez que escriba el comando <code>plo</code> y presione la tecla Tab, RStudio me sugiere insertar el snippet <code>plo</code> y, al volver a presionar Tab, genera el comando deseado.</p>
<p><img src="https://luislaum.github.io/home/blog/convert-snippets/images/screenshot-1.gif" class="img-fluid"></p>
<p>En RStudio, definir un snippet es muy sencillo: basta con ir al men√∫ Tools ‚Äì&gt; Edit code snippets y seguir el formato establecido para su definici√≥n que consiste en: el comando <code>snippet</code>, un nickname y el c√≥digo deseado. Por ejemplo, el comando para definir mi anterior c√≥digo ser√≠a el siguiente:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">snippet plot</span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> xlim, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> ylim)</span></code></pre></div></div>
<p>Sin embargo, Positron utiliza un formato distinto y permite a√±adir algunos campos extra: el nombre del snippet, <code>scope</code> (hace referencia al lenguaje o contexto del snippet), <code>prefix</code> (que es la pista con la que llamaremos al snippet), <code>body</code> (el comando en s√≠, puede constar de una l√≠nea o m√°s), y <code>description</code> (una breve descripci√≥n de lo que nuestro comando hace). Entonces, llevado a este formato, nuestro anterior snippet lucir√≠a as√≠:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb6-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"plo":</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"scope"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"prefix"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plo"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"body"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot(x = 1, y = 1, type = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, axes = FALSE, xlab = NA, ylab = NA, xlim = xlim, ylim = ylim)"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">,</span></span></code></pre></div></div>
</section>
<section id="el-convertidor-de-formatos" class="level2">
<h2 data-anchor-id="el-convertidor-de-formatos">El convertidor de formatos</h2>
<p>Pues bien, para pasar de un formato a otro, he creado un peque√±o Shinyapp en donde basta con pegar el texto completo de todos nuestros snippets en formato RStudio, presionar el bot√≥n Convert y obtener lsu versi√≥n en formato jSON. Puedes acceder al convertidor a trav√©s del <a href="https://luislaum.shinyapps.io/snippetConverter/">siguiente link</a>.</p>
<p>Luego, deber√°s ir a Positron, presionar la combinaci√≥n de teclas <code>Ctrl+Shift+P</code>, escribir <em>Configure snippets</em> y luego seleccionar esta opci√≥n.</p>
<p><img src="https://luislaum.github.io/home/blog/convert-snippets/images/1.png" class="img-fluid"></p>
<p>En el mismo panel se mostrar√°n diversos lenguajes y plataformas en donde es posible configurar snippets, buscar uno llamado <code>r.json</code> y dar Enter.</p>
<p><img src="https://luislaum.github.io/home/blog/convert-snippets/images/2.png" class="img-fluid"></p>
<p>En seguida, en el Editor se abrir√° un archivo de formato json en donde pegaremos lo obtenido por el convertidor Shinyapp.</p>
<p>¬°Listo! Desde ahora, cuando necesitemos un snippet en Positron, bastar√° con digitar el prefijo correspondiente, luego la tecla Tab, luego navegar con las teclas direccionales a nuestro snippet deseado y tecla Tab para seleccionarlo.</p>
<p><img src="https://luislaum.github.io/home/blog/convert-snippets/images/screenshot-2.gif" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Snippets de varias l√≠neas
</div>
</div>
<div class="callout-body-container callout-body">
<p>Hasta el momento, para los snippets conformados por varias l√≠neas, al momento de presentarse Positron no aplica la sangr√≠a adecuada, por lo que tendremos que completar este proceso manualmente. Esperemos que el equipo de POSIT pueda resolver este detalle pronto.</p>
</div>
</div>


</section>
</section>
 ]]></description>
  <category>RStudio</category>
  <category>Positron</category>
  <category>tips</category>
  <category>ShinyApp</category>
  <guid>https://luislaum.github.io/home/blog/convert-snippets/convert-snippets.html</guid>
  <pubDate>Thu, 03 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/convert-snippets/banner.png" medium="image" type="image/png" height="128" width="144"/>
</item>
<item>
  <title>Drawing timeline (Gantt) diagrams in R</title>
  <link>https://luislaum.github.io/home/blog/timeline-with-googlevis/timeline-with-googlevis.html</link>
  <description><![CDATA[ 


<p>Image credits: Jussara Rom√£o at <a href="https://unsplash.com/photos/landscape-photography-of-orange-lights-3cM5Vw3UjaY?utm_content=creditShareLink&amp;utm_medium=referral&amp;utm_source=unsplash">Unplash</a></p>
<section id="en-drawing-timeline-diagrams-in-r" class="level1">
<h1>[EN] Drawing timeline diagrams in R</h1>
<p>A Gantt (timeline) diagram is a visual project management tool that organizes tasks on a timeline, showing their duration, start and end using horizontal bars. It is especially useful in writing research projects because it allows you to clearly plan and visualize key stages, such as literature review, data collection, analysis and writing, ensuring that deadlines are met. In addition, it helps to coordinate efforts among team members, identify possible overlaps or bottlenecks, and provide a reference for monitoring project progress.</p>
<p>While they are easy to understand, they are not necessarily easy to draw, especially if you want to maintain the proportions between periods and the length of each line:</p>
<ol type="1">
<li><p>We will start by building a table in MS Excel with the following columns: <code>n</code>, <code>group</code>, <code>activity</code>, <code>start</code> and <code>end</code>. The <code>n</code> column will be used to define the difference (or similarity) of colors between each element (line):</p>
<p><img src="https://luislaum.github.io/home/blog/timeline-with-googlevis/images/clipboard-3749268084.png" class="img-fluid"></p>
<p>The script will generate a graph for each sheet in the file.</p></li>
<li><p>Now we will move on to the script, where the first thing we will do is to make sure we have installed the <a href="https://cran.r-project.org/package=googleVis">googleVis</a>, <a href="https://cran.r-project.org/package=readxl">readxl</a> and <a href="https://cran.r-project.org/package=dplyr">dplyr</a> packages:</p></li>
</ol>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loading the packages</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(googleVis)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(readxl)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(dplyr)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read table with information of your activities</span></span>
<span id="cb1-7">inputFile <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_table.xlsx"</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the colors for each group (# of colors = # of groups) in HEX code</span></span>
<span id="cb1-10">cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mediumaquamarine"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkgoldenrod1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray40"</span>, </span>
<span id="cb1-11">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkslategray1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkseagreen1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightpink"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightpink"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mediumpurple2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-12">  </span>
<span id="cb1-13">  gplots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col2hex</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-14">  </span>
<span id="cb1-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-16">  </span>
<span id="cb1-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>()</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Size of diagram</span></span>
<span id="cb1-20">widthOut <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1800</span></span>
<span id="cb1-21">heightOut <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span></span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sizes of text </span></span>
<span id="cb1-24">sizeTextGroups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb1-25">sizeTextActivities <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Some text for seting the ID of the figure</span></span>
<span id="cb1-28">idHTML <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PhDTimeline_WLauM"</span></span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extracting the name of sheets of your Excel file</span></span>
<span id="cb1-31">allSheets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">excel_sheets</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> inputFile)</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run a loop along the sheets</span></span>
<span id="cb1-34"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(allSheets)){</span>
<span id="cb1-35">  </span>
<span id="cb1-36">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the sheet</span></span>
<span id="cb1-37">  inputData <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_excel</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> inputFile, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sheet =</span> allSheets[i])</span>
<span id="cb1-38">  </span>
<span id="cb1-39">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the groups</span></span>
<span id="cb1-40">  nGroups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(inputData<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n)</span>
<span id="cb1-41">  </span>
<span id="cb1-42">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a string that will be used for the gvisTimeline as colors for groups</span></span>
<span id="cb1-43">  tempCols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cols[nGroups] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-44">    </span>
<span id="cb1-45">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'%s'"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-46">    </span>
<span id="cb1-47">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-48">    </span>
<span id="cb1-49">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[%s]"</span>) </span>
<span id="cb1-50">  </span>
<span id="cb1-51">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Take the read table...</span></span>
<span id="cb1-52">  inputData <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-53">    </span>
<span id="cb1-54">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename_with</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fn =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:blank:]]"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-55">    </span>
<span id="cb1-56">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Group =</span> group, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Activity =</span> activity) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-57">    </span>
<span id="cb1-58">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...add little chanegs: making some changes to the group labels, </span></span>
<span id="cb1-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                        converting dates to format Date</span></span>
<span id="cb1-60">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(Group, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span>),</span>
<span id="cb1-61">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> start),</span>
<span id="cb1-62">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> end)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-63">    </span>
<span id="cb1-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the main function</span></span>
<span id="cb1-65">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gvisTimeline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rowlabel =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group"</span>,</span>
<span id="cb1-66">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">barlabel =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Activity"</span>,</span>
<span id="cb1-67">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>, </span>
<span id="cb1-68">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>,</span>
<span id="cb1-69">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">options =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timeline =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{%s}"</span>, </span>
<span id="cb1-70">                                                   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"groupByRowLabel:false"</span>,</span>
<span id="cb1-71">                                                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colorByRowLabel:true"</span>,</span>
<span id="cb1-72">                                                         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rowLabelStyle:{fontSize: %s}"</span>, </span>
<span id="cb1-73">                                                                 sizeTextGroups),</span>
<span id="cb1-74">                                                         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"barLabelStyle:{fontSize: %s}"</span>, </span>
<span id="cb1-75">                                                                 sizeTextActivities),</span>
<span id="cb1-76">                                                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>)),</span>
<span id="cb1-77">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alternatingRowStyle =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb1-78">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">backgroundColor =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>, </span>
<span id="cb1-79">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> heightOut,</span>
<span id="cb1-80">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> widthOut,</span>
<span id="cb1-81">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors =</span> tempCols), </span>
<span id="cb1-82">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chartid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(idHTML, i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-83">    </span>
<span id="cb1-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot (show) the time line</span></span>
<span id="cb1-85">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span>
<span id="cb1-86">}</span></code></pre></div></div>
</div>
<p><strong>GoogleVis</strong> generates files in HTML format that will open immediately in our default browser (each sheet of our input file will generate an HTML that will open in a separate tab). From there we can take screenshots (or snippets) to save them as image files or paste them directly into the document we are working on.</p>
<p>For our example, two tabs were generated with the expected diagrams:</p>
<p><img src="https://luislaum.github.io/home/blog/timeline-with-googlevis/images/clipboard-854640556.png" class="img-fluid"></p>
<p><img src="https://luislaum.github.io/home/blog/timeline-with-googlevis/images/clipboard-2878228574.png" class="img-fluid"></p>
<hr>
</section>
<section id="es-dibujando-diagramas-de-l√≠nea-de-tiempo-en-r" class="level1">
<h1>[ES] Dibujando diagramas de l√≠nea de tiempo en R</h1>
<p>Un diagrama (de l√≠neas de tiempo) de Gantt es una herramienta visual de gesti√≥n de proyectos que organiza las tareas en una l√≠nea de tiempo, mostrando su duraci√≥n, inicio y fin mediante barras horizontales. Es especialmente √∫til en la redacci√≥n de proyectos de investigaci√≥n porque permite planificar y visualizar de manera clara las etapas clave, como la revisi√≥n de literatura, recolecci√≥n de datos, an√°lisis y redacci√≥n, asegurando que se cumplan los plazos establecidos. Adem√°s, ayuda a coordinar esfuerzos entre los integrantes del equipo, identificar posibles solapamientos o cuellos de botella y proporcionar una referencia para monitorear el progreso del proyecto.</p>
<p>Si bien son f√°ciles de entender, no necesariamente lo son de dibujar, sobre todo si se desea mantener las proporciones entre los per√≠odos y el largo de cada l√≠nea:</p>
<ol type="1">
<li><p>Comenzaremos construyendo una tabla en MS Excel con las siguientes columnas: <code>n</code>, <code>group</code>, <code>activity</code>, <code>start</code> y <code>end</code>. La columna <code>n</code> servir√° para definir la diferencia (o similaridad) de colores entre cada elemento (l√≠nea):</p>
<p><img src="https://luislaum.github.io/home/blog/timeline-with-googlevis/images/clipboard-3749268084.png" class="img-fluid"></p>
<p>El script generar√° un gr√°fico por cada hoja del archivo.</p></li>
<li><p>Ahora pasaremos al script, en donde lo primero que haremos ser√° asegurarnos de tener instalados los paquetes <a href="https://cran.r-project.org/package=googleVis">googleVis</a>, <a href="https://cran.r-project.org/package=readxl">readxl</a> y <a href="https://cran.r-project.org/package=dplyr">dplyr</a>:</p></li>
</ol>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loading the packages</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(googleVis)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(readxl)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(dplyr)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read table with information of your activities</span></span>
<span id="cb2-7">inputFile <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_table.xlsx"</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the colors for each group (# of colors = # of groups) in HEX code</span></span>
<span id="cb2-10">cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mediumaquamarine"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkgoldenrod1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray40"</span>, </span>
<span id="cb2-11">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkslategray1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkseagreen1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightpink"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightpink"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mediumpurple2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-12">  </span>
<span id="cb2-13">  gplots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col2hex</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-14">  </span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-16">  </span>
<span id="cb2-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>()</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Size of diagram</span></span>
<span id="cb2-20">widthOut <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1800</span></span>
<span id="cb2-21">heightOut <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span></span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sizes of text </span></span>
<span id="cb2-24">sizeTextGroups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb2-25">sizeTextActivities <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb2-26"></span>
<span id="cb2-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Some text for seting the ID of the figure</span></span>
<span id="cb2-28">idHTML <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PhDTimeline_WLauM"</span></span>
<span id="cb2-29"></span>
<span id="cb2-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extracting the name of sheets of your Excel file</span></span>
<span id="cb2-31">allSheets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">excel_sheets</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> inputFile)</span>
<span id="cb2-32"></span>
<span id="cb2-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run a loop along the sheets</span></span>
<span id="cb2-34"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(allSheets)){</span>
<span id="cb2-35">  </span>
<span id="cb2-36">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the sheet</span></span>
<span id="cb2-37">  inputData <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_excel</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> inputFile, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sheet =</span> allSheets[i])</span>
<span id="cb2-38">  </span>
<span id="cb2-39">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the groups</span></span>
<span id="cb2-40">  nGroups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(inputData<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n)</span>
<span id="cb2-41">  </span>
<span id="cb2-42">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a string that will be used for the gvisTimeline as colors for groups</span></span>
<span id="cb2-43">  tempCols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cols[nGroups] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-44">    </span>
<span id="cb2-45">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'%s'"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-46">    </span>
<span id="cb2-47">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-48">    </span>
<span id="cb2-49">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[%s]"</span>) </span>
<span id="cb2-50">  </span>
<span id="cb2-51">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Take the read table...</span></span>
<span id="cb2-52">  inputData <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-53">    </span>
<span id="cb2-54">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename_with</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fn =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:blank:]]"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-55">    </span>
<span id="cb2-56">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Group =</span> group, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Activity =</span> activity) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-57">    </span>
<span id="cb2-58">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...add little chanegs: making some changes to the group labels, </span></span>
<span id="cb2-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                        converting dates to format Date</span></span>
<span id="cb2-60">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(Group, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span>),</span>
<span id="cb2-61">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> start),</span>
<span id="cb2-62">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> end)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-63">    </span>
<span id="cb2-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the main function</span></span>
<span id="cb2-65">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gvisTimeline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rowlabel =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group"</span>,</span>
<span id="cb2-66">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">barlabel =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Activity"</span>,</span>
<span id="cb2-67">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>, </span>
<span id="cb2-68">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>,</span>
<span id="cb2-69">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">options =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timeline =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{%s}"</span>, </span>
<span id="cb2-70">                                                   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"groupByRowLabel:false"</span>,</span>
<span id="cb2-71">                                                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colorByRowLabel:true"</span>,</span>
<span id="cb2-72">                                                         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rowLabelStyle:{fontSize: %s}"</span>, </span>
<span id="cb2-73">                                                                 sizeTextGroups),</span>
<span id="cb2-74">                                                         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"barLabelStyle:{fontSize: %s}"</span>, </span>
<span id="cb2-75">                                                                 sizeTextActivities),</span>
<span id="cb2-76">                                                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>)),</span>
<span id="cb2-77">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alternatingRowStyle =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb2-78">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">backgroundColor =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>, </span>
<span id="cb2-79">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> heightOut,</span>
<span id="cb2-80">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> widthOut,</span>
<span id="cb2-81">                                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors =</span> tempCols), </span>
<span id="cb2-82">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chartid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(idHTML, i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-83">    </span>
<span id="cb2-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot (show) the time line</span></span>
<span id="cb2-85">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span>
<span id="cb2-86">}</span></code></pre></div></div>
</div>
<p><strong>googleVis</strong> genera archivos en formato HTML que se abrir√°n inmediatamente en nuestro navegador predeterminado (cada hoja de nuestro archivo de entrada generar√° un HTML que se abrir√° en una pesta√±a independiente). A partir de ah√≠ podremos realizar capturas (o recortes) de pantalla para guardarlos como archivos de imagen o pegarlos directamente sobre el documento en el que estemos trabajando.</p>
<p>Para nuestro ejemplo, se generaron dos pesta√±as con los diagramas esperados:</p>
<p><img src="https://luislaum.github.io/home/blog/timeline-with-googlevis/images/clipboard-854640556.png" class="img-fluid"></p>
<p><img src="https://luislaum.github.io/home/blog/timeline-with-googlevis/images/clipboard-2878228574.png" class="img-fluid"></p>


</section>
 ]]></description>
  <category>R</category>
  <category>tutorial</category>
  <guid>https://luislaum.github.io/home/blog/timeline-with-googlevis/timeline-with-googlevis.html</guid>
  <pubDate>Thu, 19 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/timeline-with-googlevis/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Quarto template for a scientific article draft</title>
  <link>https://luislaum.github.io/home/blog/quarto-template-article/quarto-template-article.html</link>
  <description><![CDATA[ 


<p>Image credits: Daria Glakteeva at <a href="https://unsplash.com/photos/a-person-typing-on-a-laptop-on-a-desk-2w0IdiEI-hg?utm_content=creditShareLink&amp;utm_medium=referral&amp;utm_source=unsplash">Unplash</a></p>
<section id="en-writing-a-manuscript-just-with-quarto-and-zotero-and-r" class="level1">
<h1>[EN] Writing a manuscript just with Quarto and Zotero (and R)</h1>
<p>This tutorial starts from a folder-template containing the files needed to write the complete manuscript for a scientific article (applicable to almost any journal) using only Quarto, RStudio, Zotero and R tools. In this example, the output will always be a file in MS Word format, which is widely accepted by several scientific journals. In the following, I will indicate the list of required software (which you should already have installed) and then I will explain the use and handling of each file contained in the template.</p>
<p><img src="https://luislaum.github.io/home/blog/quarto-template-article/images/clipboard-1818852471.png" class="img-fluid"></p>
<section id="pre-requisites" class="level2">
<h2 data-anchor-id="pre-requisites">Pre-requisites</h2>
<ul>
<li>Reference template <a href="https://github.com/LuisLauM/LuisLauM.github.io/blob/main/blog/quarto-template-article/article-template.zip">link</a>: There you will find the files needed to execute what is shown in this post, which may change as this post is updated. You must click on the <code>View raw</code> link or the <code>Download raw file</code> button.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/quarto-template-article/images/clipboard-1198850886.png" class="img-fluid"></p>
<ul>
<li><p>R, RStudio y Zotero: <a href="https://cran.r-project.org/" class="uri">https://cran.r-project.org/</a> / <a href="https://posit.co/downloads/" class="uri">https://posit.co/downloads/</a> / <a href="https://www.zotero.org/" class="uri">https://www.zotero.org/</a></p></li>
<li><p>Quarto: In recent years, RStudio already includes a recent version of Quarto, but if you do not have the software or want to try versions other than the default, you can download them from <a href="https://quarto.org/docs/download/index.html" class="uri">https://quarto.org/docs/download/index.html</a>.</p></li>
<li><p>Zotero-Quarto-RStudio integration: Citation management will make use of the tools explained in <a href="https://luislaum.github.io/blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html">my previous post</a>, so <strong>I recommend you to read and do what is explained there</strong>.</p></li>
<li><p>Some experience in writing documents using Quarto (or R markdown). The best way to learn how to use Quarto is using it and find what you need to get what you need from online manuals (e.g.&nbsp;from <a href="https://quarto.org/">Quarto</a>), <a href="https://youtu.be/_f3latmOhew?feature=shared">videos on YT</a> or questions on several forums (e.g.&nbsp;<a href="https://stackoverflow.com/questions/tagged/quarto">Stackoverflow</a>) and blogs.</p></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled" title="Files and order">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Tip</span>Files and order
</div>
</div>
<div class="callout-body-container callout-body">
<p>Although each researcher has a different way of organizing the files of their projects, it is HIGHLY recommended to work each one within the same folder (where we have configured an RStudio project), where there are separate folders for raw data, preprocessed data, output data, figures, code, external documents (reports, permissions, etc.), presentations, among others. For our example, it will be assumed that we are working in the root directory of our project itself, but ideally we should have a subfolder in dedicated to contain only the files related to the article (or articles) coming out of a project. This will be quite useful later on when revisions start coming in and not end up with dozens of confusingly named files scattered around our directory.</p>
<p><img src="https://luislaum.github.io/home/blog/quarto-template-article/images/clipboard-2838852447.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="extensions-folder" class="level2">
<h2 data-anchor-id="extensions-folder"><code>_extensions</code> folder</h2>
<p>Quarto extensions are basically scripts that add additional functionality and are developed and supported by the community. Quarto has a standalone environment philosophy, so, unlike R, the installation of the extensions must be done <strong>local</strong> in each project where we are going to run our Quarto script. For the purposes of this post, we are going to use an extension called <a href="https://github.com/kapsner/authors-block"><strong>kapsner/authors-block</strong></a>, which <strong>is already included</strong> in the reference repository (inside the <code>/_extensions</code> folder), but it is always good to take a look at the original repository to see if they have incorporated any interesting improvements.</p>
</section>
<section id="bibliography.bib-file" class="level2">
<h2 data-anchor-id="bibliography.bib-file"><code>bibliography.bib</code> file</h2>
<p>This file will contain the metadata of the bibliographic references that we will cite in our main file. It is not necessary to create it manually, that will be taken care of by the Zotero-rbbt tools, as detailed <a href="https://luislaum.github.io/blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html">in our respective post</a>.</p>
</section>
<section id="ices-journal-of-marine-science.csl-file" class="level2">
<h2 data-anchor-id="ices-journal-of-marine-science.csl-file"><code>ices-journal-of-marine-science.csl</code> file</h2>
<p>A <strong>CSL</strong> (Citation Style Language) file defines how citations and references should be formatted in a document, allowing bibliographic management programs (such as Zotero) to automate this process. These files are essential in writing scientific articles because they ensure that citations and references conform precisely to the style standards required by a journal or institution, such as APA, MLA or Vancouver. By using a CSL file, authors can easily switch between styles without having to manually rewrite their references, which saves time, reduces errors, and ensures consistency in citation formatting throughout the paper.</p>
<p>Usually, each journal tells authors which style to follow when writing their citations, for which in many cases they share the respective <code>.csl</code> file; however, if we cannot find the correct file, there are <a href="https://github.com/citation-style-language/styles">repositories such as this one</a> where hundreds of <code>.csl</code> files for different journals are stored and maintained. Look for the one that best fits the journal to which you will submit your manuscript.</p>
</section>
<section id="custom-reference-doc.docx-file" class="level2">
<h2 data-anchor-id="custom-reference-doc.docx-file"><code>custom-reference-doc.docx</code> file</h2>
<p>Usually, a manuscript file does not need to have an ornate or sophisticated format, but it is possible that some journals, our advisor or reviewers may request some formatting details in our MS Word output file. This is where Quarto makes use of a simple but powerful solution: the use of a reference file-format.</p>
<p>The <code>custom-reference-doc.docx</code> file is nothing more than a Word file that explicitly shows how each element will be displayed according to the style we have chosen. Anything we edit in this file will be used by Quarto to format our final document. To explain at length how to edit this file would take a whole post and right now there are many sources where this process is already explained, <a href="https://andrewpwheeler.com/2024/06/21/my-word-template-for-quarto/">this post for example</a>. What is important to keep in mind is that every change we make must be done at the level of MS Word‚Äôs Format and Style options. While it might seem very annoying to have to work in Word, the good news is that it is not something we will do continuously, but only a couple of times during our project (if someone requests some special formatting in our manuscript). Personally, the shared file has been enough for my advisors, the reviewers and editors of 2 different journals (ICES JMS and Fisheries Research of Elsevier).</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>This style reference file can be very useful for adding features that might be somewhat difficult to obtain from markdown or LaTeX commands. For example, if you want your final document to include numbered lines, it is as simple as <a href="https://support.microsoft.com/en-us/office/add-or-remove-line-numbers-b67cd35e-422c-42eb-adc9-256ca9802e22">do it from Word in this document</a> style reference. Quarto will take the change and apply it to the output file.</p>
</div>
</div>
</section>
<section id="the-main-file-article_v1.qmd" class="level2">
<h2 data-anchor-id="the-main-file-article_v1.qmd">The main file: <code>article_v1.qmd</code></h2>
<p>The initial part of the script of this template consists of a <code>header</code> (in YAML format) where the general options of our document will be shown:</p>
<ul>
<li><code>title</code>, between double quotes <code>" "</code>.</li>
<li><code>authors</code>, where we will be able to include data such as names, surnames and affiliation (which is the most important information), as well as ORCID code, reference URL, etc.</li>
<li><code>affiliations</code>, this is where we will indicate an identifier (which we will use as a reference for the authors) and the full name of the affiliation, as we want it to appear in the document.</li>
<li><code>filters</code>, where we will list the <em>Quarto extensions</em> that we want to be loaded at the beginning of the document (and that will be looked for in the <code>/_extensions</code> folder).</li>
<li><code>link-citations</code>, where we can define (true/false) if we want the bibliographic citations in the final document to link to the corresponding reference in the final Bibliography section.</li>
<li><code>bibliography</code>, where we will indicate the file where our bibliographic references are in BibTeX format.</li>
<li><code>csl</code>, where we indicate the file that Quarto will use to establish the citation format for bibliographic references.</li>
<li><code>format</code>, where specific parameters of the output file will be specified. For this example, everything is set to get a MS Word file (<code>.docx</code>) that will use our <code>custom-reference-doc.docx</code> style reference file. The <code>toc</code> parameter (which refers to <em>Table Of Contents</em>) allows to display or not the table of contents at the beginning of the document. The <code>numer-sections</code> parameter allows to enable/disable the use of numbering in the sections of our manuscript.</li>
</ul>
<section id="setup-chunk" class="level3">
<h3 data-anchor-id="setup-chunk"><em>Setup chunk</em></h3>
<p>The chunk shown at the beginning of the <code>qmd</code> file contains some parameters that should be set, so that you do not have to do it independently in each subsequent chunk. <strong>Hey</strong>, this is a SUGGESTED configuration, you can (and should) modify it as required by your project or the reviewers.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">echo =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb1-2">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verbose =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb1-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb1-4">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warning =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb1-5">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dev =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ragg_png"</span>,</span>
<span id="cb1-6">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out.width =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100%"</span>, </span>
<span id="cb1-7">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>)</span></code></pre></div></div>
</div>
<ul>
<li><p><code>echo = FALSE</code>: Causes the executed code NOT to be displayed verbatim in the document.</p></li>
<li><p><code>verbose = FALSE</code>: Useful for suppressing detailed messages about progress, intermediate steps or partial results of code within chunks to keep outputs cleaner.</p></li>
<li><p><code>message = FALSE</code>/<code>warning = FALSE</code>: used to suppress warning messages or information that functions may generate during code execution, preventing them from appearing in the document output. This helps to keep the output cleaner and focused on the essential results.</p></li>
<li><p><code>dev = "ragg_png"</code>: specifies that the graphics device used to generate the images is <a href="https://ragg.r-lib.org/">ragg</a>, an efficient and modern engine that produces graphics in PNG format with high quality and performance.</p></li>
<li><p><code>out.width = "100%"</code>: sets that the width of the generated images or graphics will occupy 100% of the width of the container (e.g., the page or column where it is displayed), automatically adjusting to the available size.</p></li>
<li><p><code>dpi = 1500</code>: sets the resolution of the images generated in the document, specifically in dots per inch. A value of 1500 dpi indicates a very high resolution, which results in sharper and more detailed images, but also heavier, so it will be the user‚Äôs responsibility to determine the optimum value as specified by each magazine.</p></li>
</ul>
</section>
<section id="writing-in-quarto" class="level3">
<h3 data-anchor-id="writing-in-quarto">Writing in Quarto</h3>
<p>What follows is basically to write our manuscript as if it were just another report in Quarto, taking advantage of the power of chunks to recreate the analyses needed to generate each figure, table or value. Here it is important to recommend that each value that comes from an analysis of our information (i.e.&nbsp;that does not come directly from a bibliographic citation) should be generated from explicit code in our document.</p>
<p>For example, let us imagine that I am working with the <code>mtcars</code> table (from R) and I want to write the following text-result:</p>
<blockquote class="blockquote">
<p>The car models Toyota Corolla and Fiat 128 were those with the highest miles per gallon value.</p>
</blockquote>
<p>The text inside our qmd file should look like this:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">The car models `r rownames(mtcars)[order(mtcars$mpg, decreasing = TRUE)[1:2]] |&gt; paste(collapse = " and ")` were those with the highest miles per gallon value.</span></code></pre></div></div>
<p>As you can see, within the paragraph itself I am running a chunk with a data sorting and extraction operation. While this may seem more cumbersome, it allows that if at some point we were to modify some pre-processing process of the initial data, the results will be generated automatically, without the need for us to do these small calculations again.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Obviously, the texts related to the interpretation of the results should be reviewed whenever we know that we have made an important change in our initial data.</p>
</div>
</div>
<p>There are multiple websites (blogs and forums) where we can learn how to format our results or presentation. Some examples are:</p>
<ul>
<li><p><a href="https://quarto.org/docs/authoring/markdown-basics.html">Markdown Basics</a></p></li>
<li><p><a href="https://bookdown.org/yihui/rmarkdown/">R Markdown: The Definitive Guide</a></p></li>
<li><p><a href="https://rmarkdown.rstudio.com/index.html">R markdown</a></p></li>
<li><p><a href="https://yihui.org/knitr/">knitr</a></p></li>
<li><p><a href="https://bookdown.org/">Bookdown</a></p></li>
<li><p><a href="https://quarto-tdg.org/overview.html">Hello Quarto</a></p></li>
<li><p><a href="https://github.com/quarto-dev/quarto-cli/discussions/categories/q-a">Quarto Q&amp;A</a>. This site is particularly interesting because it is the Q&amp;A section of the Quarto repository itself, so it is always good to take a look at its search engine and check if someone else had similar difficulties as us. We can also leave a ticket with our query if we don‚Äôt find a match.</p></li>
</ul>
</section>
</section>
<section id="extra-file-letter_editor.rmd" class="level2">
<h2 data-anchor-id="extra-file-letter_editor.rmd">Extra file: <code>letter_editor.Rmd</code></h2>
<p>The letter to the editor is a key component when submitting a scientific article to a journal, as it serves as a first presentation of the work to the editors and helps to highlight its relevance, originality and contribution to the field. Its usefulness lies in quickly capturing the editor‚Äôs attention by summarizing the objectives, main findings and importance of the study, which facilitates the initial evaluation of the manuscript. In addition, it allows the author to briefly explain why the article is appropriate for the journal in question, showing alignment with its focus and audience. A well-written letter can positively influence the editor‚Äôs decision to send the article for review, thus expediting the evaluation process.</p>
<p>Although in this template I do not share an example of writing this letter (only the R markdown format), it is possible to find multiple related posts in various forums or blogs. The use of this file is quite intuitive, just fill in the fields and render the document. By the way, it requires the prior installation of the <a href="https://cran.r-project.org/package=komaletter">komaletter package</a>.</p>
<hr>
</section>
</section>
<section id="es-escribiendo-un-art√≠culo-solo-con-quarto-y-zotero-y-r" class="level1">
<h1>[ES] Escribiendo un art√≠culo solo con Quarto y Zotero (y R)</h1>
<p>Este tutorial parte de una carpeta-plantilla en donde est√°n los archivos necesarios para escribir el manuscrito completo para un art√≠culo cient√≠fico (aplicable a casi cualquier revista) usando √∫nicamente herramientas de Quarto, RStudio, Zotero y R. En este ejemplo, el output ser√° siempre un archivo en formato MS Word, que es ampliamente aceptado por diversas revistas cient√≠ficas. A continuaci√≥n, indicar√© la lista de software requerido (que debn tener ya instalado) y luego ir√© explicando el uso y manejo de cada archivo contenido en la plantilla.</p>
<p><img src="https://luislaum.github.io/home/blog/quarto-template-article/images/clipboard-1818852471.png" class="img-fluid"></p>
<section id="requerimientos" class="level2">
<h2 data-anchor-id="requerimientos">Requerimientos</h2>
<ul>
<li>Plantilla de referencia <a href="https://github.com/LuisLauM/LuisLauM.github.io/blob/main/blog/quarto-template-article/article-template.zip">link</a>: Ah√≠ se encuentran los archivos necesarios para ejecutar lo mostrado en este post, los cuales podr√°n ir variando conforme este post se actualice. Deber√°s dar click al link de <code>View raw</code> o bien al bot√≥n de <code>Download raw file</code>.</li>
</ul>
<p><img src="https://luislaum.github.io/home/blog/quarto-template-article/images/clipboard-1198850886.png" class="img-fluid"></p>
<ul>
<li><p>R, RStudio y Zotero: <a href="https://cran.r-project.org/" class="uri">https://cran.r-project.org/</a> / <a href="https://posit.co/downloads/" class="uri">https://posit.co/downloads/</a> / <a href="https://www.zotero.org/" class="uri">https://www.zotero.org/</a></p></li>
<li><p>Quarto: En los √∫ltimos a√±os, RStudio ya incluye una versi√≥n reciente de Quarto, pero si usted no cuenta con el software o desea probar versiones distintas a la que llega por defecto, puede descargarlas desde <a href="https://quarto.org/docs/download/index.html" class="uri">https://quarto.org/docs/download/index.html</a>.</p></li>
<li><p>Integraci√≥n Zotero-Quarto-RStudio: El manejo de citas se debe hacer a trav√©s de las herramientas explicadas en <a href="https://luislaum.github.io/blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html">mi post anterior</a>, as√≠ que <strong>les recomiendo leerlo previamente e implementar lo explicado ah√≠</strong>.</p></li>
<li><p>Experiencia en la escritura de documentos usando Quarto (o R markdown). La mejor manera de aprender a usar Quarto es us√°ndolo e ir hallando lo necesario para obtener lo que necesitamos a partir de manuales en l√≠nea (e.g.&nbsp;desde la propia web de <a href="https://quarto.org/">Quarto</a>), <a href="https://youtu.be/_f3latmOhew?feature=shared">v√≠deos en YT</a> o preguntas en diversos foros (e.g.&nbsp;<a href="https://stackoverflow.com/questions/tagged/quarto">Stackoverflow</a>).</p></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled" title="Archivos, orden y modo de trabajo">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Tip</span>Archivos, orden y modo de trabajo
</div>
</div>
<div class="callout-body-container callout-body">
<p>Si bien cada investigador tiene una manera distinta de organizar los archivos de sus proyectos, es MUY recomendable trabajar cada uno dentro de una misma carpeta (en donde tengamos configurado un proyecto de RStudio), en donde haya carpetas diferenciadas para los datos de entrada en bruto (raw), los preprocesados, los de salida, las figuras, el c√≥digo, los documentos externos (informes, permisos, etc.), las presentaciones, entre otros. Para nuestro ejemplo, se asumir√° que estamos trabajando en el propio directorio ra√≠z de nuestro proyecto, pero idealmente deber√≠amos tener una subcarpeta en dedicada a contener √∫nicamente los archivos relacionados al art√≠culo (o art√≠culos) que salen de un proyecto. Esto ser√° bastante √∫til posteriormente, cuando empiecen a llegar las revisiones y no terminar con decenas de archivos con nombre confusos y desperdigados por nuestro directorio.</p>
<p><img src="https://luislaum.github.io/home/blog/quarto-template-article/images/clipboard-2838852447.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="carpeta-_extensions" class="level2">
<h2 data-anchor-id="carpeta-_extensions">Carpeta <code>_extensions</code></h2>
<p>Las extensiones de Quarto son b√°sicamente scripts que a√±aden funcionalidades adicionales y que son desarrolladas y soportadas por la comunidad. Quarto maneja una filosof√≠a de entornos independientes, por lo que, a diferencia de R, la instalaci√≥n de las extensiones de hacerse de manera <strong>local</strong> en cada proyecto en que vayamos a ejecutar nuestro script de Quarto. Para efectos del presente post, vamos a utilizar una extensi√≥n llamada <a href="https://github.com/kapsner/authors-block"><strong>kapsner/authors-block</strong></a>, la cual <strong>ya viene incluidas</strong> en el repositorio de referencia (dentro de la carpeta <code>/_extensions</code>), pero siempre es bueno darse una vuelta por el repositorio original para saber si han incorporado alguna mejora interesante.</p>
</section>
<section id="archivo-bibliography.bib" class="level2">
<h2 data-anchor-id="archivo-bibliography.bib">Archivo <code>bibliography.bib</code></h2>
<p>Este archivo contendr√° la metadata de las referencias bibliogr√°ficas que citaremos en nuestro archivo principal. No es necesario crearlo manualmente, de eso se encargar√° las herramientas de Zotero-rbbt, tal como se detalla <a href="https://luislaum.github.io/blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html">en nuestro post respectivo</a>.</p>
</section>
<section id="archivo-ices-journal-of-marine-science.csl" class="level2">
<h2 data-anchor-id="archivo-ices-journal-of-marine-science.csl">Archivo <code>ices-journal-of-marine-science.csl</code></h2>
<p>Un archivo <strong>CSL</strong> (Citation Style Language) define c√≥mo se deben formatear las citas y las referencias en un documento, permitiendo que programas de gesti√≥n bibliogr√°fica (como Zotero) automaticen este proceso. Estos archivos son fundamentales en la escritura de art√≠culos cient√≠ficos porque garantizan que las citas y referencias se adapten de manera precisa a las normas de estilo exigidas por una revista o instituci√≥n, como APA, MLA o Vancouver. Al utilizar un archivo CSL, los autores pueden cambiar f√°cilmente entre estilos sin necesidad de reescribir manualmente sus referencias, lo que ahorra tiempo, reduce errores y asegura la consistencia en el formato de citaci√≥n a lo largo del documento.</p>
<p>Usualmente, cada revista indica a los autores qu√© estilo deben seguir al momento de redactar sus citas, para lo cual en muchos casos comparten el respectivo archivo <code>.csl</code>; sin embargo, si no logramos hallar el archivo correcto, existen <a href="https://github.com/citation-style-language/styles">repositorios como este</a> en donde se almacenan y mantienen cientos de archivos <code>.csl</code> para diferentes revistas. Busca el que m√°s se ajuste a la revista a la que someter√°s tu manuscrito.</p>
</section>
<section id="archivo-custom-reference-doc.docx" class="level2">
<h2 data-anchor-id="archivo-custom-reference-doc.docx">Archivo <code>custom-reference-doc.docx</code></h2>
<p>Usualmente, un archivo de manuscrito no requiere tener un formato ornamentado o sofisticado, pero es posible que algunas revistas, nuestro asesor o los revisores soliciten algunos detalles de formato en nuestro archivo de salida en MS Word. Aqu√≠ es donde Quarto hace uso de una soluci√≥n sencilla, pero potente: el uso de un archivo-formato de referencia.</p>
<p>El archivo <code>custom-reference-doc.docx</code> no es m√°s que un archivo en Word en donde se muestra de forma expl√≠cita la manera en c√≥mo se mostrar√° cada elemento seg√∫n el estilo que hayamos elegido. Cualquier cosa que editemos en ese archivo ser√° utilizada por Quarto para darle formato a nuestro documento final. Explicar en extenso c√≥mo editar este archivo tomar√≠a un post entero y ahora mismo existen muchas fuentes en donde ya se explica este proceso, <a href="https://andrewpwheeler.com/2024/06/21/my-word-template-for-quarto/">este post por ejemplo</a>. Lo que s√≠ es importante tener en cuenta es que cada cambio que hagamos debe hacerse a nivel de las opciones de Formato y Estilo de MS Word. Si bien podr√≠a parecer muy molesto tener que trabajar en Word, la buena noticia es que no es algo que haremos continuamente, sino solo un par de veces durante nuestro proyecto (si es que alguien solicita alg√∫n formato especial en nuestro manuscrito). En lo personal, con el archivo compartido ha sido suficiente para mis asesores, los revisores y editores de 2 revistas distintas (ICES JMS y Fisheries Research de Elsevier).</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Este archivo de referencia de estilo puede llegar a ser muy √∫til para a√±adir aspectos que podr√≠an llegar a ser algo dif√≠ciles de obtener desde comandos en markdown o LaTeX. Por ejemplo, si desea que su documento final incluya l√≠neas numeradas, es tan sencillo como <a href="https://support.microsoft.com/en-us/office/add-or-remove-line-numbers-b67cd35e-422c-42eb-adc9-256ca9802e22">hacerlo desde Word en este documento</a> de referencia de estilo. Quarto tomar√° el cambio y lo aplicar√° sobre el archivo de salida.</p>
</div>
</div>
</section>
<section id="archivo-principal-article_v1.qmd" class="level2">
<h2 data-anchor-id="archivo-principal-article_v1.qmd">Archivo principal <code>article_v1.qmd</code></h2>
<p>La parte inicial del script de esta plantilla se compone un <code>header</code> (en formato YAML) en donde se mostrar√° las opciones generales de nuestro documento:</p>
<ul>
<li><code>title</code>, entre comillas dobles <code>" "</code>.</li>
<li><code>authors</code>, en donde podremos incluir datos como nombres, apellidos y afiliaci√≥n (que es la informaci√≥n m√°s importante), as√≠ como c√≥digo ORCID, URL de referencia, etc.</li>
<li><code>affiliations</code>, aqu√≠ es donde indicaremos un identificador (que usaremos como referencia para los autores) y el nombre (<code>name</code>) completo de la afiliaci√≥n, tal como querramos que aparezca en el documento.</li>
<li><code>filters</code>, en donde listaremos las <em>Quarto extensions</em> que deseamos que se carguen al inicio del documento (y que se buscar√°n en la carpeta <code>/_extensions</code>).</li>
<li><code>link-citations</code>, en donde podremos definir (true/false) si deseamos que las citas bibliogr√°ficas en el documento final se enlacen a la referencia correspondiente en la secci√≥n final de Bibliograf√≠a.</li>
<li><code>bibliography</code>, en donde indicaremos el archivo en donde se hallan nuestras referencias bibliogr√°ficas en formato BibTeX.</li>
<li><code>csl</code>, en donde indicaremos el archivo que utilizar√° Quarto para establecer el formato de citaci√≥n de referencias bibliogr√°ficas.</li>
<li><code>format</code>, en donde se indicar√° par√°metros espec√≠ficos del archivo de salida. Para este ejemplo, todo est√° configurado para obtener un archivo en MS Word (<code>.docx</code>) que utilizar√° nuestro archivo de referencia de estilo <code>custom-reference-doc.docx</code>. El par√°metro <code>toc</code> (que hace referencia a <em>Table Of Contents</em>) permite mostrar o no la tabla de contenidos al inicio del documento. El par√°metro <code>numer-sections</code> permite activar/desactivar el uso de numeraci√≥n en las secciones de nuestro manuscrito.</li>
</ul>
<section id="setup-chunk-1" class="level3">
<h3 data-anchor-id="setup-chunk-1"><em>Setup chunk</em></h3>
<p>El chunk que se muestra al inicio del archivo <code>qmd</code> contiene algunos par√°metros que conviene fijar, para no tener que hacerlo independientemente en cada chunk posterior. <strong>Ojo</strong>, esta es una configuraci√≥n SUGERIDA, usted podr√° (y deber√°) modificarla seg√∫n lo requiera su proyecto o los revisores.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">echo =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb3-2">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verbose =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb3-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb3-4">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warning =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb3-5">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dev =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ragg_png"</span>,</span>
<span id="cb3-6">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out.width =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100%"</span>, </span>
<span id="cb3-7">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>)</span></code></pre></div></div>
</div>
<ul>
<li><p><code>echo = FALSE</code>: Hace que el c√≥digo ejecutado NO se muestre textualmente en el documento.</p></li>
<li><p><code>verbose = FALSE</code>: √ötil para suprimir mensajes detallados sobre el progreso, los pasos intermedios o los resultados parciales del c√≥digo dentro de los chunks y mantener salidas m√°s limpias.</p></li>
<li><p><code>message = FALSE</code>/<code>warning = FALSE</code>: se utiliza para suprimir los mensajes de advertencia o informaci√≥n que las funciones pueden generar durante la ejecuci√≥n del c√≥digo, evitando que estos aparezcan en la salida del documento. Esto ayuda a mantener la salida m√°s limpia y enfocada en los resultados esenciales.</p></li>
<li><p><code>dev = "ragg_png"</code>: especifica que el dispositivo gr√°fico utilizado para generar las im√°genes es <a href="https://ragg.r-lib.org/">ragg</a>, un motor eficiente y moderno que produce gr√°ficos en formato PNG con alta calidad y rendimiento.</p></li>
<li><p><code>out.width = "100%"</code>: establece que el ancho de las im√°genes o gr√°ficos generados ocupar√° el 100% del ancho del contenedor (por ejemplo, la p√°gina o columna donde se muestra), ajust√°ndose autom√°ticamente al tama√±o disponible.</p></li>
<li><p><code>dpi = 1500</code>: establece la resoluci√≥n de las im√°genes generadas en el documento, espec√≠ficamente en puntos por pulgada (dots per inch). Un valor de 1500 dpi indica una resoluci√≥n muy alta, lo que resulta en im√°genes m√°s n√≠tidas y detalladas, pero tambi√©n m√°s pesadas, por lo que ser√° responsabilidad del usuario determinar el valor √≥ptimo junto a lo especificado por cada revista.</p></li>
</ul>
</section>
<section id="redactar-en-quarto" class="level3">
<h3 data-anchor-id="redactar-en-quarto">Redactar en Quarto</h3>
<p>Lo que sigue es b√°sicamente redactar nuestro manuscrito somo si se tratara de un reporte m√°s en Quarto, aprovechando el poder de los chunks para recrear los an√°lisis necesarios para generar cada figura, tabla o valor. Aqu√≠ es importante recomendar que cada valor que provenga de un an√°lisis de nuestra informaci√≥n (i.e.&nbsp;que no provenga diractamente de una cita bibliogr√°fica) debe ser generado a partir de c√≥digo expl√≠cito en nuestro documento.</p>
<p>Por ejemplo, imaginemos que estoy trabajando con la tabla <code>mtcars</code> (de R) y deseo redactar el siguiente texto-resultado:</p>
<blockquote class="blockquote">
<p>Los modelos Toyota Corolla y Fiat 128 fueron aquellos con mayor valor de millas por gal√≥n.</p>
</blockquote>
<p>El texto dentro de nuestro archivo qmd dber√≠a lucir del siguiente modo:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">Los modelos `r rownames(mtcars)[order(mtcars$mpg, decreasing = TRUE)[1:2]] |&gt; paste(collapse = " y ")` fueron los que mostraron los primeros seg√∫n la variable de millas por gal√≥n.</span></code></pre></div></div>
<p>Como se observa, dentro del propio p√°rrafo estoy ejecutando un chunk con una operaci√≥n de ordenamiento y extracci√≥n de datos. Si bien esto puede parecer m√°s engorroso, permite que si en alg√∫n momento tuvi√©ramos que modificar alg√∫n proceso de preprocesamiento de los datos iniciales, los resultados se generar√°n autom√°ticamente, sin necesidad de que tengamos que volver a hacer estos peque√±os c√°lculos nuevamente.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Evidentemente, los textos relacionados a la interpretaci√≥n de los resultados deben ser revisados cada vez que sepamos que hemos realizado un cambio importante en nuestros datos iniciales.</p>
</div>
</div>
<p>Existen m√∫ltiples sitios web (blogs y foros) en donde podemos aprender a darle el formato que nuestros resultados o presentaci√≥n requieren. Algunos ejemplos son:</p>
<ul>
<li><p><a href="https://quarto.org/docs/authoring/markdown-basics.html">Markdown Basics</a></p></li>
<li><p><a href="https://bookdown.org/yihui/rmarkdown/">R Markdown: The Definitive Guide</a></p></li>
<li><p><a href="https://rmarkdown.rstudio.com/index.html">R markdown</a></p></li>
<li><p><a href="https://yihui.org/knitr/">knitr</a></p></li>
<li><p><a href="https://bookdown.org/">Bookdown</a></p></li>
<li><p><a href="https://quarto-tdg.org/overview.html">Hello Quarto</a></p></li>
<li><p><a href="https://github.com/quarto-dev/quarto-cli/discussions/categories/q-a">Quarto Q&amp;A</a>. Este sitio es particularmente interesante porque se trata de la secci√≥n de Q&amp;A del propio repositorio de Quarto, por lo que siempre es bueno darnos una vuelta por su buscador y revisar si alguien m√°s tuvo similares dificultades que nosotros. As√≠ mismo, podemos dejar un ticket con nuestra consulta si es que no encontramos coincidencias.</p></li>
</ul>
</section>
</section>
<section id="archivo-adicional-letter_editor.rmd" class="level2">
<h2 data-anchor-id="archivo-adicional-letter_editor.rmd">Archivo adicional <code>letter_editor.Rmd</code></h2>
<p>La carta al editor es un componente clave al someter un art√≠culo cient√≠fico a una revista, ya que sirve como una primera presentaci√≥n del trabajo a los editores y ayuda a destacar su relevancia, originalidad y contribuci√≥n al campo. Su utilidad radica en captar r√°pidamente la atenci√≥n del editor al resumir los objetivos, los principales hallazgos y la importancia del estudio, lo que facilita la evaluaci√≥n inicial del manuscrito. Adem√°s, permite al autor explicar brevemente por qu√© el art√≠culo es adecuado para la revista en cuesti√≥n, mostrando alineaci√≥n con su enfoque y audiencia. Una carta bien redactada puede influir positivamente en la decisi√≥n del editor de enviar el art√≠culo a revisi√≥n, agilizando as√≠ el proceso de evaluaci√≥n.</p>
<p>Si bien en esta plantilla no comparto un ejemplo de redacci√≥n de esta carta (solo el formato en R markdown), es posible hallar m√∫ltiples post relacionados en diversos foros o blogs. El uso de este archivo es bastante intuitivo, solo basta con rellenar los campos y renderizar el documento. Por cierto, se requiere la instalaci√≥n previa del <a href="https://cran.r-project.org/package=komaletter">paquete komaletter</a>.</p>


</section>
</section>
 ]]></description>
  <category>quarto</category>
  <category>template</category>
  <category>writing tips</category>
  <category>plantilla</category>
  <guid>https://luislaum.github.io/home/blog/quarto-template-article/quarto-template-article.html</guid>
  <pubDate>Tue, 17 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/quarto-template-article/banner.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>How to insert bibliographic references from Zotero in Quarto files?</title>
  <link>https://luislaum.github.io/home/blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html</link>
  <description><![CDATA[ 


<p>Image credits: RetroSupply at <a href="https://unsplash.com/photos/vintage-teal-typewriter-beside-book-jLwVAUtLOAQ?utm_content=creditShareLink&amp;utm_medium=referral&amp;utm_source=unsplash">Unplash</a></p>
<section id="en-zotero-quarto-rstudio-and-extras" class="level1">
<h1>[EN] Zotero + Quarto + RStudio and extras</h1>
<p>Quarto is becoming more and more a powerful alternative for the generation of various types of documents and reports. Zotero is one of the most widespread and widely used bibliographic citation managers, not only because it is free software, but also because the community around it has been developing many <em>plug-ins</em> that allow to increase its capabilities beyond what is offered by its own developers. Finally, RStudio is one of the preferred IDE in the community of programmers in R, R markdown and Quarto, for its simplicity and power, but also for allowing the incorporation of <em>addins</em> (the analogy of plug-ins) through R packages.</p>
<p>In this article, we will see how through an R package it is possible to add the possibility in RStudio to insert bibliographic citations from Zotero in Quarto files (and also in R markdown) in a very simple way (learning one or two keyboard shortcuts).</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>All the material needed to run this tutorial can be found in my repository, following this link <a href="https://github.com/LuisLauM/LuisLauM.github.io/tree/main/blog/zotero-quarto-rstudio/test-rbbt.zip">link</a>. You must click on the <code>View raw</code> link or the <code>Download raw file</code> button.</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-8112645573.png" class="img-fluid"></p>
</div>
</div>
<section id="required-software" class="level2">
<h2 data-anchor-id="required-software">Required software</h2>
<p>As you can suppose, it is necessary to have installed: <a href="https://cran.r-project.org/">R</a>, <a href="https://posit.co/downloads/">RStudio</a>, <a href="https://www.zotero.org/">Zotero</a> (preferably with a logged in account and with some references that we can use as an example) and <a href="https://quarto.org/docs/download/">Quarto</a> (this last one comes with the installation of <strong>the latest versions of RStudio</strong>).</p>
</section>
<section id="installing-rbb-plug-in-in-zotero" class="level2">
<h2 data-anchor-id="installing-rbb-plug-in-in-zotero">Installing <strong>RBB</strong> <em>plug-in</em> in Zotero</h2>
<p>To quote the words of the <a href="https://retorque.re/zotero-better-bibtex/index.html">official website</a> of this plug-in: <em>Better BibTeX (BBT) is a plugin for Zotero and Juris-M that makes it easier to manage bibliographic data, especially for people authoring documents using text-based toolchains (e.g.&nbsp;based on LaTeX / Markdown)</em>.</p>
<p>The installation is detailed in the web site itself, but we will make quick wrap-up:</p>
<ol type="1">
<li><p>Go to the <a href="https://retorque.re/zotero-better-bibtex/installation/index.html">Installation section (tab)</a>:</p></li>
<li><p>Right in the first sentence of the instructions, the words <em>latest release</em> are in a slightly different color as they contain the link to the repository of the latest available version of the plug-in:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-3846744947.png" class="img-fluid"></p></li>
<li><p>Clicking on this link will open a repository window in Github, from where we must download the file with extension <strong>.xpi</strong>:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-155659256.png" class="img-fluid"></p></li>
<li><p>Next, we will open a Zotero window and go to the <strong>Tools ‚Üí plug-ins</strong> menu:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-523717840.png" class="img-fluid"></p></li>
<li><p>A window will open showing all installed plug-ins. To install a new plug-in, just click on the gear icon (top right) and click on the <em>Install Pluggins From File</em> option:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-4204702406.png" class="img-fluid"></p></li>
<li><p>From here, we will select the xpi file we downloaded in step [3] and, after a few seconds, we should see our new BBT plug-in installed and active (because yes, it is possible to deactivate plug-ins):</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-3431742116.png" class="img-fluid"></p></li>
</ol>
</section>
<section id="installing-the-rbbt-package-and-addin-in-rstudio" class="level2">
<h2 data-anchor-id="installing-the-rbbt-package-and-addin-in-rstudio">Installing the <strong>rbbt</strong> <del>package and</del> <em>addin</em> in RStudio</h2>
<p>As I mentioned, in RStudio it is possible to add extra capabilities to the IDE through addins. For our case, we will use a package that contains the addins needed to interface our RStudio interface with Zotero. The package referred to is called <strong>rbbt</strong> and, while it is NOT an official CRAN package, we can download it directly from their <a href="https://github.com/paleolimbot/rbbt">repository on Github</a>.</p>
<p>Now, you may decide to download and use the official version of the package; however, as of this writing, I have taken the official version of <strong>rbbt</strong> and created my own version where I have corrected certain problems and added certain features (e.g., the ability to quote R packages). This tutorial shows how to install and use the (<em>forked</em>) version <a href="https://github.com/LuisLauM/rbbt">available on my Github profile</a>, but this is open source, so you decide (you can even create your own version and add more interesting features).</p>
<p>To install the package, just run the following line in R:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To run this, you must first install the 'remotes' package</span></span>
<span id="cb1-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repo =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LuisLauM/rbbt"</span>)</span></code></pre></div></div>
</div>
<p>Once the installation is complete, we can check that it has been correctly added to our Addins menu, which is located right at the end of the RStudio shortcut bar:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-4171540842.png" class="img-fluid"></p>
<p>By clicking on the <em>Addins</em> drop-down menu, we can look for the <em>Insert Citation</em> command to be found now:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-1339714737.png" class="img-fluid"></p>
<p>From this point on, it is possible to perform those actions by clicking on those buttons, but this is VERY uncomfortable to do while writing an article or report, so we will now see how to add keyboard shortcuts for those commands.</p>
</section>
<section id="configuring-rbbt-shortcuts" class="level2">
<h2 data-anchor-id="configuring-rbbt-shortcuts">Configuring <strong>rbbt</strong> shortcuts</h2>
<p>Adding keyboard shortcuts in RStudio is very simple, just go to the menu <strong>Tools ‚Üí Modify keyboard shortcuts</strong> and, in the window that will appear, use the small search engine at the top right to find those commands related to Zotero. Three will appear, of which, from my own experience, I have only assigned a shortcut to <em>Insert citation</em>. To assign a key combination, just click on the space to the right of the name of each command (in the <em>Shortcut</em> column) and press the desired combination: in my case, I use the combinations of <em>Ctrl + K</em>, but this will depend on your operating system (e.g.&nbsp;in MacOS there is no <em>Ctrl</em> key), to make sure that there are no other commands previously assigned to any of those key combinations.</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-1989719168.png" class="img-fluid"></p>
<p>Great, we‚Äôre all set! It‚Äôs time to test our changes.</p>
</section>
<section id="testing-everything" class="level2">
<h2 data-anchor-id="testing-everything">Testing everything</h2>
<ol type="1">
<li><p>We will start by opening a file in Quarto in HTML output format (this is merely illustrative, the commands will work regardless of the output format selected). <strong>Important:</strong> for this example, I suggest making sure that the <strong>Use visual markdown editor</strong> option is unchecked, since we will be working in <em>Source</em> mode.</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-1949640663.png" class="img-fluid"></p></li>
<li><p>Next, we will create an empty file where our bibliographic citations will be stored (for our example, we will name it <strong>references.bib</strong>). Then, in the header of our Quarto file (also called the YAML section), we will add a line where we will indicate the path to this created file:</p></li>
</ol>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb2-1">---</span>
<span id="cb2-2">title: "test_rbbt"</span>
<span id="cb2-3">format: html</span>
<span id="cb2-4">bibliography: references.bib</span>
<span id="cb2-5">---</span></code></pre></div></div>
<ol start="3" type="1">
<li>Also, to ensure that <strong>rbbt</strong> does NOT attempt to include references to figures, tables, equations, or other non-bibliographic elements, we will include the following code within a chunk at the beginning of our document:</li>
</ol>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get current filepath</span></span>
<span id="cb3-2">currentFilePath <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> this.path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">this.path</span>()</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get citation keys</span></span>
<span id="cb3-5">prefix2rm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fig-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tbl-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eq-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sec-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lst-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"thm-"</span>)</span>
<span id="cb3-6">keys <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rbbt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbt_detect_citations</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> currentFilePath)</span>
<span id="cb3-7">index2rm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^"</span>, prefix2rm), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> grep, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> keys) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-8">  </span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">what =</span> c)</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Updating bib file</span></span>
<span id="cb3-12">rbbt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbt_update_bib</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path_rmd =</span> currentFilePath, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore =</span> keys[index2rm], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div></div>
</div>
<ol start="4" type="1">
<li><p>Next, we will type some text and then press the key combination assigned to the insert quote command (remember the <em>Ctrl + K</em> shorcut?). What will happen is that a very thin window will open that will serve as an interface to Zotero. We will be able to type all the quotes we want to include in our text. The navigation between the suggested quotations is done with the arrow keys and the Enter key. It is also possible to add multiple quotes in each call of this small but powerful interface:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-4257070944.png" class="img-fluid"></p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Quotations may be made freely or in parentheses; however, for the latter case, quotations should be placed in square brackets <code>[ ]</code> (and not between the parenthesis symbols).</p>
</div>
</div>
<ol start="5" type="1">
<li>Now yes, we render the document and we should get:</li>
</ol>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-3442020781.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled" title="Render on Save">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Render on Save
</div>
</div>
<div class="callout-body-container callout-body">
<p>It is highly recommended to enable the <em>Render on Save</em> option (located at the top next to the Save button), which allows us to Render and visualize our work just pressing <em>Ctrl + S</em> (Save shortcut).</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-1949640663.png" class="img-fluid"></p>
</div>
</div>
<hr>
</section>
</section>
<section id="es-zotero-quarto-rstudio-y-algo-m√°s" class="level1">
<h1>[ES] Zotero + Quarto + RStudio y algo m√°s</h1>
<p>Quarto se est√° volviendo cada vez m√°s una poderosa alternativa para la generaci√≥n de diversos tipos de documentos y reportes. Por su parte, Zotero es uno de los administradores de citas bibliogr√°ficas m√°s extendido y utilizado, no solo por ser software libre, sino tambi√©n porque la comunidad a su alrededor ha ido desarrollando muchos <em>plug-ins</em> que permiten incrementar sus capacidades fuera de lo ofrecido por sus propios desarrolladores. Finalmente, RStudio es uno de los IDE preferidos en la comunidad de programadores en R, R markdown y Quarto, por su simplicidad y potencia, pero tambi√©n por permitir la incorporaci√≥n de <em>addins</em> (la analog√≠a de <em>plug-ings</em>) a trav√©s de paquetes de R.</p>
<p>En el presente art√≠culo, veremos c√≥mo a trav√©s de un paquete de R es posible a√±adir la posibilidad en RStudio de insertar citas bibliogr√°ficas desde Zotero en archivos Quarto (y tambi√©n en R markdown) de manera muy sencilla (aprendiendo uno o dos atajos de teclado).</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Todo el material necesario para ejecutar este tutorial se puede encontrar en mi repositorio, siguiendo este <a href="https://github.com/LuisLauM/LuisLauM.github.io/tree/main/blog/zotero-quarto-rstudio/test-rbbt.zip">link</a>. Deber√°s dar click al link de <code>View raw</code> o bien al bot√≥n de <code>Download raw file</code>.</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-8112645573.png" class="img-fluid"></p>
</div>
</div>
<section id="software-necesario" class="level2">
<h2 data-anchor-id="software-necesario">Software necesario</h2>
<p>Como ya imaginar√°n, es necesario tener instalados: <a href="https://cran.r-project.org/">R</a>, <a href="https://posit.co/downloads/">RStudio</a>, <a href="https://www.zotero.org/">Zotero</a> (de preferencia, con una cuenta logueada y con algunas referencias que podamos usar como ejemplo) y <a href="https://quarto.org/docs/download/">Quarto</a> (este √∫ltimo viene junto a la instalaci√≥n de <strong>las √∫ltimas versiones de RStudio</strong>).</p>
</section>
<section id="instalando-el-plug-in-de-rbb-en-zotero" class="level2">
<h2 data-anchor-id="instalando-el-plug-in-de-rbb-en-zotero">Instalando el <em>plug-in</em> de <strong>RBB</strong> en Zotero</h2>
<p>Citando las propias palabras de la <a href="https://retorque.re/zotero-better-bibtex/index.html">web oficial</a> de este plug-in: <em>Better BibTeX (BBT) es un complemento para Zotero y Juris-M que facilita la gesti√≥n de los datos bibliogr√°ficos, especialmente para los autores de documentos que utilizan cadenas de herramientas basadas en texto (por ejemplo, LaTeX / Markdown)</em>.</p>
<p>Su instalaci√≥n est√° detallada en la propia web, pero haremos un resumen aqu√≠:</p>
<ol type="1">
<li><p>Ir a la <a href="https://retorque.re/zotero-better-bibtex/installation/index.html">secci√≥n (pesta√±a) de Instalaci√≥n</a>:</p></li>
<li><p>Justamente en la primera frase de las instrucciones, las palabras <em>latest release</em> est√°n de un color ligeramente distinto ya que contienen el link al repositorio de la √∫ltima versi√≥n disponible del plug-in:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-3846744947.png" class="img-fluid"></p></li>
<li><p>Al hacer click sobre ese link, se abrir√° una ventana de repositorio en Github, desde donde deberemos descargar el archivo con extensi√≥n <strong>.xpi</strong>:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-155659256.png" class="img-fluid"></p></li>
<li><p>Seguidamente, abriremos una ventana de Zotero e iremos al men√∫ de <strong>Tools ‚Üí Plugins</strong>:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-523717840.png" class="img-fluid"></p></li>
<li><p>Se abrir√° una ventana que nos mostrar√° todos los plug-ins instalados. Para instalar un plug-in nuevo, bastar√° con dar click al √≠cono de engranaje (arriba a la derecha) y dar click a la opci√≥n <em>Install Pluggins From File</em>:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-4204702406.png" class="img-fluid"></p></li>
<li><p>Desde aqu√≠, seleccionaremos el archivo xpi que descargamos en el paso [3] y, despu√©s de unos segundos, ya deber√≠amos observar nuestro nuevo plug-in BBT instalado y activo (porque s√≠, es posible desactivar plug-ins):</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-3431742116.png" class="img-fluid"></p></li>
</ol>
</section>
<section id="instalando-el-addin-de-rbbt-en-rstudio" class="level2">
<h2 data-anchor-id="instalando-el-addin-de-rbbt-en-rstudio">Instalando el <em>addin</em> de <strong>rbbt</strong> en RStudio</h2>
<p>Como mencion√©, en RStudio es posible a√±adir capacidades extra al IDE a trav√©s de addins. Para nuestro caso, utilizaremos un paquete que contiene los addins necesarios para interconectar nuestra interfaz de RStudio con Zotero. El paquete referido se llama <strong>rbbt</strong> y, si bien NO es un paquete oficial de CRAN, podemos descargarlo directamente desde su <a href="https://github.com/paleolimbot/rbbt">repositorio en Github</a>.</p>
<p>Ahora bien, usted puede decidir descargar y utilizar la versi√≥n oficial del paquete; sin embargo, al d√≠a en que escribo este art√≠culo, yo he tomado la versi√≥n oficial de <strong>rbbt</strong> y he creado la m√≠a propia en donde corrijo ciertos problemas y a√±ado ciertas funcionalidades (e.g., el poder citar paquetes de R). El presente tutorial muestra c√≥mo instalar y usar la versi√≥n (<em>forked</em>) <a href="https://github.com/LuisLauM/rbbt">disponible en mi perfil de Github</a>, pero esto es c√≥digo libre, por lo que usted decide (hasta incluso puede crear su propia versi√≥n y a√±adir funcionalidades m√°s interesantes).</p>
<p>Para instalar el paquete, bastar√° con ejecutar las siguiente l√≠nea en R:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Para esto, debe instalar previamente el paquete 'remotes'</span></span>
<span id="cb4-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repo =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LuisLauM/rbbt"</span>)</span></code></pre></div></div>
</div>
<p>Una vez que haya culminado la instalaci√≥n, podremos revisar que se haya a√±adido correctamente a nuestro men√∫ de Addins, que se encuentra justo al final de la barra de accesos r√°pidos de RStudio:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-4171540842.png" class="img-fluid"></p>
<p>Al hacer click en el men√∫ desplegable de Addins, podremos buscar que se encuentre ahora los comandos de Insertar citas y A√±adir bibliograf√≠a:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-1339714737.png" class="img-fluid"></p>
<p>A partir de este punto, ya es posible realizar esas acciones a trav√©s de dar click a esos botones, pero esto resulta MUY inc√≥modo de hacer durante la redacci√≥n de un art√≠culo o reporte, por lo que a continuaci√≥n veremos c√≥mo a√±adir atajos de teclado para dichos comandos.</p>
</section>
<section id="atajos-de-teclado-para-los-comandos-de-rbbt" class="level2">
<h2 data-anchor-id="atajos-de-teclado-para-los-comandos-de-rbbt">Atajos de teclado para los comandos de <strong>rbbt</strong></h2>
<p>A√±adir atajos de teclado en RStudio es muy sencillo, basta con ir al men√∫ <strong>Tools ‚Üí Modify keyboard shortcuts</strong> y, en la ventana que aparecer√°, utilizar el peque√±o buscador arriba a la derecha para hallar aquellos comandos relacionados con Zotero. Aparecer√°n 3, de los cuales bastar√° con asignar un atajo a <em>Insertar cita</em>. Para asignar una combinaci√≥n de teclas, daremos click al espacio a la derecha del nombre del comando de inter√©s (en la columna <em>Shortcut</em>) y presionar la combinaci√≥n deseada: en mi caso, utilizo las combinaci√≥n <em>Ctrl + K</em>, pero eso depender√° desde su sistema operativo (e.g.&nbsp;en MacOS no existe la tecla <em>Ctrl</em>), hasta el hecho de asegurarnos que no haya otros comandos previamente asignados a alguna de esas combinaciones de teclas.</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-1989719168.png" class="img-fluid"></p>
<p>¬°Genial, ya tenemos todo listo! Es momento de probar nuestros cambios.</p>
</section>
<section id="poner-a-prueba-todo" class="level2">
<h2 data-anchor-id="poner-a-prueba-todo">Poner a prueba todo</h2>
<ol type="1">
<li><p>Empezaremos por abrir un archivo en Quarto en formato de salida en HTML (esto es meramente ilustrativo, los comandos funcionar√° independientemente del formato de salida seleccionado). <strong>Importante:</strong> para este ejemplo, sugiero asegurarnos que la opci√≥n <strong>Use visual markdown editor</strong> est√© deseleccionada, ya que trabajaremos en el modo <em>Source</em>.</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-1949640663.png" class="img-fluid"></p></li>
<li><p>Seguidamente, crearemos un archivo vac√≠o en donde se guardar√°n nuestras citas bibliogr√°ficas (para nuestro ejemplo, le pondremos el nombre <strong>references.bib</strong>). Luego, en la cabecera de nuestro archivo de Quarto (llamada tambi√©n la secci√≥n YAML), a√±adiremos una l√≠nea en donde indicaremos la ruta a este archivo creado:</p></li>
</ol>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">---</span>
<span id="cb5-2">title: "test_rbbt"</span>
<span id="cb5-3">format: html</span>
<span id="cb5-4">bibliography: references.bib</span>
<span id="cb5-5">---</span></code></pre></div></div>
<ol start="3" type="1">
<li>As√≠ mismo, para asegurarnos de que <strong>rbbt</strong> NO intente incluir las referencias a figuras, tablas, ecuaciones, u otros elementos no bibliogr√°ficos, incluiremos el siguiente c√≥digo dentro de un chunk al inicio de nuestro documento:</li>
</ol>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get current filepath</span></span>
<span id="cb6-2">currentFilePath <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> this.path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">this.path</span>()</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get citation keys</span></span>
<span id="cb6-5">prefix2rm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fig-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tbl-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eq-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sec-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lst-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"thm-"</span>)</span>
<span id="cb6-6">keys <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rbbt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbt_detect_citations</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> currentFilePath)</span>
<span id="cb6-7">index2rm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^"</span>, prefix2rm), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> grep, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> keys) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-8">  </span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">what =</span> c)</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Updating bib file</span></span>
<span id="cb6-12">rbbt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bbt_update_bib</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path_rmd =</span> currentFilePath, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore =</span> keys[index2rm], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div></div>
</div>
<ol start="4" type="1">
<li><p>A continuaci√≥n, digitaremos algo de texto y seguidamente presionaremos la combinaci√≥n de teclas asignada al comando de insertar cita (en este ejemplo, <em>Ctrl + K</em>). Lo que ocurrir√° es que se abrir√° una ventana muy delgada que nos servir√° como interface con Zotero. En ella, podremos escribir todas las citas que deseamos incluir en nuestro texto. La navegaci√≥n entre las citas sugeridas la haremos con las teclas direccionales y la tecla Enter. As√≠ mismo, es posible a√±adir m√∫ltiples citas en cada llamada de esta peque√±a pero poderosa interfaz:</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-4257070944.png" class="img-fluid"></p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Las citas pueden hacerse de forma libre o entre par√©ntesis; sin embargo, para el segundo caso, deber√°n colocarse las citas entre corchetes <code>[ ]</code> (y no entre los s√≠mbolos de par√©ntesis).</p>
</div>
</div>
<ol start="5" type="1">
<li>Ahora s√≠, renderizamos el documento y deber√≠amos obtener:</li>
</ol>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-3442020781.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-note callout-titled" title="Render on Save">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Render on Save
</div>
</div>
<div class="callout-body-container callout-body">
<p>Es muy recomendable habilitar la opci√≥n de <em>Render on Save</em> (situada arriba al costado del bot√≥n de Guardar) que, como su nombre lo indica, permite Redenrizar al Guardar, lo que permite que solo presiones <em>Ctrl + S</em> para visualizar nuestro trabajo en Quarto.</p>
<p><img src="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/images/clipboard-1949640663.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>
 ]]></description>
  <category>quarto</category>
  <category>zotero</category>
  <category>rstudio</category>
  <category>citations</category>
  <category>bibliography</category>
  <category>references</category>
  <category>citacion</category>
  <category>bibliografia</category>
  <guid>https://luislaum.github.io/home/blog/zotero-quarto-rstudio/zotero-quarto-rstudio.html</guid>
  <pubDate>Mon, 16 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/zotero-quarto-rstudio/banner.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title></title>
  <link>https://luislaum.github.io/home/blog/elnino-app/elnino-app.html</link>
  <description><![CDATA[ undefined ]]></description>
  <category>enso</category>
  <category>peru</category>
  <category>el nino</category>
  <guid>https://luislaum.github.io/home/blog/elnino-app/elnino-app.html</guid>
  <pubDate>Sat, 20 Apr 2024 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/elnino-app/elnino-explain1.png" medium="image" type="image/png" height="288" width="144"/>
</item>
<item>
  <title>Developing Beneath the surface</title>
  <link>https://luislaum.github.io/home/blog/about-this-website/about-this-website.html</link>
  <description><![CDATA[ 


<section id="en-developing-beneath-the-surface" class="level1">
<h1>[EN] Developing ‚ÄòBeneath the surface üåä‚Äô</h1>
<section id="the-idea" class="level2">
<h2 data-anchor-id="the-idea">The idea</h2>
<p>The first thing that came to mind was ‚Äúhow can I develop a page that I can leave as a reference for those who want to contact me in a professional setting?‚Äù and ‚Äúthrough what medium can I share those ideas, small works or personal experiences that I believe could be useful for other professionals in my field?‚Äù. Well, there are many options around (social media, podcasts, TikTok, etc.). This first decision was not difficult, as I am not particularly characterized by my charisma on social networks, so I decided to opt for writing a blog. However, here the decision-making process did get a bit complicated, as there are many platforms available: <a href="https://wordpress.com/">Wordpress</a>, <a href="https://www.netlify.com/">Netlify</a>, <a href="https://docs.gitlab.com/ee/user/project/pages/">Gitlab pages</a>, <a href="https://medium.com/">Medium</a>, among <a href="https://stackshare.io/github-pages/alternatives">others</a>. Each one offers different advantages and potential, but my decision was based above all on the familiarity of use of the Github and Quarto platforms. I decided on Github pages.</p>
</section>
<section id="github-pages" class="level2">
<h2 data-anchor-id="github-pages">Github pages</h2>
<p>Github Pages is a free static website hosting service that allows you to publish HTML content directly from a GitHub repository. This platform offers multiple advantages:</p>
<ul>
<li><p><strong>It‚Äôs free!</strong>: You don‚Äôt need to pay for a web hosting service, just have a (free) GitHub account.</p></li>
<li><p><strong>Easy to use</strong>: Uploading your HTML, CSS, and JavaScript files to GitHub is very simple.</p></li>
<li><p><strong>Direct integration with GitHub</strong>: This becomes VERY important if you already use GitHub (as was my case) for your code projects.</p></li>
<li><p><strong>Versioning</strong>: GitHub Pages keeps a history of all the changes you make to your website, so if something goes wrong you can always go back to a previous version of your repository (page).</p></li>
<li><p><strong>Secure</strong>: GitHub Pages uses HTTPS to protect your website.</p></li>
<li><p><strong>Fast</strong>: For a few years now, Microsoft has bought GitHub and therefore its services use an extensive global network of servers to deliver your website to users around the world.</p></li>
<li><p><strong>Scalable</strong>: GitHub Pages can handle any amount of traffic, so your website can grow smoothly. Although a personal/professional blog is not expected to have very high traffic peaks, it is always good to know that this support exists.</p></li>
<li><p><strong>SEO optimized</strong>: GitHub Pages is optimized for search engines, which will help your website appear in the results of major web search engines.</p></li>
</ul>
<p>In the end, Github pages was the hosting option that I found most attractive. However, there are multiple ways to upload content, from different development platforms that involve the use of programming languages (e.g.&nbsp;Javascript) or markup, such as markdown or Quarto. Once again, my historical experience weighed more and I decided to use Quarto.</p>
</section>
<section id="quarto" class="level2">
<h2 data-anchor-id="quarto">Quarto</h2>
<p>Quarto is an open-source scientific document publishing platform developed by the POSIT (formerly RStudio) team. It is based on the R Markdown format and extends it with new features and functionalities to create richer and more interactive documents. It implements a more powerful preprocessing system than R Markdown and supports additional programming languages such as Python and Julia, expanding the possibilities for analysis and visualization.</p>
<p>For the past few years, I have been using Quarto not only for writing simple R reports, but also for the complete composition of scientific articles (one of them with a format submitted directly from the .docx output obtained in Quarto), as well as the development of interactive websites through the <a href="https://quarto.org/docs/interactive/shiny/">Quarto-Shiny</a> duo.</p>
</section>
<section id="the-content" class="level2">
<h2 data-anchor-id="the-content">The content</h2>
<p>I Didn‚Äôt Have to Start from Scratch. Fortunately, there are many resources available online, but I will briefly summarize the main links I used:</p>
<ul>
<li><em>Create the website hosted on Github pages, prepare it for content management with Quarto and to work from RStudio</em>: The first steps to follow are very well explained in the video by Melissa Van Bussel <a href="https://youtu.be/arzBRW5XIkg?feature=shared">(link)</a>. Highly recommended, although it assumes that we know how to handle Git-bash and that we have a token well configured for our PC. I will put these last details at the end of this article.</li>
</ul>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/arzBRW5XIkg?feature=shared" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<ul>
<li><p><em>Establish an outline of what we are going to publish</em>: Once we have successfully configured our website, it is time to take pen and paper and outline what content we want to share and what the logic will be for organizing that content into sections. While this part is very personal, since it will not be the same to diagram a page that only aims to serve as a professional reference (that is, an interactive resume) to that of a freelancer who wants to show their main projects and/or services offered, you don‚Äôt need to start from scratch either. You can review examples of pages from other creators (researchers, reporters, bloggers, graphic artists, etc.) and be inspired by their designs. Also, you can review examples of page structures that use Github pages <a href="https://jekyllthemes.io/free">(link)</a>. Remember, everything must ALWAYS start with the type of content you plan to place.</p></li>
<li><p><em>Start writing</em>: OK, this is not a scientific article and there is much more freedom to fill in the different sections; however, always remember to take into account the basic writing criteria (from general to specific), be clear and careful when choosing the type of language (based on the type of audience you expect to read you) and, once again, review examples. Of course, these days AI text generation platforms can be of great help, but we should not delegate the entire burden (i.e.&nbsp;no copy-paste) to them without first reading and corroborating the information they return to us. At this point, the following articles were very useful to me:</p>
<ul>
<li><p>Create your website with Quarto: complete tutorial and template link: https://www.marvinschmitt.com/blog/website-tutorial-quarto/.</p></li>
<li><p>Creating your personal website with Quarto link: https://ucsb-meds.github.io/creating-quarto-websites/.</p></li>
<li><p>Creating a website link: https://quarto.org/docs/websites/.</p></li>
</ul></li>
<li><p><em>Establish an order</em>: Once we have finished and published a first article, everything will be simpler in technical terms since you will discover that there are multiple reference sources available.</p></li>
</ul>
<hr>
</section>
</section>
<section id="es-desarrollando-beneath-the-surface" class="level1">
<h1>[ES] Desarrollando ‚ÄòBeneath the surface üåä‚Äô</h1>
<section id="la-idea" class="level2">
<h2 data-anchor-id="la-idea">La idea</h2>
<p>Lo primero que lleg√≥ a mi mente fue ¬´¬øde qu√© manera puedo desarrollar una p√°gina en que pueda dejar como referencia para aquellos que quisieran contactar conmigo en un ambiente profesional?¬ª y ¬´¬ødesde qu√© medio puedo compartir aquellas ideas, peque√±os trabajos o experiencias personales que creo que podr√≠an resultar de utilidad para otros profesionales en mi rubro?¬ª. Bueno, existen muchas opciones alrededor (redes sociales, podcast, TikTok, etc.). Esta primera decisi√≥n no fue dif√≠cil, pues no me caracterizo particularmente por mi carisma en redes, as√≠ que decid√≠ optar por escribir un blog. Sin embargo, aqu√≠ la toma de decisiones s√≠ se complic√≥ un poco, pues existen muchas plataformas disponibles: <a href="https://wordpress.com/">Wordpress</a>, <a href="https://www.netlify.com/">Netlify</a>, <a href="https://docs.gitlab.com/ee/user/project/pages/">Gitlab pages</a>, <a href="https://medium.com/">Medium</a>, entre <a href="https://stackshare.io/github-pages/alternatives">others</a>. Cada una plantea ventajas y potencialidades distintas, pero mi decisi√≥n se bas√≥ sobre todo en la familiaridad de uso de las plataformas <a href="https://github.com/">Github</a> y <a href="https://quarto.org/">Quarto</a>. Me decid√≠ por <a href="https://pages.github.com/">Github pages</a>.</p>
</section>
<section id="github-pages-1" class="level2">
<h2 data-anchor-id="github-pages-1">Github pages</h2>
<p>Github pages es un servicio gratuito de alojamiento de sitios web est√°ticos que permite publicar contenido HTML directamente desde un repositorio de GitHub. Esta plataforma ofrece m√∫ltiples ventajas:</p>
<ul>
<li><p><strong>Gratuito</strong>: No necesitas pagar por un servicio de alojamiento web, solo tener una cuenta de GitHub (gratuita).</p></li>
<li><p><strong>F√°cil de usar</strong>: Subir tus archivos HTML, CSS y JavaScript a GitHub es muy sencillo.</p></li>
<li><p><strong>Integraci√≥n directa con GitHub</strong>: Esto se hace MUY importante si ya usas GitHub (como fue mi caso) para tus proyectos de c√≥digo.</p></li>
<li><p><strong>Versionado</strong>: GitHub Pages guarda un historial de todos los cambios que realices en tu sitio web, por lo que si algo sale mal siempre puedes volver a una versi√≥n anterior de tu repositorio (p√°gina).</p></li>
<li><p><strong>Seguro</strong>: GitHub Pages utiliza HTTPS para proteger tu sitio web.</p></li>
<li><p><strong>R√°pido</strong>: Desde hace unos a√±os, Microsoft compr√≥ GitHub y por tanto sus servicios utilizan una extensa red global de servidores para entregar tu sitio web a los usuarios de todo el mundo.</p></li>
<li><p><strong>Escalable</strong>: GitHub Pages puede manejar cualquier cantidad de tr√°fico, por lo que tu sitio web puede crecer sin problemas. Aunque de un blog personal/profesional no se espera tener picos de tr√°fico muy altos, siempre es bueno saber que existe este respaldo.</p></li>
<li><p><strong>Optimizado para SEO</strong>: GitHub Pages est√° optimizado para los motores de b√∫squeda, lo que ayudar√° a que nuestro sitio web aparezca en los resultados de los principales buscadores web.</p></li>
</ul>
<p>Al final, Github pages fue la opci√≥n de alojamiento que me result√≥ m√°s atractiva. Sin embargo, existen m√∫ltiples maneras de subir contenido, desde diferentes plataformas de desarrollo que involucran el uso de lenguajes de programaci√≥n (e.g.&nbsp;Javascript) o de marcado, como markdown o Quarto. Una vez m√°s, mi experiencia hist√≥rica pes√≥ m√°s y me decant√© por el uso de Quarto.</p>
</section>
<section id="quarto-1" class="level2">
<h2 data-anchor-id="quarto-1">Quarto</h2>
<p>Quarto es una plataforma de publicaci√≥n de documentos cient√≠ficos de c√≥digo abierto desarrollada por el equipo de POSIT (ex RStudio). Se basa en el formato R Markdown y lo ampl√≠a con nuevas caracter√≠sticas y funcionalidades para crear documentos m√°s ricos e interactivos. Implementa un sistema de preprocesamiento m√°s potente que R Markdown y soporta lenguajes de programaci√≥n adicionales como Python y Julia, ampliando las posibilidades de an√°lisis y visualizaci√≥n.</p>
<p>Desde hace unos pocos a√±os, he venido utilizando Quarto no solo para la redacci√≥n de reportes sencillos en R, sino inclusive para la composici√≥n completa de art√≠culos cient√≠ficos (uno de ellos con formato sometido directamente desde la salida en .docx obtenida en Quarto), as√≠ como el desarrollo de webs interactivas a trav√©s de la dupla <a href="https://quarto.org/docs/interactive/shiny/">Quarto-Shiny</a>.</p>
</section>
<section id="el-contenido" class="level2">
<h2 data-anchor-id="el-contenido">El contenido</h2>
<p>No tuve que empezar desde cero. Afortunadamente, hay mucho material all√° afuera, pero resumir√© brevemente los principales links que utilic√©:</p>
<ul>
<li>Crear la website alojada en Github pages, preparaela para el manejo de contenido con Quarto y para trabajar desde RStudio: Los primeros pasos a seguir est√°n muy bien explicados en el v√≠deo de Melissa Van Bussel <a href="https://youtu.be/arzBRW5XIkg?feature=shared">(link)</a>. Muy recomendable, aunque parte bajo el supuesto de que conocemos c√≥mo manejar Git-bash y de que tenemos bien configurado un token para nuestra PC. Estos √∫ltimos detalles los colocar√© al final de este art√≠culo.</li>
</ul>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/arzBRW5XIkg?feature=shared" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<ul>
<li><p>Establecer un esquema de lo que vamos a publicar. Una vez que hayamos logrado configurar correctamente nuestra web, sigue el turno de tomar l√°piz y papel y esquematizar qu√© contenido deseamos compartir y cu√°l ser√° la l√≥gica para ordenar dicho contenido en secciones. Si bien esta parte es muy personal, ya que no ser√° lo mismo diagramar una p√°gina que solo tiene como objetivo servir de referencia profesional (es decir, un CV interactivo) a la de un <strong>freelancer</strong> que desea mostrar sus principales proyectos y/o servicios ofrecidos, no necesitas ir desde cero tampoco. Puedes revisar ejemplos de p√°ginas de otros creadores (investigadores, reporteros, bloggers, artistas gr√°ficos, etc.) e inspirarte en sus dise√±os. As√≠ tambi√©n, puedes revisar ejemplos de estructuras de p√°ginas que usan Github pages <a href="https://jekyllthemes.io/free">(link)</a>. Recuerda, todo debe partir SIEMPRE del tipo de contenido que planeas colocar.</p></li>
<li><p>Empezar a escribir. OK, esto no es un art√≠culo cient√≠fico y hay mucha m√°s libertad para rellenar las distintas secciones; no obstante, recuerda siempre tener en cuenta los criterios b√°sicos de redacci√≥n (de lo general a lo espec√≠fico), ser claro y cuidadoso al elegir el tipo de lenguaje (con base en el tipo de p√∫blico que esperas que te lea) y, una vez m√°s, revisar ejemplos. Por supuesto, en estos d√≠as las plataformas de IA para generaci√≥n de texto pueden resultar de gran ayuda, pero no debemos delegarles toda la carga (i.e.&nbsp;nada de copiar-pegar) sin antes leer corroborar la informaci√≥n que nos devuelven. En este punto, me fueron de mucha utilidad los siguientes art√≠culos:</p>
<ul>
<li><p>Crear tu website con Quarto: tutorial completo y plantilla <a href="https://www.marvinschmitt.com/blog/website-tutorial-quarto/">link</a>.</p></li>
<li><p>Creando tu website personal con Quarto <a href="https://ucsb-meds.github.io/creating-quarto-websites/">link</a>.</p></li>
<li><p>Creando un website <a href="https://quarto.org/docs/websites/">link</a>.</p></li>
</ul></li>
<li><p>Establecer un orden. Una vez que hayamos culminado y publicado un primer art√≠culo, todo ir√° siendo m√°s simple en t√©rminos t√©cnicos ya que descubrir√°s que existen m√∫ltiples fuentes de referencia disponibles.</p></li>
</ul>


</section>
</section>
 ]]></description>
  <category>quarto</category>
  <category>github pages</category>
  <category>blog</category>
  <category>writing</category>
  <guid>https://luislaum.github.io/home/blog/about-this-website/about-this-website.html</guid>
  <pubDate>Fri, 19 Apr 2024 00:00:00 GMT</pubDate>
  <media:content url="https://luislaum.github.io/home/blog/about-this-website/banner.png" medium="image" type="image/png" height="77" width="144"/>
</item>
</channel>
</rss>
